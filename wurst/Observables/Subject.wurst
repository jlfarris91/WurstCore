package Subject
import public Observables
import LinkedList

// ============================================================================
public abstract class Subject<T> implements IObservable<T>, IObserver<T>
  protected LinkedList<IObserver<T>> m_observers

  // --------------------------------------------------------------------------
  construct()
    m_observers = new LinkedList<IObserver<T>>()

  // --------------------------------------------------------------------------
  override function subscribe(IObserver<T> observer)
    m_observers.add(observer)
  
  // --------------------------------------------------------------------------
  override function onError(string error)
    for observer in m_observers
      observer.onError(error)

  // --------------------------------------------------------------------------
  override function onCompleted()
    for observer in m_observers
      observer.onCompleted()

  // --------------------------------------------------------------------------
  override function onNext(T element)
    for observer in m_observers
      observer.onNext(element)