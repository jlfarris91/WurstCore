package Optional
import Func

public tuple optionalInt(bool hasValue, int value, string errorMessage)
public tuple optionalReal(bool hasValue, real value, string errorMessage)
public tuple optionalString(bool hasValue, string value, string errorMessage)
public tuple optionalBool(bool hasValue, bool value, string errorMessage)
public tuple optionalVec2(bool hasValue, vec2 value, string errorMessage)
public tuple optionalVec3(bool hasValue, vec3 value, string errorMessage)

// ============================================================================
public function some(int value) returns optionalInt
  return optionalInt(true, value, null)

// ============================================================================
public function some(real value) returns optionalReal
  return optionalReal(true, value, null)

// ============================================================================
public function some(string value) returns optionalString
  return optionalString(true, value, null)

// ============================================================================
public function some(bool value) returns optionalBool
  return optionalBool(true, value, null)

// ============================================================================
public function some(vec2 value) returns optionalVec2
  return optionalVec2(true, value, null)

// ============================================================================
public function some(vec3 value) returns optionalVec3
  return optionalVec3(true, value, null)

// ============================================================================
public function int.some() returns optionalInt
  return some(this)

// ============================================================================
public function real.some() returns optionalReal
  return some(this)

// ============================================================================
public function string.some() returns optionalString
  return some(this)

// ============================================================================
public function bool.some() returns optionalBool
  return some(this)

// ============================================================================
public function vec2.some() returns optionalVec2
  return some(this)

// ============================================================================
public function vec3.some() returns optionalVec3
  return some(this)

// ============================================================================
public function none_int() returns optionalInt
  return optionalInt(false, 0, null)

// ============================================================================
public function none_int(string error) returns optionalInt
  return optionalInt(false, 0, error)

// ============================================================================
public function none_real() returns optionalReal
  return optionalReal(false, 0.0, null)

// ============================================================================
public function none_real(string error) returns optionalReal
  return optionalReal(false, 0.0, error)

// ============================================================================
public function none_string() returns optionalString
  return optionalString(false, null, null)

// ============================================================================
public function none_string(string error) returns optionalString
  return optionalString(false, null, error)

// ============================================================================
public function none_bool() returns optionalBool
  return optionalBool(false, false, null)

// ============================================================================
public function none_bool(string error) returns optionalBool
  return optionalBool(false, false, error)

// ============================================================================
public function none_vec2() returns optionalVec2
  return optionalVec2(false, ZERO2, null)

// ============================================================================
public function none_vec2(string error) returns optionalVec2
  return optionalVec2(false, ZERO2, error)

// ============================================================================
public function none_vec3() returns optionalVec3
  return optionalVec3(false, ZERO3, null)

// ============================================================================
public function none_vec3(string error) returns optionalVec3
  return optionalVec3(false, ZERO3, error)

// ============================================================================
public function optionalInt.reduce(int ifNone) returns int
  return this.hasValue ? this.value : ifNone

// ============================================================================
public function optionalInt.reduce(Func<int> ifNone) returns int
  var value = this.value
  if (not this.hasValue)
    value = ifNone.call()
  destroy ifNone
  return value

// ============================================================================
public function optionalReal.reduce(real ifNone) returns real
  return this.hasValue ? this.value : ifNone

// ============================================================================
public function optionalReal.reduce(Func<real> ifNone) returns real
  var value = this.value
  if (not this.hasValue)
    value = ifNone.call()
  destroy ifNone
  return value

// ============================================================================
public function optionalString.reduce(string ifNone) returns string
  return this.hasValue ? this.value : ifNone

// ============================================================================
public function optionalString.reduce(Func<string> ifNone) returns string
  var value = this.value
  if (not this.hasValue)
    value = ifNone.call()
  destroy ifNone
  return value

// ============================================================================
public function optionalBool.reduce(bool ifNone) returns bool
  return this.hasValue ? this.value : ifNone

// ============================================================================
public function optionalBool.reduce(Func<bool> ifNone) returns bool
  var value = this.value
  if (not this.hasValue)
    value = ifNone.call()
  destroy ifNone
  return value

// ============================================================================
public function optionalVec2.reduce(vec2 ifNone) returns vec2
  return this.hasValue ? this.value : ifNone

// ============================================================================
public function optionalVec2.reduce(FuncVec2 ifNone) returns vec2
  var value = this.value
  if (not this.hasValue)
    value = ifNone.call()
  destroy ifNone
  return value

// ============================================================================
public function optionalVec3.reduce(vec3 ifNone) returns vec3
  return this.hasValue ? this.value : ifNone

// ============================================================================
public function optionalVec3.reduce(FuncVec3 ifNone) returns vec3
  var value = this.value
  if (not this.hasValue)
    value = ifNone.call()
  destroy ifNone
  return value