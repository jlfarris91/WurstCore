package UnitRecycler
import ErrorHandling
import HashMap
import Bounds
import UnitReviver
import RegisterEvents
import ClosureTimers
import ColorUtility
import UnitIndexer
import Suspend
import GroupExtensions

// ============================================================================
// Based on Unit Recycler by AGD https://www.hiveworkshop.com/threads/snippet-unit-recycler.286701/
// ============================================================================

@configurable public bool g_enableLogging = true
@configurable constant player UNIT_RECYCLER_OWNER = DUMMY_PLAYER
@configurable constant int INITIAL_CAPACITY = 32
@configurable constant real INITIAL_AUTO_RECYCLE_TIME = 30.0

constant int MAX_CAPACITY = 8192
constant vec2 DEACTIVATED_POS = mapBounds.max

trigger g_onRecycledTrigger = CreateTrigger()
unit g_lastRecycledUnit

trigger g_onStockedTrigger = CreateTrigger()
unit g_lastStockedUnit

UnitRecycler g_triggerUnitRecycler

public IterableMap<int, UnitRecycler> g_unitIdToUnitRecyclerMap = new IterableMap<int, UnitRecycler>()
HashMap<unit, UnitRecycler> g_unitToRecyclerMap = new HashMap<unit, UnitRecycler>()

// ============================================================================
public function isUnitRecyclable(unit _unit) returns bool
  return not IsUnitIllusion(_unit) and not IsUnitType(_unit, UNIT_TYPE_SUMMONED)

// ============================================================================
public function onUnitRecycled(code func)
  g_onRecycledTrigger.addCondition(Condition(func))

// ============================================================================
public function getLastRecycledUnit() returns unit
  return g_lastRecycledUnit

// ============================================================================
public function onUnitStocked(code func)
  g_onStockedTrigger.addCondition(Condition(func))

// ============================================================================
public function getLastStockedUnit() returns unit
  return g_lastStockedUnit

// ============================================================================
public function getTriggerUnitRecycler() returns UnitRecycler
  return g_triggerUnitRecycler
  
// ============================================================================
public class UnitRecycler
  private player m_owner
  private group m_active
  private group m_stocked
  private HashMap<unit, int> m_generationMap
  private int m_unitId
  private bool m_autoRecycleDead = true
  private real m_deathTime = INITIAL_AUTO_RECYCLE_TIME
  private unit m_lastStockedUnit = null
  private unit m_lastRecycledUnit = null

  // --------------------------------------------------------------------------
  construct(player owner, int unitId)

    if (UnitId2String(unitId) == null)
      error("Invalid unit id : {0}".format(unitId.toString()))

    if (IsHeroUnitId(unitId))
      error("UnitRecycler does not support hero units")

    m_owner = owner
    m_unitId = unitId
    g_unitIdToUnitRecyclerMap.put(unitId, this)
    m_active = CreateGroup()
    m_stocked = CreateGroup()
    m_generationMap = new HashMap<unit, int>()

  // --------------------------------------------------------------------------
  ondestroy
    
    for u in m_active
      u.remove()

    m_active.destr()
    m_active = null
    
    for u in m_stocked
      u.remove()

    m_stocked.destr()
    m_stocked = null

    g_unitIdToUnitRecyclerMap.remove(m_unitId)

  // --------------------------------------------------------------------------
  function getUnitId() returns int
    return m_unitId

  // --------------------------------------------------------------------------
  function getActiveCount() returns int
    return m_active.size()

  // --------------------------------------------------------------------------
  function getStockedCount() returns int
    return m_stocked.size()

  // --------------------------------------------------------------------------
  function getAutoRecycleDead() returns bool
    return m_autoRecycleDead

  // --------------------------------------------------------------------------
  function setAutoRecycleDead(bool value)
    m_autoRecycleDead = value

  // --------------------------------------------------------------------------
  function getDeathTime() returns real
    return m_deathTime

  // --------------------------------------------------------------------------
  function setDeathTime(real value)
    m_deathTime = value

  // --------------------------------------------------------------------------
  function getLastStockedUnit() returns unit
    return m_lastStockedUnit

  // --------------------------------------------------------------------------
  function getLastRecycledUnit() returns unit
    return m_lastRecycledUnit

  // --------------------------------------------------------------------------
  function doesUnitBelongToRecycler(unit _unit) returns bool
    return m_active.contains(_unit) or m_stocked.contains(_unit)

  // --------------------------------------------------------------------------
  function getGeneration(unit _unit) returns int
    return m_generationMap.has(_unit) ? m_generationMap.get(_unit) : -1

  // --------------------------------------------------------------------------
  function isUnitActive(unit _unit) returns bool
    return m_active.contains(_unit)

  // --------------------------------------------------------------------------
  function isUnitStocked(unit _unit) returns bool
    return m_stocked.contains(_unit)

  // --------------------------------------------------------------------------
  private function setUnitIsActive(unit _unit, bool active)
    if (active)
      m_active.addUnit(_unit)
      m_stocked.removeUnit(_unit)
    else
      m_stocked.addUnit(_unit)
      m_active.removeUnit(_unit)

  // --------------------------------------------------------------------------
  function stock(unit _unit) returns bool
    if (_unit == null)
      argumentNullError("_unit")
      return false

    if (_unit.isType(UNIT_TYPE_HERO) or not isUnitRecyclable(_unit))
      error("Unit type {0} is not recyclable".format(UnitId2String(_unit.getTypeId())))
      return false

    if (not _unit.isAlive() and not reviveUnit(_unit))
      error("Unable to revive dead unit " + UnitId2String(_unit.getTypeId()))
      return false

    _unit.setOwner(m_owner, true)
    stockUnit(_unit)
    fireUnitStockedTrigger(_unit)
    return true

  // --------------------------------------------------------------------------
  function unstock(unit _unit)
    if (not doesUnitBelongToRecycler(_unit))
      error("Trying to unstock a unit that does not belong to this recycler's stock")
      return

    unstockNoChecks(_unit)

  // --------------------------------------------------------------------------
  private function unstockNoChecks(unit _unit)

    setUnitIsActive(_unit, false)

    m_active.removeUnit(_unit)
    m_stocked.removeUnit(_unit)
    g_unitToRecyclerMap.remove(_unit)
    m_generationMap.remove(_unit)
    
    if (bj_lastCreatedUnit == _unit)
      bj_lastCreatedUnit = null

    if (m_lastRecycledUnit == _unit)
      m_lastRecycledUnit = null

    onActivated(_unit)

    // log("unstockUnit", "{0} {1}/{2}".format(_unit.getUserData().toString(), getActiveCount().toString(), m_active.size().toString()))

  // --------------------------------------------------------------------------
  function getUnit(player owner, vec2 pos, angle angle) returns unit
    var _unit = getNextAvailableUnit()

    if (_unit == null)
      _unit = createUnitInternal(owner, pos, angle)
    
    bj_lastCreatedUnit = _unit
    m_lastRecycledUnit = _unit

    _unit.setOwner(owner, true)
    _unit.setPos(pos)
    _unit.setFacing(angle)
    activateUnit(_unit)

    // log("getUnit", "{0} {1}/{2}".format(_unit.getUserData().toString(), getActiveCount().toString(), m_active.size().toString()))

    fireUnitRecycledTrigger(_unit)

    return _unit

  // --------------------------------------------------------------------------
  private function stockUnit(unit _unit)

    if (isUnitStocked(_unit))
      error("unit is already stocked and inactive! : {0}/{1}".format(m_active.size().toString(), m_active.size().toString()))
      return

    // let isNewUnit = not doesUnitBelongToRecycler(_unit)
    // let isActiveUnit = isUnitActive(_unit)

    setUnitIsActive(_unit, false)
    onStocked(_unit)
    
    // if (isActiveUnit)
      // log("stockUnit", "stocked active unit {0} : {1}/{2}".format(_unit.getUserData().toString(), getActiveCount().toString(), m_active.size().toString()))

    // if (isNewUnit)
      // log("stockUnit", "stocked new unit {0} : {1}/{2}".format(_unit.getUserData().toString(), getActiveCount().toString(), m_active.size().toString()))
  
  // --------------------------------------------------------------------------
  private function activateUnit(unit _unit)

    if (not doesUnitBelongToRecycler(_unit))
      error("unit is not stocked! : {0}/{1}".format(getActiveCount().toString(), m_active.size().toString()))
      return

    if (isUnitActive(_unit))
      error("unit is already active! : {0}/{1}".format(getActiveCount().toString(), m_active.size().toString()))
      return

    setUnitIsActive(_unit, true)
    onActivated(_unit)
    increaseGeneration(_unit)
    
    // log("activateUnit", "activated inactive unit : {0}/{1}".format(getActiveCount().toString(), m_active.size().toString()))

  // --------------------------------------------------------------------------
  private function onStocked(unit _unit)
    _unit.setHP(_unit.getMaxHP())
    _unit.setMana(_unit.getMaxMana())
    _unit.setVertexColor(Colors.white)
    _unit.setFlyHeight(_unit.getDefaultFlyHeight(), 0)
    _unit.suspend()
    _unit.hide()
    _unit.setPos(DEACTIVATED_POS)

  // --------------------------------------------------------------------------
  private function onActivated(unit _unit)
    _unit.unsuspend()
    _unit.show()
    RemoveGuardPosition(_unit)

  // --------------------------------------------------------------------------
  private function getNextAvailableUnit() returns unit
    if (m_stocked.isEmpty())
      return null
    return m_stocked.getFirst()

  // --------------------------------------------------------------------------
  private function createUnitInternal(player owner, vec2 pos, angle facingAngle) returns unit
    if (m_active.size() + m_stocked.size() == MAX_CAPACITY)
      error("exceeded capacity!")
      return null

    let u = CreateUnit(owner, m_unitId, pos.x, pos.y, facingAngle.radians)
    g_unitToRecyclerMap.put(u, this)

    setUnitIsActive(u, false)
    // log("createUnitInternal", "add : {0} {1}".format(u.getUserData().toString(), m_active.size().toString()))

    return u

  // --------------------------------------------------------------------------
  private function increaseGeneration(unit _unit)
    var generation = 0
    if (m_generationMap.has(_unit))
      generation = m_generationMap.get(_unit)
    m_generationMap.put(_unit, generation + 1)

  // --------------------------------------------------------------------------
  protected function onUnitDeindexed(unit deindexingUnit)
    unstockNoChecks(deindexingUnit)

  // --------------------------------------------------------------------------
  // private function log(string methodName, string message)
  //   if (g_enableLogging)
  //     Log.debug("UnitRecycler", methodName, UnitId2StringBJ(m_unitId), message)

  // --------------------------------------------------------------------------
  private function fireUnitRecycledTrigger(unit _unit)
    g_triggerUnitRecycler = this
    g_lastRecycledUnit = _unit
    g_onRecycledTrigger.evaluate()

  // --------------------------------------------------------------------------
  private function fireUnitStockedTrigger(unit _unit)
    g_triggerUnitRecycler = this
    g_lastStockedUnit = _unit
    g_onStockedTrigger.evaluate()

// ============================================================================
public function createUnitRecycled(player owner, int unitId, vec2 pos, angle facing) returns unit
  let recycler = getOrCreateUnitRecycler(unitId)
  return recycler.getUnit(owner, pos, facing)

// ============================================================================
public function unit.isStocked() returns bool
  let recycler = this.getRecycler()
  return recycler != null and recycler.isUnitStocked(this)

// ============================================================================
public function unit.getRecycler() returns UnitRecycler
  return g_unitToRecyclerMap.get(this)

// ============================================================================
public function unit.stock()
  let recycler = this.getRecycler()
  if (recycler != null)
    recycler.stock(this)
  else
    error("Trying to stock a unit that does not belong to a recycler")

// ============================================================================
public function getUnitRecycler(int unitId) returns UnitRecycler
  return g_unitIdToUnitRecyclerMap.get(unitId)

// ============================================================================
public function getOrCreateUnitRecycler(int unitId) returns UnitRecycler
  var recycler = getUnitRecycler(unitId)
  if (recycler == null)
    recycler = createUnitRecycler(unitId)
  return recycler

// ============================================================================
public function createUnitRecycler(int unitId) returns UnitRecycler
  var recycler = getUnitRecycler(unitId)
  if (recycler == null)
    recycler = new UnitRecycler(UNIT_RECYCLER_OWNER, unitId)
  return recycler

// ============================================================================
function onUnitDeathAfterDeathTime(unit dyingUnit)
  if (dyingUnit == null)
    return
  let recycler = dyingUnit.getRecycler()
  if (recycler == null)
    return
  recycler.stock(dyingUnit)

// ============================================================================
function onUnitDeath()
  let dyingUnit = GetDyingUnit()
  let recycler = dyingUnit.getRecycler()
  if (recycler == null)
    return
  if (not recycler.getAutoRecycleDead())
    return
  doAfter(recycler.getDeathTime(), () -> onUnitDeathAfterDeathTime(dyingUnit))

// ============================================================================
function onUnitDeindexed()
  let deindexingUnit = getIndexingUnit()
  let recycler = deindexingUnit.getRecycler()
  if (recycler == null)
    return
  recycler.onUnitDeindexed(deindexingUnit)

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onUnitDeath)
  onUnitDeindex(function onUnitDeindexed)