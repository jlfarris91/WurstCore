package UnitAdmin
import GroupUtils
import Events
import GroupExtensions
import HashMap
import RegisterEvents
import ObjectIds
import IterableMapExtensions
import Action
import ErrorHandling

HashMap<unit, UnitAdmin> g_unitToAdminMap

// ============================================================================
public class UnitAdmin
  private string m_id
  private group m_ownedUnits = getGroup()
  private int m_totalRegisteredUnits = 0

  private IterableMap<string, group> m_ownedUnitsByKey = new IterableMap<string, group>()
  private IterableMap<string, int> m_totalRegisteredUnitsByKey = new IterableMap<string, int>()

  private Event2<UnitAdmin, unit> m_onUnitRegistered
  private Event2<UnitAdmin, unit> m_onUnitUnregistered

  // --------------------------------------------------------------------------
  construct(string id)
    m_id = id

  // --------------------------------------------------------------------------
  ondestroy

    while not m_ownedUnits.isEmpty()
      unregisterOwnedUnit(m_ownedUnits.getFirst())

    for key in m_ownedUnitsByKey
      m_ownedUnitsByKey.get(key).release()
    destroy m_ownedUnitsByKey
    m_ownedUnitsByKey = null

    m_ownedUnits.release()
    m_ownedUnits = null

    destroy m_totalRegisteredUnitsByKey
    m_totalRegisteredUnitsByKey = null

    if (m_onUnitRegistered != null)
      destroy m_onUnitRegistered
      m_onUnitRegistered = null

    if (m_onUnitUnregistered != null)
      destroy m_onUnitUnregistered
      m_onUnitUnregistered = null

  // --------------------------------------------------------------------------
  function getId() returns string
    return m_id

  // ----------------------------------------------------------------------------
  function getAliveCount() returns int
    m_ownedUnits.refresh()
    return m_ownedUnits.size()

  // ----------------------------------------------------------------------------
  function getAliveCount(int unitTypeId) returns int
    return getAliveCount(unitTypeId.toRawCode())

  // ----------------------------------------------------------------------------
  function getAliveCount(string key) returns int
    let ownedUnitsByTypeGroup = getOwnedUnits(key)
    if (ownedUnitsByTypeGroup != null)
      ownedUnitsByTypeGroup.refresh()
      return ownedUnitsByTypeGroup.size()
    return 0

  // ----------------------------------------------------------------------------
  function getTotalRegistered() returns int
    return m_totalRegisteredUnits

  // ----------------------------------------------------------------------------
  function getTotalRegistered(int unitTypeId) returns int
    return getTotalRegistered(unitTypeId.toRawCode())

  // ----------------------------------------------------------------------------
  function getTotalRegistered(string key) returns int
    return m_totalRegisteredUnitsByKey.get(key)

  // --------------------------------------------------------------------------
  function getOwnedUnits() returns group
    m_ownedUnits.refresh()
    return m_ownedUnits

  // ----------------------------------------------------------------------------
  function getOwnedUnits(int unitTypeId) returns group
    return getOwnedUnits(unitTypeId.toRawCode())

  // ----------------------------------------------------------------------------
  function getOwnedUnits(string key) returns group
    let ownedUnitsByTypeGroup = m_ownedUnitsByKey.get(key)
    if (ownedUnitsByTypeGroup != null)
      ownedUnitsByTypeGroup.refresh()
    return ownedUnitsByTypeGroup

  // --------------------------------------------------------------------------
  function onUnitRegistered() returns IEvent2<UnitAdmin, unit>
    if (m_onUnitRegistered == null)
      m_onUnitRegistered = new Event2<UnitAdmin, unit>()
    return m_onUnitRegistered

  // --------------------------------------------------------------------------
  function onUnitUnregistered() returns IEvent2<UnitAdmin, unit>
    if (m_onUnitUnregistered == null)
      m_onUnitUnregistered = new Event2<UnitAdmin, unit>()
    return m_onUnitUnregistered

  // --------------------------------------------------------------------------
  function registerOwnedUnit(unit _unit)
    registerOwnedUnit(_unit, _unit.getTypeId().toRawCode())

  // --------------------------------------------------------------------------
  function registerOwnedUnit(unit _unit, string key)

    let existingAdmin = g_unitToAdminMap.get(_unit)
    if (existingAdmin != null and existingAdmin != this)
      error("Unit {0} belongs to a different admin {1}".format(_unit.getTypeId().toRawCode(), existingAdmin.m_id))
      return

    if (existingAdmin == this)
      return

    g_unitToAdminMap.put(_unit, this)

    if (m_ownedUnits.contains(_unit))
      error("Unit {0} not in admin {1} group".format(_unit.getTypeId().toRawCode(), existingAdmin.m_id))
      return

    let unitTypeId = _unit.getTypeId()
    let unitTypeRawCode = unitTypeId.toRawCode()
    
    m_totalRegisteredUnits++

    m_ownedUnits.addUnit(_unit)

    if (key != unitTypeRawCode)
      m_totalRegisteredUnitsByKey.put(unitTypeRawCode, m_totalRegisteredUnitsByKey.get(unitTypeRawCode) + 1)
      m_ownedUnitsByKey.addUnit(unitTypeRawCode, _unit)

    m_totalRegisteredUnitsByKey.put(key, m_totalRegisteredUnitsByKey.get(key) + 1)
    m_ownedUnitsByKey.addUnit(key, _unit)

    if (m_onUnitRegistered != null)
      m_onUnitRegistered.call(this, _unit)

  // --------------------------------------------------------------------------
  function unregisterOwnedUnit(unit _unit)

    let existingAdmin = g_unitToAdminMap.get(_unit)
    if (existingAdmin == null)
      error("Unit {0} does not belong to an admin".format(_unit.getTypeId().toRawCode()))
      return

    if (existingAdmin != this)
      error("Unit {0} belongs to different admin {1}".format(_unit.getTypeId().toRawCode(), existingAdmin.m_id))
      return

    if (not m_ownedUnits.contains(_unit))
      error("Unit {0} not in admin {1} group".format(_unit.getTypeId().toRawCode(), existingAdmin.m_id))
      return

    g_unitToAdminMap.remove(_unit)
    m_ownedUnits.removeUnit(_unit)

    // Remove the unit from any keyed group it belongs to
    let keys = m_ownedUnitsByKey.getKeys()
    for key in keys
      m_ownedUnitsByKey.removeUnit(key, _unit)
    destroy keys

    if (m_onUnitUnregistered != null)
      m_onUnitUnregistered.call(this, _unit)

  // ----------------------------------------------------------------------------
  function reset()
    m_totalRegisteredUnits = 0
    m_totalRegisteredUnitsByKey.flush()

  // --------------------------------------------------------------------------
  protected function onOwnedUnitKilled(unit dyingUnit)
    unregisterOwnedUnit(dyingUnit)

  // --------------------------------------------------------------------------
  function writeDebugString(Action1<string> output)

    if (m_totalRegisteredUnitsByKey.size() > 0)
      output.call("Registrations: " + getTotalRegistered().toString())
      for string key in m_totalRegisteredUnitsByKey
        output.call("  {0}: {1}".format(key, getTotalRegistered(key).toString()))

    if (m_ownedUnitsByKey.size() > 0)
      output.call("Alive: " + getAliveCount().toString())
      for string key in m_ownedUnitsByKey
        output.call("  {0}: {1}".format(key, getAliveCount(key).toString()))

// ============================================================================
function onUnitDeath()
  let dyingUnit = GetDyingUnit()
  if (not g_unitToAdminMap.has(dyingUnit))
    return
  let director = g_unitToAdminMap.get(dyingUnit)
  director.onOwnedUnitKilled(dyingUnit)

// ============================================================================
init
  g_unitToAdminMap = new HashMap<unit, UnitAdmin>()
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onUnitDeath)