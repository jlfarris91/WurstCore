package PlayerMetadata
import HashMap
import Composition
import public initlater PlayerMetadataExtensions
import ColorUtility
import Meta

HashMap<player, IPlayerMetadata> g_PlayerMetadata

trigger g_onPlayerLostTrigger = CreateTrigger()
player g_onPlayerLostTriggerPlayer

trigger g_onPlayerLeftTrigger = CreateTrigger()
player g_onPlayerLeftTriggerPlayer

// ============================================================================
public function onPlayerLost(code func)
  g_onPlayerLostTrigger.addCondition(Condition(func))
  
// ============================================================================
public function getLosingPlayer() returns player
  return g_onPlayerLostTriggerPlayer

// ============================================================================
function raisePlayerLostEvent(player p)
  g_onPlayerLostTriggerPlayer = p
  g_onPlayerLostTrigger.evaluate()
  g_onPlayerLostTriggerPlayer = null

// ============================================================================
public function onPlayerLeft(code func)
  g_onPlayerLeftTrigger.addCondition(Condition(func))

// ============================================================================
public function getLeavingPlayer() returns player
  return g_onPlayerLeftTriggerPlayer

// ============================================================================
function raisePlayerLeftEvent(player p)
  g_onPlayerLeftTriggerPlayer = p
  g_onPlayerLeftTrigger.evaluate()
  g_onPlayerLeftTriggerPlayer = null

// ============================================================================
public constant int typeId_IPlayerMetadata = Meta.reserveInterface("PlayerMetadata.IPlayerMetadata")
public interface IPlayerMetadata extends IComposite
  function getPlayer() returns player
  function getDisplayName() returns string
  function setDisplayName(string displayName)
  function resetDisplayName()
  function getHasLeftGame() returns bool
  function setHasLeftGame(bool value)
  function getHasLostGame() returns bool
  function setHasLostGame(bool value)

// ============================================================================
public class PlayerMetadata extends Composable implements IPlayerMetadata
  private player m_player
  private string m_displayName
  private bool m_leftGame
  private bool m_lostGame

  // --------------------------------------------------------------------------
  construct(player p)
    this.m_player = p
    this.setDisplayName(p.getName())

  // --------------------------------------------------------------------------
  override function getPlayer() returns player
    return m_player

  // --------------------------------------------------------------------------
  override function getDisplayName() returns string
    return m_displayName

  // --------------------------------------------------------------------------
  override function setDisplayName(string displayName)
    m_displayName = displayName

  // --------------------------------------------------------------------------
  override function resetDisplayName()
    setDisplayName(m_player.getName())

  // --------------------------------------------------------------------------
  override function getHasLeftGame() returns bool
    return m_leftGame

  // --------------------------------------------------------------------------
  override function setHasLeftGame(bool value)
    if (m_leftGame != value)
      m_leftGame = value
      if (m_leftGame)
        raisePlayerLostEvent(m_player)

  // --------------------------------------------------------------------------
  override function getHasLostGame() returns bool
    return m_lostGame

  // --------------------------------------------------------------------------
  override function setHasLostGame(bool value)
    if (m_lostGame != value)
      m_lostGame = value
      if (m_lostGame)
        raisePlayerLostEvent(m_player)

  // --------------------------------------------------------------------------
  override function addComponent(IComponent component) returns IComponent
    return super.addComponent(component)

  // --------------------------------------------------------------------------
  override function addComponent(IComponent component, bool startEnabled) returns IComponent
    return super.addComponent(component, startEnabled)
   
  // --------------------------------------------------------------------------
  override function removeComponent(IComponent component) returns bool
    return super.removeComponent(component)

  // --------------------------------------------------------------------------
  override function getComponent(int componentType) returns IComponent
    return super.getComponent(componentType)

// ============================================================================
public function player.getDisplayName() returns string
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getDisplayName() : this.getName()

// ============================================================================
public function player.setDisplayName(string displayName)
  let metadata = this.getMetadata()
  if (metadata != null)
    metadata.setDisplayName(displayName)

// ============================================================================
public function player.getDisplayNameColored() returns string
  return this.getDisplayName().colorize(this.getColor().toColor())

// ============================================================================
/**
*   Gets the PlayerMetadata instance registered for player p or creates a new PlayerMetadata instance if
*   one has not been registered yet.
*/
@inline
public function player.getMetadata() returns IPlayerMetadata
  return g_PlayerMetadata.get(this)

// ============================================================================
@inline
public function unit.getOwnerMetadata() returns IPlayerMetadata
  return g_PlayerMetadata.get(this.getOwner())

// ============================================================================
public function player.getComponent(int componentTypeId) returns IComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getComponent(componentTypeId) : null

// ============================================================================
public function registerPlayerMetadata(IPlayerMetadata playerMetadata)
  g_PlayerMetadata.put(playerMetadata.getPlayer(), playerMetadata)

// ============================================================================
public function unregisterPlayerMetadata(IPlayerMetadata playerMetadata)
  g_PlayerMetadata.remove(playerMetadata.getPlayer())

// ============================================================================
init
  Meta.register("PlayerMetadata", (registrar) -> registerMetadata(registrar))

  g_PlayerMetadata = new HashMap<player, IPlayerMetadata>()

///////////////////////////////////////////////////////////////////////////////
function registerMetadata(MetaRegistrar registrar)
  registrar.registerInterface(typeId_IPlayerMetadata, "PlayerMetadata.IPlayerMetadata")..registerInterface(typeId_IComposite)
  registrar.registerClass(PlayerMetadata.typeId)..setBase(Composable.typeId)..registerInterface(typeId_IPlayerMetadata)
///////////////////////////////////////////////////////////////////////////////