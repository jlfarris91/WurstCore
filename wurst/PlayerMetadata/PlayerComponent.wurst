package PlayerComponent
import PlayerMetadata
import Composition
import Object
import Action
import Dispatcher

// ============================================================================
public class PlayerComponentCreationContext
  IPlayerMetadata owner

// ============================================================================
public constant int typeId_PlayerComponent = Meta.reserveAbstractClass("PlayerComponent.PlayerComponent")
public abstract class PlayerComponent extends Component implements IDispatcher

  private IPlayerMetadata m_owner

  // --------------------------------------------------------------------------
  construct(IPlayerMetadata owner)
    super(owner)
    m_owner = owner

  // --------------------------------------------------------------------------
  override function getOwner() returns IPlayerMetadata
    return m_owner

  // --------------------------------------------------------------------------
  function getOwnerPlayer() returns player
    return m_owner.getPlayer()

  // --------------------------------------------------------------------------
  override function getDispatcherContext(bool requireEnabled) returns DispatcherContext
    return new PlayerComponentDispatcher(getOwnerPlayer(), this.typeId, requireEnabled)

// ============================================================================
class PlayerComponentDispatcher extends DispatcherContext
  private player m_ownerPlayer
  private int m_compTypeId
  private bool m_requireEnabled

  // --------------------------------------------------------------------------
  construct(player ownerPlayer, int compTypeId, bool requireEnabled)
    m_ownerPlayer = ownerPlayer
    m_compTypeId = compTypeId
    m_requireEnabled = requireEnabled

  // --------------------------------------------------------------------------
  override function dispatch(Action work)
    if (m_ownerPlayer != null and m_ownerPlayer.isIngame())
      let comp = m_ownerPlayer.getComponent(m_compTypeId)
      if (comp != null)
        if (not m_requireEnabled or comp.getEnabled())
          work.call()

// ============================================================================
init
  Meta.register("PlayerComponent", (registrar) -> registerMetadata(registrar))

///////////////////////////////////////////////////////////////////////////////
function registerMetadata(MetaRegistrar registrar)
  registrar.registerClass(PlayerComponentCreationContext.typeId)
  
  registrar.registerAbstractClass(typeId_PlayerComponent, "PlayerComponent.PlayerComponent")..setBase(typeId_Component)
  ..registerDestructor((object object) -> destroy object.cast<PlayerComponent>(typeId_PlayerComponent))
///////////////////////////////////////////////////////////////////////////////