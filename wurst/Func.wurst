package Func
import RefObject

// ============================================================================
public abstract class Func<TReturn>
  use RefObject
  abstract function call() returns TReturn
  function acquireCallRelease() returns TReturn
    acquire()
    let result = call()
    release()
    return result

// ============================================================================
public abstract class Func1<TArg, TReturn>
  use RefObject
  abstract function call(TArg arg) returns TReturn
  function acquireCallRelease(TArg arg) returns TReturn
    acquire()
    let result = call(arg)
    release()
    return result

// ============================================================================
public abstract class Func2<TArg1, TArg2, TReturn>
  use RefObject
  abstract function call(TArg1 arg1, TArg2 arg2) returns TReturn
  function acquireCallRelease(TArg1 arg1, TArg2 arg2) returns TReturn
    acquire()
    let result = call(arg1, arg2)
    release()
    return result

// ============================================================================
public abstract class Func3<TArg1, TArg2, TArg3, TReturn>
  use RefObject
  abstract function call(TArg1 arg1, TArg2 arg2, TArg3 arg3) returns TReturn
  function acquireCallRelease(TArg1 arg1, TArg2 arg2, TArg3 arg3) returns TReturn
    acquire()
    let result = call(arg1, arg2, arg3)
    release()
    return result

// ============================================================================
public abstract class FuncVec2
  use RefObject
  abstract function call() returns vec2
  function acquireCallRelease() returns vec2
    acquire()
    let result = call()
    release()
    return result

// ============================================================================
public abstract class FuncVec3
  use RefObject
  abstract function call() returns vec3
  function acquireCallRelease() returns vec3
    acquire()
    let result = call()
    release()
    return result