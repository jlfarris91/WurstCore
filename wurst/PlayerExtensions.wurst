package PlayerExtensions
import Func
import Action
import LinkedList
import GroupUtils
import GroupExtensions

group g_tempGroup = CreateGroup()

// ============================================================================
public function player.isPlaying() returns bool
  return this.getSlotState() == PLAYER_SLOT_STATE_PLAYING

// ============================================================================
public function player.hasLeft() returns bool
  return this.getSlotState() == PLAYER_SLOT_STATE_LEFT

// ============================================================================
public function player.isPlayerSlotEmpty() returns bool
  return this.getSlotState() == PLAYER_SLOT_STATE_EMPTY

// ============================================================================
public function player.isControlledByUser() returns bool
  return this.getController() == MAP_CONTROL_USER

// ============================================================================
public function player.isControlledByComputer() returns bool
  return this.getController() == MAP_CONTROL_COMPUTER

// ============================================================================
public function player.getSelectedUnits() returns LinkedList<unit>
  let selectedUnits = new LinkedList<unit>()
  g_tempGroup.enumUnitsSelected(this, null)
  for u in g_tempGroup
    selectedUnits.add(u)
  return selectedUnits

// ============================================================================
public function player.forEachSelectedUnit(Action1<unit> callback)
  callback.acquire()
  let g = getGroup()
  g.enumUnitsSelected(this, null)
  for u in g
    callback.call(u)
  callback.release()
  g.release()

// ============================================================================
public function player.getFirstSelectedUnit() returns unit
  g_tempGroup.enumUnitsSelected(this, null)
  return g_tempGroup.hasNext() ? g_tempGroup.getFirst() : null

// ============================================================================
public function player.getFirstSelectedUnitMatching(Func1<unit, bool> predicate) returns unit
  if (predicate != null)
    predicate.acquire()

  unit selectedUnit = null
  let g = getGroup()
  g.enumUnitsSelected(this, null)
  if (g.hasNext())
    let nextUnit = g.next()
    if (predicate == null or predicate.call(nextUnit))
      selectedUnit = nextUnit
  g.release()

  if (predicate != null)
    predicate.release()

  return selectedUnit

// ============================================================================
public function player.foreachSelectedUnit(Action1<unit> callback)
  this.foreachSelectedUnitWhere(callback, null)

// ============================================================================
public function player.foreachSelectedUnitWhere(Action1<unit> callback, Func1<unit, bool> predicate)
  callback.acquire()

  if (predicate != null)
    predicate.acquire()

  let g = getGroup()
  g.enumUnitsSelected(this, null)
  for u in g
    if (predicate == null or predicate.call(u))
      callback.call(u)
  g.release()

  if (predicate != null)
    predicate.release()

  callback.release()

// ============================================================================
public function player.controlsUnit(unit targetUnit) returns bool
  let targetUnitOwner = targetUnit.getOwner()
  return this == targetUnitOwner or
         GetPlayerAlliance(this, targetUnitOwner, ALLIANCE_SHARED_ADVANCED_CONTROL)

// ============================================================================
public enum AllianceState
  UNALLIED
  UNALLIED_VISION
  ALLIED
  ALLIED_VISION
  ALLIED_UNITS
  ALLIED_ADVUNITS
  NEUTRAL
  NEUTRAL_VISION

// ============================================================================
public function player.setAllianceState(player otherPlayer, AllianceState allianceState)
  SetPlayerAllianceStateBJ(this, otherPlayer, allianceState castTo int)

// ============================================================================
public function player.setUnitAvailability(int unitId, bool available)
  SetPlayerUnitAvailableBJ(unitId, available, this)

// ============================================================================
public function player.getUnitAvailability(int unitId) returns bool
  return this.getTechAvailability(unitId)

// ============================================================================
public function player.setTechAvailability(int techId, bool available)
  SetPlayerTechMaxAllowed(this, techId, available ? -1 : 0)

// ============================================================================
public function player.getTechAvailability(int techId) returns bool
  return GetPlayerTechMaxAllowed(this, techId) != 0

// ============================================================================
public function player.setTechResearchLevel(int techId, int level)
  SetPlayerTechResearched(this, techId, level)

// ============================================================================
public function player.getTechResearchLevel(int techId) returns int
  return GetPlayerTechCount(this, techId, true)

// ============================================================================
public function player.incTechResearchLevel(int techId, int levels)
  SetPlayerTechResearched(this, techId, GetPlayerTechCount(this, techId, true) + levels)

// ============================================================================
public function player.setAbilityAvailability(int abilityId, bool available)
  SetPlayerAbilityAvailable(this, abilityId, available)
