package TooltipBuilder
import LinkedList
import ErrorHandling
import StringBuilder
import StringExtensions
import ColorUtility
import Func

constant int MAX_TOOLTIP_ITEM_COUNT = 32
constant colorA ITEM_NAME_COLOR = fromHexString("FF3B97D3")
constant colorA ITEM_VALUE_COLOR = COLOR_GOLD
constant string ITEM_BULLET_STRING = " Â· "
constant string PAD_STR = " "

tuple presetGetter(string value, Func1<int, string> getter)

// ============================================================================
function presetGetter.getValue(int level) returns string
  if (this.getter != null)
    return this.getter.call(level)
  return this.value

// ============================================================================
function presetGetter.setValue(string value) returns presetGetter
  var result = this.destr()
  result.value = value
  return result

// ============================================================================
function presetGetter.setValue(Func1<int, string> getter) returns presetGetter
  getter.acquire()
  var result = this.destr()
  result.getter = getter
  return result

// ============================================================================
function presetGetter.destr() returns presetGetter
  var result = this
  if (result.getter != null)
    result.getter.release()
  result.getter = null
  result.value = null
  return result

// ============================================================================
public class TooltipItem
  private presetGetter m_name
  private presetGetter array[MAX_TOOLTIP_ITEM_COUNT] m_values
  private int m_valueCount
  private bool m_showBullets = true
  private bool m_alwaysPutSubItemsOnNewLine = false
  private bool m_prependSpacerLine = false

  // --------------------------------------------------------------------------
  construct(string name)
    m_name = presetGetter(name, null)

  // --------------------------------------------------------------------------
  construct(string name, string value)
    m_name = presetGetter(name, null)
    addValue(value)

  // --------------------------------------------------------------------------
  construct(string name, Func1<int, string> getter)
    m_name = presetGetter(name, null)
    addValue(getter.acquire())

  // --------------------------------------------------------------------------
  construct(Func1<int, string> name)
    m_name = presetGetter(null, name.acquire())

  // --------------------------------------------------------------------------
  construct(Func1<int, string> name, string value)
    m_name = presetGetter(null, name.acquire())
    addValue(value)

  // --------------------------------------------------------------------------
  construct(Func1<int, string> name, Func1<int, string> getter)
    m_name = presetGetter(null, name.acquire())
    addValue(getter.acquire())

  // --------------------------------------------------------------------------
  private construct(presetGetter name)
    m_name = name

  // --------------------------------------------------------------------------
  ondestroy
    clear()

  // --------------------------------------------------------------------------
  function clear()
    m_name = m_name.destr()
    for i = 0 to m_valueCount-1
      m_values[i] = m_values[i].destr()
    m_valueCount = 0

  // --------------------------------------------------------------------------
  function getName() returns string
    return getName(1)

  // --------------------------------------------------------------------------
  function getName(int level) returns string
    return m_name.getValue(level)

  // --------------------------------------------------------------------------
  function getValue(int index) returns string
    return getValue(index, 1)

  // --------------------------------------------------------------------------
  function getValue(int index, int level) returns string
    if (index < 0 or index > m_valueCount - 1)
      return null
    return m_values[index].getValue(level)
  
  // --------------------------------------------------------------------------
  function getValueCount() returns int
    return m_valueCount

  // --------------------------------------------------------------------------
  function addValue(string value)
    addValue(presetGetter(value, null))

  // --------------------------------------------------------------------------
  function addValue(Func1<int, string> getter)
    addValue(presetGetter(null, getter.acquire()))

  // --------------------------------------------------------------------------  
  function setShowItemBullets(bool value)
    m_showBullets = value

  // --------------------------------------------------------------------------
  function setAlwaysPutSubItemsOnNewLine(bool value)
    m_alwaysPutSubItemsOnNewLine = value

  // --------------------------------------------------------------------------
  function setPrependSpacerLine(bool value)
    m_prependSpacerLine = value

  // --------------------------------------------------------------------------
  function clone() returns TooltipItem
    let clone = new TooltipItem(m_name)
    for i = 0 to m_valueCount - 1
      clone.addValue(m_values[i])
    return clone

  // --------------------------------------------------------------------------
  function write(int level, StringBuilder sb)

    if (m_prependSpacerLine)
      sb.appendLine()

    sb.append(getName(level).colorize(ITEM_NAME_COLOR))

    let itemValueCount = getValueCount()
    if (itemValueCount == 1 and not m_alwaysPutSubItemsOnNewLine)
      sb.append(getValue(0, level).colorize(ITEM_VALUE_COLOR))
    else
      for j = 0 to itemValueCount - 1
        sb.appendLine()
        if (m_showBullets)
          sb.append(ITEM_BULLET_STRING)
        sb.append(getValue(j, level).colorize(ITEM_VALUE_COLOR).padLeft(10, PAD_STR))

  // --------------------------------------------------------------------------
  private function addValue(presetGetter value)
    if (m_valueCount == MAX_TOOLTIP_ITEM_COUNT)
      error("Reached limit of number of values " + I2S(MAX_TOOLTIP_ITEM_COUNT))
    m_values[m_valueCount] = value
    m_valueCount++

// ============================================================================
public class TooltipBuilder
  private presetGetter m_description
  private LinkedList<TooltipItem> m_items

  // --------------------------------------------------------------------------
  construct()
    m_items = new LinkedList<TooltipItem>()

  // --------------------------------------------------------------------------
  ondestroy 
    clear()

    destroy m_items
    m_items = null

  // --------------------------------------------------------------------------
  function clear()
    m_description = m_description.destr()
    for itm in m_items
      destroy itm
    m_items.clear()

  // --------------------------------------------------------------------------
  function addItem(string name) returns TooltipItem
    return addItem(new TooltipItem(name))

  // --------------------------------------------------------------------------
  function addItem(string name, string value) returns TooltipItem
    return addItem(new TooltipItem(name, value))

  // --------------------------------------------------------------------------
  function addItem(TooltipItem itm) returns TooltipItem
    if (m_items.size() == MAX_TOOLTIP_ITEM_COUNT)
      error("Reached limit of tooltip items " + I2S(MAX_TOOLTIP_ITEM_COUNT))
    m_items.add(itm)
    return itm

  // --------------------------------------------------------------------------
  function getDescription() returns string
    return m_description.getValue(1)

  // --------------------------------------------------------------------------
  function getDescription(int level) returns string
    return m_description.getValue(level)

  // --------------------------------------------------------------------------
  function setDescription(string description)
    m_description = m_description.setValue(description)

  // --------------------------------------------------------------------------
  function setDescription(Func1<int, string> getter)
    m_description = m_description.setValue(getter)

  // --------------------------------------------------------------------------  
  function getTooltipExtended() returns string
    return getTooltipExtended(1)

  // --------------------------------------------------------------------------  
  function getTooltipExtended(int level) returns string
    let sb = new StringBuilder()

    let desc = m_description.getValue(level)
    if (desc != null)
      sb.appendLine(desc)
      sb.appendLine()

    var index = 0
    for itm in m_items
      if (index > 0)
        sb.appendLine()
      itm.write(level, sb)
      index++

    return sb.toStringAndDestroy()