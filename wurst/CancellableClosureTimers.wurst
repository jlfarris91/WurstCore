package CancellableClosureTimers
import TimerUtils
import CancellationToken
import ErrorHandling
import RefObject
import Handle
import Events
import LinkedList

LinkedList<CancellableCallbackSingle> g_callbackStack = new LinkedList<CancellableCallbackSingle>()

// ============================================================================
public function timer.doAfter(CancellationToken ct, real timeToWait, CancellableCallbackSingle cb) returns CancellableCallbackSingle
  cb.acquire()
  cb.start(this, ct, timeToWait)
  return cb

// ============================================================================
public function doAfter(CancellationToken ct, real timeToWait, CancellableCallbackSingle cb) returns CancellableCallbackSingle
  return getTimer().doAfter(ct, timeToWait, cb)

// ============================================================================
public function nullTimer(CancellationToken ct, CancellableCallbackSingle cb) returns CancellableCallbackSingle
  return doAfter(ct, 0, cb)

// ============================================================================
public function timer.doPeriodically(CancellationToken ct, real time, CancellableCallbackPeriodic cb) returns CancellableCallbackPeriodic
  cb.acquire()
  cb.start(this, ct, time)
  return cb

// ============================================================================
public function doPeriodically(CancellationToken ct, real time, CancellableCallbackPeriodic cb) returns CancellableCallbackPeriodic
  return getTimer().doPeriodically(ct, time, cb)

// ============================================================================
public abstract class CancellableCallbackSingle
  use RefObject

  private CancellationToken m_cancellationToken = null
  private timer m_timer = null
  private _handle m_onCanceledHandler = INVALID_HANDLE
  private bool m_calling = false

  // --------------------------------------------------------------------------
  ondestroy
    if (m_timer != null)
      m_timer.release()
    if (m_cancellationToken != null)
      if (m_onCanceledHandler != INVALID_HANDLE)
        m_cancellationToken.unregisterCanceledCallback(m_onCanceledHandler)
      m_cancellationToken.release()

  // --------------------------------------------------------------------------
  abstract function call()

  // --------------------------------------------------------------------------
  protected function start(timer whichTimer, CancellationToken ct, real time)

    if (ct.isCanceled())
      release()
      return

    m_cancellationToken = ct.acquire()
    m_onCanceledHandler = m_cancellationToken.registerCanceledCallback() () ->
      if (not m_calling)
        release() 

    m_timer = whichTimer
    ..setData(this castTo int)
    ..start(time, () -> staticCallback())

  // --------------------------------------------------------------------------
  private static function staticCallback()
    let t = GetExpiredTimer()
    let cb = t.getData() castTo thistype
    if (not cb.m_cancellationToken.isCanceled())
      cb.m_calling = true
      cb.call()
      cb.m_calling = false
    cb.release()

// ============================================================================
public abstract class CancellableCallbackPeriodic
  use RefObject

  private CancellationToken m_cancellationToken = null
  private timer m_timer = null
  private _handle m_onCanceledHandler = INVALID_HANDLE
  private bool m_calling = false

  // --------------------------------------------------------------------------
  ondestroy
    if (m_timer != null)
      m_timer.release()
    if (m_cancellationToken != null)
      if (m_onCanceledHandler != INVALID_HANDLE)
        m_cancellationToken.unregisterCanceledCallback(m_onCanceledHandler)
      m_cancellationToken.release()

  // --------------------------------------------------------------------------
  protected abstract function call(thistype cb)

  // --------------------------------------------------------------------------
  protected function start(timer whichTimer, CancellationToken ct, real time)

    if (ct.isCanceled())
      release()
      return

    m_cancellationToken = ct.acquire()
    m_onCanceledHandler = m_cancellationToken.registerCanceledCallback() () ->
      if (not m_calling)
        release()

    m_timer = whichTimer
      ..setData(this castTo int)
      ..startPeriodic(time, function staticCallback)

  // --------------------------------------------------------------------------
  private static function staticCallback()
    let cb = (GetExpiredTimer().getData() castTo thistype)
    if (not cb.m_cancellationToken.isCanceled())
      cb.m_calling = true
      cb.call(cb)
      cb.m_calling = false
    else
      cb.release()

// ============================================================================
@test function nullTimer_canceledImmediately()
  let ct = new CancellationToken()
  ct.acquire()
  ct.cancel()

  nullTimer(ct, () -> error("This shouldn't be called"))

  ct.release()

// ============================================================================
@test function nullTimer_canceledImmediately2()
  let ct = new CancellationToken()
  ct.acquire()

  nullTimer(ct, () -> error("This shouldn't be called"))

  ct.cancelAndRelease()

// ============================================================================
@test function doAfter_canceledImmediately()
  let ct = new CancellationToken()
  ct.acquire()
  doAfter(ct, 1.0, () -> error("This shouldn't be called"))
  ct.cancelAndRelease()

// ============================================================================
@test function doAfter_canceledBeforeCallback()
  let ct = new CancellationToken()
  ct.acquire()

  doAfter(ct, 1.0, () -> error("This shouldn't be called"))
  doAfter(ct, 0.1, () -> ct.cancelAndRelease())