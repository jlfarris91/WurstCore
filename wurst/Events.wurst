package Events
import public Action
import ErrorHandling
import Vector

// ============================================================================
public class Event
  private Vector<EventCallback> m_callbacks
  private int m_stackDepth = 0

  // --------------------------------------------------------------------------
  construct()
    m_callbacks = new Vector<EventCallback>()

  // --------------------------------------------------------------------------
  construct(Vector<EventCallback> callbacks)
    m_callbacks = callbacks

  // --------------------------------------------------------------------------
  ondestroy
    if (m_stackDepth > 0)
      error("Deleting event in the middle of execution")
    for callback in m_callbacks
      if (callback != null)
        destroy callback
    destroy m_callbacks
    m_callbacks = null

  // --------------------------------------------------------------------------
  function register(EventCallback callback) returns EventCallback
    if (callback == null)
      argumentNullError("callback")

    if (callback.m_event != null)
      error("Attempting to double register a callback")
    callback.m_event = this
    callback.m_recentlyAdded = true
    callback.m_index = m_callbacks.getCount()
    m_callbacks.add(callback)
    return callback

  // --------------------------------------------------------------------------
  function unregister(EventCallback callback)
    if (callback == null)
      argumentNullError("callback")

    if (callback.m_event == null or callback.m_index == -1)
      error("Attempting to double unregister a callback")
    if (callback.m_event != this)
      error("Attempting to unregister a callback that was registered with a different event")
    m_callbacks.setItem(callback.m_index, null)
    callback.m_event = null

  // --------------------------------------------------------------------------
  function call()
    m_stackDepth++

    var callbackIndex = 0
    while callbackIndex < m_callbacks.getCount()
      let callback = m_callbacks.getItem(callbackIndex)
      // If callback is null then that means it was removed while this event was being fired
      if (callback != null)
        if (not callback.m_recentlyAdded)
          callback.call()
        callback.m_recentlyAdded = false
      callbackIndex++
  
    m_stackDepth--
    if (m_stackDepth == 0)
      cleanupCallbacks()

  // --------------------------------------------------------------------------
  private function cleanupCallbacks()
    var callbackIndex = 0
    while callbackIndex < m_callbacks.getCount()
      let callback = m_callbacks.getItem(callbackIndex)
      if (callback == null)
        m_callbacks.removeAt(callbackIndex)
      else
        callbackIndex++

// ============================================================================
public class Event1<TArg1>
  private Vector<Event1Callback<TArg1>> m_callbacks
  private int m_stackDepth = 0

  // --------------------------------------------------------------------------
  construct()
    m_callbacks = new Vector<Event1Callback<TArg1>>()

  // --------------------------------------------------------------------------
  construct(Vector<Event1Callback<TArg1>> callbacks)
    m_callbacks = callbacks

  // --------------------------------------------------------------------------
  ondestroy
    if (m_stackDepth > 0)
      error("Deleting event in the middle of execution")
    for callback in m_callbacks
      if (callback != null)
        destroy callback
    destroy m_callbacks
    m_callbacks = null

  // --------------------------------------------------------------------------
  function register(Event1Callback<TArg1> callback) returns Event1Callback<TArg1>
    if (callback == null)
      argumentNullError("callback")
    if (callback.m_event != null)
      error("Attempting to double register a callback")
    callback.m_event = this
    callback.m_recentlyAdded = true
    callback.m_index = m_callbacks.getCount()
    m_callbacks.add(callback)
    return callback

  // --------------------------------------------------------------------------
  function unregister(Event1Callback<TArg1> callback)
    if (callback == null)
      argumentNullError("callback")
    if (callback.m_event == null or callback.m_index == -1)
      error("Attempting to double unregister a callback")
    if (callback.m_event != this)
      error("Attempting to unregister a callback that was registered with a different event")
    m_callbacks.setItem(callback.m_index, null)
    callback.m_event = null

  // --------------------------------------------------------------------------
  function call(TArg1 arg1)
    m_stackDepth++

    var callbackIndex = 0
    while callbackIndex < m_callbacks.getCount()
      let callback = m_callbacks.getItem(callbackIndex)
      // If callback is null then that means it was removed while this event was being fired
      if (callback != null)
        if (not callback.m_recentlyAdded)
          callback.call(arg1)
        callback.m_recentlyAdded = false
      callbackIndex++
  
    m_stackDepth--
    if (m_stackDepth == 0)
      cleanupCallbacks()

  // --------------------------------------------------------------------------
  private function cleanupCallbacks()
    var callbackIndex = 0
    while callbackIndex < m_callbacks.getCount()
      let callback = m_callbacks.getItem(callbackIndex)
      if (callback == null)
        m_callbacks.removeAt(callbackIndex)
      else
        callbackIndex++

// ============================================================================
public class Event2<TArg1, TArg2>
  private Vector<Event2Callback<TArg1, TArg2>> m_callbacks
  private int m_stackDepth = 0

  // --------------------------------------------------------------------------
  construct()
    m_callbacks = new Vector<Event2Callback<TArg1, TArg2>>()

  // --------------------------------------------------------------------------
  construct(Vector<Event2Callback<TArg1, TArg2>> callbacks)
    m_callbacks = callbacks

  // --------------------------------------------------------------------------
  ondestroy
    if (m_stackDepth > 0)
      error("Deleting event in the middle of execution")
    for callback in m_callbacks
      if (callback != null)
        destroy callback
    destroy m_callbacks
    m_callbacks = null

  // --------------------------------------------------------------------------
  function register(Event2Callback<TArg1, TArg2> callback) returns Event2Callback<TArg1, TArg2>
    if (callback == null)
      argumentNullError("callback")
    if (callback.m_event != null)
      error("Attempting to double register a callback")
    callback.m_event = this
    callback.m_recentlyAdded = true
    callback.m_index = m_callbacks.getCount()
    m_callbacks.add(callback)
    return callback

  // --------------------------------------------------------------------------
  function unregister(Event2Callback<TArg1, TArg2> callback)
    if (callback == null)
      argumentNullError("callback")
    if (callback.m_event == null or callback.m_index == -1)
      error("Attempting to double unregister a callback")
    if (callback.m_event != this)
      error("Attempting to unregister a callback that was registered with a different event")
    m_callbacks.setItem(callback.m_index, null)
    callback.m_event = null

  // --------------------------------------------------------------------------
  function call(TArg1 arg1, TArg2 arg2)
    m_stackDepth++

    var callbackIndex = 0
    while callbackIndex < m_callbacks.getCount()
      let callback = m_callbacks.getItem(callbackIndex)
      // If callback is null then that means it was removed while this event was being fired
      if (callback != null)
        if (not callback.m_recentlyAdded)
          callback.call(arg1, arg2)
        callback.m_recentlyAdded = false
      callbackIndex++
  
    m_stackDepth--
    if (m_stackDepth == 0)
      cleanupCallbacks()

  // --------------------------------------------------------------------------
  private function cleanupCallbacks()
    var callbackIndex = 0
    while callbackIndex < m_callbacks.getCount()
      let callback = m_callbacks.getItem(callbackIndex)
      if (callback == null)
        m_callbacks.removeAt(callbackIndex)
      else
        callbackIndex++

// ============================================================================
public abstract class EventCallback
  protected Event m_event
  protected int m_index = -1
  protected bool m_recentlyAdded = true
  abstract function call()
  ondestroy
    m_event.unregister(this)

// ============================================================================
public abstract class Event1Callback<TArg1>
  protected Event1<TArg1> m_event
  protected int m_index = -1
  protected bool m_recentlyAdded = true
  abstract function call(TArg1 arg1)
  ondestroy
    m_event.unregister(this)

// ============================================================================
public abstract class Event2Callback<TArg1, TArg2>
  protected Event2<TArg1, TArg2> m_event
  protected int m_index = -1
  protected bool m_recentlyAdded = true
  abstract function call(TArg1 arg1, TArg2 arg2)
  ondestroy
    m_event.unregister(this)

// ============================================================================
@test function stressTest_register()

  let pool = new Vector<EventCallback>()
  let ma = new Event(pool)

  for i = 1 to 999
    let mah = ma.register(() -> skip)
    ma.unregister(mah)

  pool.getCount().assertEquals(999)

  ma.call()

  pool.getCount().assertEquals(0)

// ============================================================================
@test function stressTest_call()

  let pool = new Vector<EventCallback>()
  let ma = new Event(pool)

  for i = 1 to 512
    ma.register(() -> skip)

  for i = 1 to 100
    ma.call()

// ============================================================================
class Foo
  Event m_action
  EventCallback registration
  Foo m_other
  int m_index
  bool m_shouldNotBeExecuted

  construct(Event action, int index)
    m_action = action
    m_index = index

  function initialize(Foo other)
    
    m_other = other

    if (m_other != null)
      registration = m_action.register() () ->
        m_other.unregister()
        
    else
      registration = m_action.register() () ->
        if (m_shouldNotBeExecuted)
          error("This should not have been executed")

  function unregister()
    if (registration != null)
      destroy registration
      registration = null

  function shouldNotBeExecuted()
    m_shouldNotBeExecuted = true

Foo array g_foos

// ============================================================================
@test function unregister_during_call()

  let pool = new Vector<EventCallback>()
  let ma = new Event(pool)

  for i = 0 to 32
    g_foos[i] = new Foo(ma, i)

  for i = 0 to 32
    Foo other = null
    let k = i + 4
    if (i mod 11 == 0)
      other = g_foos[k]
    g_foos[i].initialize(other)
    if (other != null)
      other.shouldNotBeExecuted()

  for i = 0 to 100
    ma.call()