package Events
import public Action
import ErrorHandling
import Vector
import public Handle

// ============================================================================
public class Event implements IHandleProvider
  private int m_callStackDepth = 0
  private Vector<EventCallback> m_callbacks

  // --------------------------------------------------------------------------
  construct()
    m_callbacks = new Vector<EventCallback>()

  // --------------------------------------------------------------------------
  construct(Vector<EventCallback> callbacks)
    m_callbacks = callbacks

  // --------------------------------------------------------------------------
  ondestroy
    for callback in m_callbacks
      destroy callback
    destroy m_callbacks
    m_callbacks = null

  // --------------------------------------------------------------------------
  function register(EventCallback callback) returns _handle
    if (callback == null)
      argumentNullError("callback")
    
    if (m_callbacks.contains(callback) == false)
      m_callbacks.add(callback)
    
    callback.markedForRemoval = false

    return _handle(callback castTo int)

  // --------------------------------------------------------------------------
  function unregister(_handle callbackHandle)
    if (callbackHandle.id castTo EventCallback == null)
      // Log.info("Event", "unregister", "", "callbackHandle.id castTo EventCallback == null")
      return
    let index = m_callbacks.indexOf(callbackHandle.id castTo EventCallback)
    if (index == -1)
      // Log.info("Event", "unregister", "", "index == -1")
      return
    let callback = m_callbacks.getItem(index)
    callback.markedForRemoval = true
    // Log.info("Event", "unregister", "", "Callback at index {0} marked for removal.".format(index.toString()))

  // --------------------------------------------------------------------------
  function call()

    m_callStackDepth++
    
    for callback in m_callbacks
      if (callback.markedForRemoval == false)
        callback.call()
      else
        // Log.info("Event", "call", "", "Callback marked for removal. Skipping.")

    m_callStackDepth--
    if (m_callStackDepth == 0)
      cleanup()

  // --------------------------------------------------------------------------
  private function cleanup()
    var index = 0
    while index < m_callbacks.getCount()
      let callback = m_callbacks.getItem(index)
      if (callback.markedForRemoval)
        destroy m_callbacks.removeAt(index)
        // Log.info("Event", "cleanup", "", "Callback at index {0} destroyed.".format(index.toString()))
      else
        index++

  // --------------------------------------------------------------------------
  override function isHandleValid(_handle h) returns bool
    return h.id castTo EventCallback != null and
           m_callbacks.contains(h.id castTo EventCallback)

// ============================================================================
public class Event1<TArg1> implements IHandleProvider
  private int m_callStackDepth = 0
  private Vector<Event1Callback<TArg1>> m_callbacks

  // --------------------------------------------------------------------------
  construct()
    m_callbacks = new Vector<Event1Callback<TArg1>>()

  // --------------------------------------------------------------------------
  construct(Vector<Event1Callback<TArg1>> callbacks)
    m_callbacks = callbacks

  // --------------------------------------------------------------------------
  ondestroy
    for callback in m_callbacks
      destroy callback
    destroy m_callbacks
    m_callbacks = null

  // --------------------------------------------------------------------------
  function register(Event1Callback<TArg1> callback) returns _handle
    if (callback == null)
      argumentNullError("callback")
    
    if (m_callbacks.contains(callback) == false)
      m_callbacks.add(callback)
    
    callback.markedForRemoval = false

    return _handle(callback castTo int)

  // --------------------------------------------------------------------------
  function unregister(_handle callbackHandle)
    if (callbackHandle.id castTo EventCallback == null)
      return
    let index = m_callbacks.indexOf(callbackHandle.id castTo Event1Callback<TArg1>)
    if (index == -1)
      return
    let callback = m_callbacks.getItem(index)
    callback.markedForRemoval = true

  // --------------------------------------------------------------------------
  function call(TArg1 arg1)

    m_callStackDepth++
    
    for callback in m_callbacks
      if (callback.markedForRemoval == false)
        callback.call(arg1)

    m_callStackDepth--
    if (m_callStackDepth == 0)
      cleanup()

  // --------------------------------------------------------------------------
  private function cleanup()
    var index = 0
    while index < m_callbacks.getCount()
      let callback = m_callbacks.getItem(index)
      if (callback.markedForRemoval)
        destroy m_callbacks.removeAt(index)
      else
        index++

  // --------------------------------------------------------------------------
  override function isHandleValid(_handle h) returns bool
    return h.id castTo EventCallback != null and
           m_callbacks.contains(h.id castTo Event1Callback<TArg1>)

// ============================================================================
public class Event2<TArg1, TArg2> implements IHandleProvider
  private int m_callStackDepth = 0
  private Vector<Event2Callback<TArg1, TArg2>> m_callbacks

  // --------------------------------------------------------------------------
  construct()
    m_callbacks = new Vector<Event2Callback<TArg1, TArg2>>()

  // --------------------------------------------------------------------------
  construct(Vector<Event2Callback<TArg1, TArg2>> callbacks)
    m_callbacks = callbacks

  // --------------------------------------------------------------------------
  ondestroy
    for callback in m_callbacks
      destroy callback
    destroy m_callbacks
    m_callbacks = null

  // --------------------------------------------------------------------------
  function register(Event2Callback<TArg1, TArg2> callback) returns _handle
    if (callback == null)
      argumentNullError("callback")
    
    if (m_callbacks.contains(callback) == false)
      m_callbacks.add(callback)
    
    callback.markedForRemoval = false

    return _handle(callback castTo int)

  // --------------------------------------------------------------------------
  function unregister(_handle callbackHandle)
    if (callbackHandle.id castTo EventCallback == null)
      return
    let index = m_callbacks.indexOf(callbackHandle.id castTo Event2Callback<TArg1, TArg2>)
    if (index == -1)
      return
    let callback = m_callbacks.getItem(index)
    callback.markedForRemoval = true

  // --------------------------------------------------------------------------
  function call(TArg1 arg1, TArg2 arg2)

    m_callStackDepth++
    
    for callback in m_callbacks
      if (callback.markedForRemoval == false)
        callback.call(arg1, arg2)

    m_callStackDepth--
    if (m_callStackDepth == 0)
      cleanup()

  // --------------------------------------------------------------------------
  private function cleanup()
    var index = 0
    while index < m_callbacks.getCount()
      let callback = m_callbacks.getItem(index)
      if (callback.markedForRemoval)
        destroy m_callbacks.removeAt(index)
      else
        index++

  // --------------------------------------------------------------------------
  override function isHandleValid(_handle h) returns bool
    return h.id castTo EventCallback != null and
           m_callbacks.contains(h.id castTo Event2Callback<TArg1, TArg2>)

// ============================================================================
public abstract class EventCallback
  protected bool markedForRemoval
  abstract function call()

// ============================================================================
public abstract class Event1Callback<TArg1>
  protected bool markedForRemoval
  abstract function call(TArg1 arg1)

// ============================================================================
public abstract class Event2Callback<TArg1, TArg2>
  protected bool markedForRemoval
  abstract function call(TArg1 arg1, TArg2 arg2)

// ============================================================================
@test function stressTest_register()

  let pool = new Vector<EventCallback>()
  let ma = new Event(pool)

  for i = 1 to 999
    let mah = ma.register(() -> skip)
    ma.unregister(mah)

  pool.getCount().assertEquals(999)

  ma.call()

  pool.getCount().assertEquals(0)

// ============================================================================
@test function stressTest_call()

  let pool = new Vector<EventCallback>()
  let ma = new Event(pool)

  for i = 1 to 512
    ma.register(() -> skip)

  for i = 1 to 100
    ma.call()

// ============================================================================
class Foo
  Event m_action
  _handle registration
  Foo m_other
  int m_index
  bool m_shouldNotBeExecuted

  construct(Event action, int index)
    m_action = action
    m_index = index

  function initialize(Foo other)
    
    m_other = other

    if (m_other != null)
      registration = m_action.register() () ->
        m_other.unregister()
        
    else
      registration = m_action.register() () ->
        if (m_shouldNotBeExecuted)
          error("This should not have been executed")

  function unregister()
    m_action.unregister(registration)

  function shouldNotBeExecuted()
    m_shouldNotBeExecuted = true

Foo array g_foos

// ============================================================================
@test function unregister_during_call()

  let pool = new Vector<EventCallback>()
  let ma = new Event(pool)

  for i = 0 to 32
    g_foos[i] = new Foo(ma, i)

  for i = 0 to 32
    Foo other = null
    let k = i + 4
    if (i mod 11 == 0)
      other = g_foos[k]
    g_foos[i].initialize(other)
    if (other != null)
      other.shouldNotBeExecuted()

  for i = 0 to 100
    ma.call()

// ============================================================================
class Test
  int a = 0
  _handle handleToUnregister = HANDLE_INVALID
@test function unregister_unregisteringExecutingCallbackCallsRemainingCallbacks()

  let pool = new Vector<EventCallback>()
  let ma = new Event(pool)

  var test = new Test()

  for i = 0 to 8
    let h = ma.register() () ->
    //{
      test.a++
      // Log.info("test.a == " + test.a.toString())
      if (test.a == 4)
        ma.unregister(test.handleToUnregister)
    //}
    if (i == 4)
      test.handleToUnregister = h

  ma.call() 

  test.a.assertEquals(pool.getCount())