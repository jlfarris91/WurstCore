package StackLayout
import Frame
import Layout

constant vec2 bottomLeftScalar = vec2(1, 1)
constant vec2 bottomRightScalar = vec2(-1, 1)
constant vec2 topLeftScalar = vec2(1, -1)
constant vec2 topRightScalar = vec2(-1, -1)

constant vec2 leftScalar = vec2(1, 0)
constant vec2 rightScalar = vec2(-1, 0)
constant vec2 bottomScalar = vec2(0, 1)
constant vec2 topScalar = vec2(0, -1)

// ============================================================================
public class StackLayout implements IFrameLayout
  private LayoutOrientation m_orientation

  // --------------------------------------------------------------------------
  function setOrientation(LayoutOrientation value)
    m_orientation = value

  // --------------------------------------------------------------------------
  function getOrientation() returns LayoutOrientation
    return m_orientation

  // --------------------------------------------------------------------------
  override function layout(Frame frame)

    let parentHandle = frame.getFrameHandle()
    let parentSize = frame.getSize()
    let children = frame.getChildren()
    let padding = frame.getPadding()

    vec2 uv = ZERO2

    for childFrame in children
    //{

      let margin = childFrame.getMargin()
      let childHandle = childFrame.getFrameHandle()
      let childIsPanel = childFrame.isPanel()

      childHandle.clearAllPoints()

      switch (m_orientation)
        case LEFTTORIGHT
        //{
          switch (childFrame.getVerticalLayoutMode())
            case BOTTOM
              childHandle.setPoint(FRAMEPOINT_BOTTOMLEFT, parentHandle, FRAMEPOINT_BOTTOMLEFT, (uv + padding.bottomLeft() + margin.bottomLeft()) * bottomLeftScalar)
            case TOP
              childHandle.setPoint(FRAMEPOINT_TOPLEFT, parentHandle, FRAMEPOINT_TOPLEFT, (uv + padding.topLeft() + margin.topLeft()) * topLeftScalar)
            case CENTER
              childHandle.setPoint(FRAMEPOINT_LEFT, parentHandle, FRAMEPOINT_LEFT, uv + vec2(padding.left + margin.left, 0) /* * leftScalar */)
            case STRETCH
              childHandle.setPoint(FRAMEPOINT_BOTTOMLEFT, parentHandle, FRAMEPOINT_BOTTOMLEFT, (uv + padding.bottomLeft() + margin.bottomLeft()) * bottomLeftScalar)
              if (childIsPanel)
                childFrame.setHeight(parentSize.y - (padding.height() + margin.height()))
              else
                childHandle.setPoint(FRAMEPOINT_TOPLEFT, parentHandle, FRAMEPOINT_TOPLEFT, (uv + padding.topLeft() + margin.topLeft()) * topLeftScalar)
          uv.x += childHandle.getWidth() + margin.width()
        //}
        case RIGHTTOLEFT
        //{
          switch (childFrame.getVerticalLayoutMode())
            case BOTTOM
              childHandle.setPoint(FRAMEPOINT_BOTTOMRIGHT, parentHandle, FRAMEPOINT_BOTTOMRIGHT, (uv + padding.bottomRight() + margin.bottomRight()) * bottomRightScalar)
            case TOP
              childHandle.setPoint(FRAMEPOINT_TOPRIGHT, parentHandle, FRAMEPOINT_TOPRIGHT, (uv + padding.topRight() + margin.topRight()) * topRightScalar)
            case CENTER
              childHandle.setPoint(FRAMEPOINT_RIGHT, parentHandle, FRAMEPOINT_RIGHT, (uv + vec2(padding.right + margin.right, 0)) * rightScalar)
            case STRETCH
              childHandle.setPoint(FRAMEPOINT_BOTTOMRIGHT, parentHandle, FRAMEPOINT_BOTTOMRIGHT, (uv + padding.bottomRight() + margin.bottomRight()) * bottomRightScalar)
              if (childIsPanel)
                childFrame.setHeight(parentSize.y - (padding.height() + margin.height()))
              else
                childHandle.setPoint(FRAMEPOINT_TOPRIGHT, parentHandle, FRAMEPOINT_TOPRIGHT, (uv + padding.topRight() + margin.topRight()) * topRightScalar)
          uv.x += childHandle.getWidth() + margin.width()
        //}
        case BOTTOMTOTOP
        //{
          switch (childFrame.getHorizontalLayoutMode())
            case LEFT
              childHandle.setPoint(FRAMEPOINT_BOTTOMLEFT, parentHandle, FRAMEPOINT_BOTTOMLEFT, (uv + padding.bottomLeft() + margin.bottomLeft()) * bottomLeftScalar)
            case RIGHT
              childHandle.setPoint(FRAMEPOINT_BOTTOMRIGHT, parentHandle, FRAMEPOINT_BOTTOMRIGHT, (uv + padding.bottomRight() + margin.bottomRight()) * bottomRightScalar)
            case CENTER
              childHandle.setPoint(FRAMEPOINT_BOTTOM, parentHandle, FRAMEPOINT_BOTTOM, (uv + vec2(0, padding.bottom + margin.bottom)) /* * bottomScalar */)
            case STRETCH
              childHandle.setPoint(FRAMEPOINT_BOTTOMLEFT, parentHandle, FRAMEPOINT_BOTTOMLEFT, (uv + padding.bottomLeft() + margin.bottomLeft()) * bottomLeftScalar)
              if (childIsPanel)
                childFrame.setWidth(parentSize.x - (padding.width() + margin.width()))
              else
                childHandle.setPoint(FRAMEPOINT_BOTTOMRIGHT, parentHandle, FRAMEPOINT_BOTTOMRIGHT, (uv + padding.bottomRight() + margin.bottomRight()) * bottomRightScalar)
          uv.y += childHandle.getHeight() + margin.height()
        //}
        case TOPTOBOTTOM
        //{
          switch (childFrame.getHorizontalLayoutMode())
            case LEFT
              childHandle.setPoint(FRAMEPOINT_TOPLEFT, parentHandle, FRAMEPOINT_TOPLEFT, (uv + padding.topLeft() + margin.topLeft()) * topLeftScalar)
            case RIGHT
              childHandle.setPoint(FRAMEPOINT_TOPRIGHT, parentHandle, FRAMEPOINT_TOPRIGHT, (uv + padding.topRight() + margin.topRight()) * topRightScalar)
            case CENTER
              childHandle.setPoint(FRAMEPOINT_TOP, parentHandle, FRAMEPOINT_TOP, (uv + vec2(0, padding.top + margin.top)) * topScalar)
            case STRETCH
              childHandle.setPoint(FRAMEPOINT_TOPLEFT, parentHandle, FRAMEPOINT_TOPLEFT, (uv + padding.topLeft() + margin.topLeft()) * topLeftScalar)
              if (childIsPanel)
                childFrame.setWidth(parentSize.x - (padding.width() + margin.width()))
              else
                childHandle.setPoint(FRAMEPOINT_TOPRIGHT, parentHandle, FRAMEPOINT_TOPRIGHT, (uv + padding.topRight() + margin.topRight()) * topRightScalar)
          uv.y += childHandle.getHeight() + margin.height()
        //}
      //}