package StackLayout
import Layout

// ============================================================================
public class StackLayout
  private rectr m_area = ZERORECTR
  private vec2 m_spacing = ZERO2
  private vec2 m_layoutPos = ZERO2
  private vec2 m_layoutPosStart = ZERO2
  private vec2 m_layoutDir = ZERO2
  private LayoutOrientation m_orientation
  private vec2 m_size = ZERO2

  // --------------------------------------------------------------------------
  function setOrientation(LayoutOrientation value)
    m_orientation = value

  // --------------------------------------------------------------------------
  function getOrientation() returns LayoutOrientation
    return m_orientation

  // --------------------------------------------------------------------------
  function setSpacing(vec2 value)
    m_spacing = value

  // --------------------------------------------------------------------------
  function getSpacing() returns vec2
    return m_spacing

  // --------------------------------------------------------------------------
  function getWidth() returns real
    return m_size.x

  // --------------------------------------------------------------------------
  function getHeight() returns real
    return m_size.y

  // --------------------------------------------------------------------------
  function reset(rectr area)
    m_area = area
    m_size = ZERO2
    
    // Remember that x/y frame of reference is bottom left
    switch (m_orientation)
      case LEFTTORIGHT
        m_layoutPos.x = m_area.left()
        m_layoutDir = vec2(1, 0)
      case RIGHTTOLEFT
        m_layoutPos.x = m_area.right()
        m_layoutDir = vec2(-1, 0)
      case TOPTOBOTTOM
        m_layoutPos.y = m_area.top()
        m_layoutDir = vec2(0, -1)
      case BOTTOMTOTOP
        m_layoutPos.y = m_area.bottom()
        m_layoutDir = vec2(0, 1)

    m_layoutPosStart = m_layoutPos

  // --------------------------------------------------------------------------
  function layoutNextFrame(framehandle frame)
    layoutNextFrame(frame, null)

  // --------------------------------------------------------------------------
  function layoutNextFrame(framehandle frame, framehandle parent)

    // Add spacing if not the first frame
    switch (m_orientation)
      case LEFTTORIGHT | RIGHTTOLEFT
        m_layoutPos.x += m_layoutPos.x == m_layoutPosStart.x ? 0 : m_layoutDir.x * m_spacing.x
      case TOPTOBOTTOM | BOTTOMTOTOP
        m_layoutPos.y += m_layoutPos.y == m_layoutPosStart.y ? 0 : m_layoutDir.y * m_spacing.y

    var frameSize = vec2(frame.getWidth(), frame.getHeight())
    var localPos = m_layoutPos

    // Remember that x/y frame of reference is bottom left
    switch (m_orientation)
      case LEFTTORIGHT | RIGHTTOLEFT
        localPos.y = m_area.bottom()
        frameSize.y = m_area.height
      case BOTTOMTOTOP | TOPTOBOTTOM
        localPos.x = m_area.left()
        frameSize.x = m_area.width

    // Actually update the frame
    frame.clearAllPoints()
    if (parent != null)
      frame.setPoint(FRAMEPOINT_BOTTOMLEFT, parent, FRAMEPOINT_BOTTOMLEFT, localPos)
    else
      frame.setAbsPoint(FRAMEPOINT_BOTTOMLEFT, localPos)

    frame.setWidth(frameSize.x)
    frame.setHeight(frameSize.y)

    // Prepare for next frame
    switch (m_orientation)
      case LEFTTORIGHT | RIGHTTOLEFT
        m_layoutPos.x += m_layoutDir.x * frameSize.x
        m_size.x = m_layoutPos.x
        m_size.y = max(m_size.y, frameSize.y)
      case BOTTOMTOTOP | TOPTOBOTTOM
        m_layoutPos.y += m_layoutDir.y * frameSize.y
        m_size.x = max(m_size.x, frameSize.x)
        m_size.y = m_layoutPos.y