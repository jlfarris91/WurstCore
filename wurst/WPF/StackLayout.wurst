package StackLayout
import Layout

// ============================================================================
public class StackLayout
  private rectr m_area = ZERORECTR
  private vec2 m_spacing = ZERO2
  private vec2 m_layoutPos = ZERO2
  private vec2 m_layoutPosStart = ZERO2
  private vec2 m_layoutDir = ZERO2
  private LayoutOrientation m_orientation
  private vec2 m_size = ZERO2
  private int m_elementCount = 0

  // --------------------------------------------------------------------------
  function setOrientation(LayoutOrientation value)
    m_orientation = value

  // --------------------------------------------------------------------------
  function getOrientation() returns LayoutOrientation
    return m_orientation

  // --------------------------------------------------------------------------
  function setSpacing(vec2 value)
    m_spacing = value

  // --------------------------------------------------------------------------
  function getSpacing() returns vec2
    return m_spacing

  // --------------------------------------------------------------------------
  function getWidth() returns real
    return m_size.x

  // --------------------------------------------------------------------------
  function getHeight() returns real
    return m_size.y

  // --------------------------------------------------------------------------
  function reset(rectr area)
    m_area = area
    m_size = ZERO2
    
    // Remember that x/y frame of reference is bottom left
    switch (m_orientation)
      case LEFTTORIGHT
        m_layoutPos.x = m_area.left()
        m_layoutDir = vec2(1, 0)
      case RIGHTTOLEFT
        m_layoutPos.x = m_area.right()
        m_layoutDir = vec2(-1, 0)
      case TOPTOBOTTOM
        m_layoutPos.y = m_area.top()
        m_layoutDir = vec2(0, -1)
      case BOTTOMTOTOP
        m_layoutPos.y = m_area.bottom()
        m_layoutDir = vec2(0, 1)

    m_layoutPosStart = m_layoutPos
    m_elementCount = 0

  // --------------------------------------------------------------------------
  function arrange(vec2 desiredFrameSize) returns rectr
    
    // Always in local space
    var frameSize = desiredFrameSize

    // Add spacing if not the first frame
    if (m_elementCount == 0)
    //{
      switch (m_orientation)
        case LEFTTORIGHT | RIGHTTOLEFT
          m_layoutPos.x += m_layoutDir.x * m_spacing.x
        case TOPTOBOTTOM | BOTTOMTOTOP
          m_layoutPos.y += m_layoutDir.y * m_spacing.y
      
      // TODO: We have to do this because Frames are assumed to be BottomLeft-based
      if (m_orientation == RIGHTTOLEFT)
        m_layoutPos.x -= frameSize.x
      if (m_orientation == TOPTOBOTTOM)
        m_layoutPos.y -= frameSize.y
    //}

    // Absolute if no parent is provided, otherwise local to the parent
    var framePos = m_layoutPos

    // Remember that x/y frame of reference is bottom left
    switch (m_orientation)
      case LEFTTORIGHT | RIGHTTOLEFT
        framePos.y = m_area.bottom()
        frameSize.y = m_area.height
      case BOTTOMTOTOP | TOPTOBOTTOM
        framePos.x = m_area.left()
        frameSize.x = m_area.width

    // Prepare for next frame
    switch (m_orientation)
      case LEFTTORIGHT | RIGHTTOLEFT
        m_layoutPos.x += m_layoutDir.x * frameSize.x
        m_size.x = m_layoutPos.x
        m_size.y = max(m_size.y, frameSize.y)
      case BOTTOMTOTOP | TOPTOBOTTOM
        m_layoutPos.y += m_layoutDir.y * frameSize.y
        m_size.x = max(m_size.x, frameSize.x)
        m_size.y = m_layoutPos.y

    m_elementCount++

    return rectr(framePos, frameSize)

    // Actually update the frame
    // frame.clearAllPoints()
    // if (parent != null)
    //   frame.setPoint(FRAMEPOINT_BOTTOMLEFT, parent, FRAMEPOINT_BOTTOMLEFT, m_area.toLocalPos(frameAbsPos))
    // else
    //   frame.setAbsPoint(FRAMEPOINT_BOTTOMLEFT, frameAbsPos)

    // frame.setWidth(frameSize.x)
    // frame.setHeight(frameSize.y)