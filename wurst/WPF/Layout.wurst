package Layout

public tuple rectr(real x, real y, real width, real height)
public tuple thickness(real left, real bottom, real right, real top)

public constant rectr ZERORECTR = rectr(0,0,0,0)
public constant thickness ZEROTHICK = thickness(0,0,0,0)

// ============================================================================
public function rectr(vec2 pos, vec2 size) returns rectr
  return rectr(pos.x, pos.y, size.x, size.y)

// ============================================================================
public function rectrFromExtents(real minX, real minY, real maxX, real maxY) returns rectr
  return rectr(minX, minY, maxX - minX, maxY - minY)

// ============================================================================
public function rectrFromExtents(vec2 min, vec2 max) returns rectr
  return rectr(min.x, min.y, max.x - min.x, max.y - min.y)

// ============================================================================
public function thickness(real all) returns thickness
  return thickness(all, all, all, all)

// ============================================================================
public function thickness(real x, real y) returns thickness
  return thickness(x, y, x, y)

// ============================================================================
public function thickness.width() returns real
  return this.left + this.right

// ============================================================================
public function thickness.height() returns real
  return this.bottom + this.top

// ============================================================================
public function thickness.size() returns vec2
  return vec2(this.width(), this.height())

// ============================================================================
public function thickness.bottomLeft() returns vec2
  return vec2(this.left, this.bottom)

// ============================================================================
public function thickness.bottomRight() returns vec2
  return vec2(this.right, this.bottom)

// ============================================================================
public function thickness.topLeft() returns vec2
  return vec2(this.left, this.top)

// ============================================================================
public function thickness.topRight() returns vec2
  return vec2(this.right, this.top)

// ============================================================================
public function thickness.op_mult(real factor) returns thickness
  return thickness(this.left * factor, this.bottom * factor, this.right * factor, this.top * factor)

// ============================================================================
public function thickness.op_plus(thickness other) returns thickness
  return thickness(this.left + other.left, this.bottom + other.bottom, this.right + other.right, this.top + other.top)

// ============================================================================
public function thickness.op_minus(thickness other) returns thickness
  return thickness(this.left - other.left, this.bottom - other.bottom, this.right - other.right, this.top - other.top)

// ============================================================================
public function rectr.toString() returns string
  return "[{0}, {1}, {2}, {3}]".format(this.x.toString(), this.y.toString(), this.width.toString(), this.height.toString())

// ============================================================================
public function thickness.toString() returns string
  return "[{0}, {1}, {2}, {3}]".format(this.left.toString(), this.bottom.toString(), this.right.toString(), this.top.toString())

// ============================================================================
public function rectr.size() returns vec2
  return vec2(this.width, this.height)

// ============================================================================
public function rectr.left() returns real
  return this.x
  
// ============================================================================
public function rectr.right() returns real
  return this.x + this.width
  
// ============================================================================
public function rectr.bottom() returns real
  return this.y
  
// ============================================================================
public function rectr.top() returns real
  return this.y + this.height

// ============================================================================
public function rectr.topLeft() returns vec2
  return vec2(this.left(), this.top())

// ============================================================================
public function rectr.topRight() returns vec2
  return vec2(this.right(), this.top())

// ============================================================================
public function rectr.bottomLeft() returns vec2
  return vec2(this.left(), this.bottom())

// ============================================================================
public function rectr.bottomRight() returns vec2
  return vec2(this.right(), this.bottom())
  
// ============================================================================
public function rectr.setLeft(real value) returns rectr
  return rectr(value, this.y, this.width + (this.x - value), this.height)
  
// ============================================================================
public function rectr.setRight(real value) returns rectr
  return rectr(this.x, this.y, value - this.x, this.height)
  
// ============================================================================
public function rectr.setBottom(real value) returns rectr
  return rectr(this.x, value, this.width, this.height + (this.y - value))
  
// ============================================================================
public function rectr.setTop(real value) returns rectr
  return rectr(this.x, this.y, this.width, value - this.y)

// ============================================================================
public function rectr.setTopLeft(vec2 value) returns rectr
  return this.setLeft(value.x).setTop(value.y)

// ============================================================================
public function rectr.setTopRight(vec2 value) returns rectr
  return this.setRight(value.x).setTop(value.y)

// ============================================================================
public function rectr.setBottomLeft(vec2 value) returns rectr
  return this.setLeft(value.x).setBottom(value.y)

// ============================================================================
public function rectr.setBottomRight(vec2 value) returns rectr
  return this.setRight(value.x).setBottom(value.y)

// ============================================================================
public function rectr.setCenter(vec2 pos) returns rectr
  return rectr(pos.x - this.width / 2, pos.y - this.height / 2, this.width, this.height)

// ============================================================================
public function rectr.center() returns vec2
  return vec2(this.x + this.width / 2.0, this.y + this.height / 2.0)

// ============================================================================
public function rectr.shrink(real value) returns rectr
  return this.grow(-value)

// ============================================================================
public function rectr.shrink(vec2 value) returns rectr
  return this.grow(value * -1.0)

// ============================================================================
public function rectr.shrink(thickness value) returns rectr
  return this.grow(value * -1.0)

// ============================================================================
public function rectr.grow(real value) returns rectr
  return this.shrink(vec2(value,value))

// ============================================================================
public function rectr.grow(vec2 value) returns rectr
  return this.shrink(thickness(value.x,value.y,value.x,value.y))

// ============================================================================
public function rectr.grow(thickness value) returns rectr
  return rectr(this.x - value.left, this.y - value.bottom, this.width + value.width(), this.height + value.height())

// ============================================================================
public function rectr.translate(vec2 pos) returns rectr
  return this.translate(pos.x, pos.y)

// ============================================================================
public function rectr.translate(real x, real y) returns rectr
  return rectr(this.x + x, this.y + y, this.width, this.height)

// ============================================================================
/**
  Converts an absolute X-coordinate to one that is locally relative to the area.
  The origin of the rectr is assumed to be the bottom left.
*/
public function rectr.toLocalX(real absX) returns real
  return absX - this.left()

// ============================================================================
/**
  Converts an absolute Y-coordinate to one that is locally relative to the area.
  The origin of the rectr is assumed to be the bottom left.
*/
public function rectr.toLocalY(real absY) returns real
  return absY - this.bottom()

// ============================================================================
/**
  Converts an absolute XY-coordinate to one that is locally relative to the area.
  The origin of the rectr is assumed to be the bottom left.
*/
public function rectr.toLocalPos(vec2 absPos) returns vec2
  return absPos - this.bottomLeft()

// ============================================================================
public enum Orientation
  HORIZONTAL
  VERTICAL

// ============================================================================
public enum LayoutOrientation
  LEFTTORIGHT
  TOPTOBOTTOM
  RIGHTTOLEFT
  BOTTOMTOTOP

// ============================================================================
public function LayoutOrientation.getLayoutDir() returns vec2
  switch (this)
    case LEFTTORIGHT
      return vec2(1, 0)
    case RIGHTTOLEFT
      return vec2(-1, 0)
    case BOTTOMTOTOP
      return vec2(0, 1)
    case TOPTOBOTTOM
      return vec2(0, -1)

// ============================================================================
public enum HorizontalLayoutOrientation
  LEFTTORIGHT
  RIGHTTOLEFT

// ============================================================================
public enum VerticalLayoutOrientation
  BOTTOMTOTOP
  TOPTOBOTTOM

// ============================================================================
public class LayoutScalars
  static constant vec2 left = vec2(1, 0)
  static constant vec2 right = vec2(-1, 0)
  static constant vec2 bottom = vec2(0, 1)
  static constant vec2 top = vec2(0, -1)
  static constant vec2 bottomLeft = vec2(1, 1)
  static constant vec2 bottomRight = vec2(-1, 1)
  static constant vec2 topLeft = vec2(1, -1)
  static constant vec2 topRight = vec2(-1, -1)

@test function rectr_setLeft()
  let area = rectrFromExtents(-10, -10, 10, 10)
  let edited = area.setLeft(5)
  edited.left().assertEquals(5)
  edited.right().assertEquals(10)

@test function rectr_setRight()
  let area = rectrFromExtents(-10, -10, 10, 10)
  let edited = area.setRight(5)
  edited.left().assertEquals(-10)
  edited.right().assertEquals(5)

@test function rectr_setBottom()
  let area = rectrFromExtents(-10, -10, 10, 10)
  let edited = area.setBottom(5)
  edited.bottom().assertEquals(5)
  edited.top().assertEquals(10)

@test function rectr_setTop()
  let area = rectrFromExtents(-10, -10, 10, 10)
  let edited = area.setTop(5)
  edited.bottom().assertEquals(-10)
  edited.top().assertEquals(5)
