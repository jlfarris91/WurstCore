package Frame
import HashMap
import LinkedList
import Layout
import Action
import public FramehandleExtensions
import Object

@configurable public constant bool FRAME_SECURITY_CHECKS_ENABLED = false

public constant Action1<Frame> g_invalidateFrameLayoutOnPropertyChanged = context -> context.invalidateLayout()
Action1<Frame> g_playerChanged = context -> context.onPlayerChanged()
LinkedList<ILightweightProperty> g_allLightweightProperties

// ============================================================================
public class Frame
  static constant LightweightProperty<Object>         dataContextProperty   = new LightweightProperty<Object>(null, g_invalidateFrameLayoutOnPropertyChanged)
  static constant LightweightProperty<IFrameFactory>  frameFactoryProperty  = new LightweightProperty<IFrameFactory>(null, null)
  static constant LightweightProperty<Thickness>      marginProperty        = new LightweightProperty<Thickness>(null, g_invalidateFrameLayoutOnPropertyChanged)
  static constant LightweightProperty<Thickness>      paddingProperty       = new LightweightProperty<Thickness>(null, g_invalidateFrameLayoutOnPropertyChanged)
  static constant LightweightProperty<player>         playerProperty        = new LightweightProperty<player>(null, null)

  private framehandle m_frameHandle
  private Frame m_parent
  private LinkedList<Frame> m_children
  private HorizontalLayoutMode m_horizontalLayoutMode
  private VerticalLayoutMode m_verticalLayoutMode
  private bool m_fitToContents
  private int m_ignoreLayout
  private vec2 m_desiredSize = ZERO2
  private vec2 m_measuredSize = ZERO2
  private vec2 m_lastMeasureAvailableSize = ZERO2
  private vec2 m_lastLayoutAvailableSize = ZERO2

  // --------------------------------------------------------------------------
  function log(string message)
    Log.info("[{0}] {1}".format(getFullName(), message))

  // --------------------------------------------------------------------------
  construct(framehandle frameHandle)
    m_frameHandle = frameHandle
    m_children = new LinkedList<Frame>()
    m_parent = null
    m_horizontalLayoutMode = HorizontalLayoutMode.STRETCH
    m_verticalLayoutMode = VerticalLayoutMode.STRETCH
    m_fitToContents = false
    m_desiredSize = frameHandle.getSize()

  // --------------------------------------------------------------------------
  ondestroy
  //{
    if (m_frameHandle != null)
      m_frameHandle.remove()
      m_frameHandle = null

    if (m_parent != null)
      m_parent.m_children.remove(this)
      m_parent = null

    while m_children.isEmpty() == false
      destroy m_children.pop()
    destroy m_children
    m_children = null
  
    m_frameHandle.remove()
    m_frameHandle = null

    for prop in g_allLightweightProperties
      prop.clearValue(this)
  //}

  // --------------------------------------------------------------------------
  function getName() returns string
    return m_frameHandle.getName()

  // --------------------------------------------------------------------------
  function getFullName() returns string
    return m_parent != null ? "{0}.{1}".format(m_parent.getFullName(), getName()) : getName()

  // --------------------------------------------------------------------------
  function getFrameHandle() returns framehandle
    return m_frameHandle

  // --------------------------------------------------------------------------
  function getParent() returns Frame
    return m_parent

  // --------------------------------------------------------------------------
  private function setParent(Frame value)
    if (m_parent == value)
      return

    if (m_parent != null)
      m_parent.m_children.remove(this)

    m_parent = value

    if (m_parent != null)
      m_parent.m_children.add(this)
      m_frameHandle.setParent(value.m_frameHandle)

    invalidateLayout()
  
  // --------------------------------------------------------------------------
  function getChildren() returns LinkedList<Frame>
    return m_children

  // --------------------------------------------------------------------------
  function addChild(Frame childFrame)
    if (childFrame.m_parent != this)
      childFrame.setParent(this)
      invalidateLayout()

  // --------------------------------------------------------------------------
  function removeChild(Frame childFrame)
    if (childFrame.m_parent == this)
      childFrame.setParent(null)
      invalidateLayout()

  // --------------------------------------------------------------------------
  function isPanel() returns bool
    return false

  // --------------------------------------------------------------------------
  function getWidth() returns real
    return m_frameHandle.getWidth()
  
  // --------------------------------------------------------------------------
  function setWidth(real value)
    if (m_frameHandle.getWidth() != value)
      m_frameHandle.setWidth(value)
      setDesiredWidth(value)
      invalidateLayout()
  
  // --------------------------------------------------------------------------
  function getHeight() returns real
    return m_frameHandle.getHeight()
  
  // --------------------------------------------------------------------------
  function setHeight(real value)
    if (m_frameHandle.getHeight() != value)
      m_frameHandle.setHeight(value)
      setDesiredHeight(value)
      invalidateLayout()
  
  // --------------------------------------------------------------------------
  function getSize() returns vec2
    return m_frameHandle.getSize()
  
  // --------------------------------------------------------------------------
  function setSize(vec2 value)
    if (m_frameHandle.getWidth() != value.x or m_frameHandle.getHeight() != value.y)
      m_frameHandle.setWidth(value.x)
      m_frameHandle.setHeight(value.y)
      setDesiredSize(value)
      invalidateLayout()

  // --------------------------------------------------------------------------
  function setAbsArea(rectr area)
    setAbsArea(FRAMEPOINT_BOTTOMLEFT, area)

  // --------------------------------------------------------------------------
  function setAbsArea(framepointtype framepoint, rectr area)
    setAbsArea(framepoint, area.getFramePointOffset(framepoint), area.size())

  // --------------------------------------------------------------------------
  function setAbsArea(framepointtype framepoint, vec2 pos, vec2 size)
    m_frameHandle.setAbsPoint(framepoint, pos)
    measure(size)
    layout(size)

  // --------------------------------------------------------------------------
  function setText(string value)
    m_frameHandle.setText(value)

  // --------------------------------------------------------------------------
  function getText() returns string
    return m_frameHandle.getText()

  // --------------------------------------------------------------------------
  function getEnabled() returns bool
    return m_frameHandle.isEnabled()

  // --------------------------------------------------------------------------
  function getDesiredSize() returns vec2
    return m_desiredSize

  // --------------------------------------------------------------------------
  function setDesiredSize(vec2 value)
    if (m_desiredSize != value)
      m_desiredSize = value
      invalidateLayout()

  // --------------------------------------------------------------------------
  function getDesiredWidth() returns real
    return m_desiredSize.x

  // --------------------------------------------------------------------------
  function setDesiredWidth(real value)
    setDesiredSize(vec2(value, m_desiredSize.y))

  // --------------------------------------------------------------------------
  function getDesiredHeight() returns real
    return m_desiredSize.y

  // --------------------------------------------------------------------------
  function setDesiredHeight(real value)
    setDesiredSize(vec2(m_desiredSize.x, value))

  // --------------------------------------------------------------------------
  function getMeasuredSize() returns vec2
    return m_measuredSize

  // --------------------------------------------------------------------------
  function getMeasuredWidth() returns real
    return m_measuredSize.x

  // --------------------------------------------------------------------------
  function getMeasuredHeight() returns real
    return m_measuredSize.y

  // --------------------------------------------------------------------------
  function getDataContext() returns object
    let valueObject = dataContextProperty.getValue(this)
    return valueObject != null ? valueObject.getObject() : NULL

  // --------------------------------------------------------------------------
  function setDataContext(object value)
    var valueObject = dataContextProperty.getValue(this)
    if (valueObject == null)
      valueObject = new Object(value)
      dataContextProperty.setValue(this, valueObject)
    else if (valueObject.getObject() != value)
      valueObject.setObject(value)
      dataContextProperty.raisePropertyChanged(this)
    dataContextProperty.setValue(this, valueObject)

  // --------------------------------------------------------------------------
  function getFrameFactory() returns IFrameFactory
    return frameFactoryProperty.getValue(this)

  // --------------------------------------------------------------------------
  function setFrameFactory(IFrameFactory value)
    frameFactoryProperty.setValue(this, value)

  // --------------------------------------------------------------------------
  function getHorizontalLayoutMode() returns HorizontalLayoutMode
    return m_horizontalLayoutMode

  // --------------------------------------------------------------------------
  function setHorizontalLayoutMode(HorizontalLayoutMode value)
    if (m_horizontalLayoutMode != value)
      m_horizontalLayoutMode = value
      invalidateLayout()

  // --------------------------------------------------------------------------
  function getVerticalLayoutMode() returns VerticalLayoutMode    
    return m_verticalLayoutMode

  // --------------------------------------------------------------------------
  function setVerticalLayoutMode(VerticalLayoutMode value)
    if (m_verticalLayoutMode != value)
      m_verticalLayoutMode = value
      invalidateLayout()

  // --------------------------------------------------------------------------
  function getMargin() returns thickness
    let valueObject = marginProperty.getValue(this)
    return valueObject != null ? valueObject.value : ZEROTHICK

  // --------------------------------------------------------------------------
  function setMargin(thickness value)
    var valueObject = marginProperty.getValue(this)
    if (valueObject == null)
      valueObject = new Thickness(value)
      marginProperty.setValue(this, valueObject)
    else if (valueObject.value != value)
      valueObject.value = value
      marginProperty.raisePropertyChanged(this)

  // --------------------------------------------------------------------------
  function getPadding() returns thickness
    let valueObject = paddingProperty.getValue(this)
    return valueObject != null ? valueObject.value : ZEROTHICK

  // --------------------------------------------------------------------------
  function setPadding(thickness value)
    var valueObject = paddingProperty.getValue(this)
    if (valueObject == null)
      valueObject = new Thickness(value)
      paddingProperty.setValue(this, valueObject)
    else if (valueObject.value != value)
      valueObject.value = value
      paddingProperty.raisePropertyChanged(this)

  // --------------------------------------------------------------------------
  function getPlayer() returns player
    return playerProperty.getValue(this)

  // --------------------------------------------------------------------------
  function setPlayer(player value)
    playerProperty.setValue(this, value)

  // --------------------------------------------------------------------------
  protected function onPlayerChanged()
    skip

  // --------------------------------------------------------------------------
  function isVisible() returns bool
    return m_frameHandle.isVisible()

  // --------------------------------------------------------------------------
  function show()
    let wasVisible = m_frameHandle.isVisible()
    m_frameHandle.show()
    if (wasVisible == false)
      invalidateLayout()
  
  // --------------------------------------------------------------------------
  function show(player _player)
    let wasVisible = m_frameHandle.isVisible()
    m_frameHandle.show(_player)
    if (wasVisible == false)
      invalidateLayout()

  // --------------------------------------------------------------------------
  function showOnly(player _player)
    let wasVisible = m_frameHandle.isVisible()
    m_frameHandle.hide()
    m_frameHandle.show(_player)
    if (wasVisible == false)
      invalidateLayout()

  // --------------------------------------------------------------------------
  function hide()
    m_frameHandle.hide()

  // --------------------------------------------------------------------------
  function hide(player _player)
    m_frameHandle.hide(_player)

  // --------------------------------------------------------------------------
  function hideOnly(player _player)
    show()
    m_frameHandle.hide(_player)

  // --------------------------------------------------------------------------
  function clearFocus()
    m_frameHandle.clearFocus()

  // --------------------------------------------------------------------------
  function beginBatchLayout()
    m_ignoreLayout++

  // --------------------------------------------------------------------------
  function endBatchLayout()
    if (m_ignoreLayout == 0)
      Log.error("Frame", "endBatchLayout", getFullName(), "Batch layout call mismatch")
    m_ignoreLayout--
    if (m_ignoreLayout == 0)
      invalidateLayout()

  // --------------------------------------------------------------------------
  function invalidateLayout()
    
    // if (m_ignoreLayout > 0)
    //   return

    // if (m_parent != null)
    //   m_parent.invalidateLayout()

    // layout()

  // --------------------------------------------------------------------------
  function measure()
    if (m_lastMeasureAvailableSize == ZERO2)
      return
    measure(m_lastMeasureAvailableSize)

  // --------------------------------------------------------------------------
  function measure(vec2 availableSize)
    let marginSize = getMargin().size()
    m_measuredSize = measureOverride(availableSize - marginSize)
    m_lastMeasureAvailableSize = availableSize

  // --------------------------------------------------------------------------
  protected function measureOverride(vec2 availableSize) returns vec2
    if (m_children.isEmpty())
      return m_desiredSize
    var desiredSize = m_desiredSize
    for child in m_children
    //{
      if (child.isVisible())
        child.measure(availableSize)
        let childMeasuredSize = child.getMeasuredSize()
        desiredSize.x = max(desiredSize.x, childMeasuredSize.x)
        desiredSize.y = max(desiredSize.y, childMeasuredSize.y)
    //}
    return desiredSize

  // --------------------------------------------------------------------------
  function layout()
    if (m_lastLayoutAvailableSize == ZERO2)
      return
    layout(m_lastLayoutAvailableSize)

  // --------------------------------------------------------------------------
  function layout(vec2 availableSize)
    layoutOverride(availableSize)
    m_lastLayoutAvailableSize = availableSize

  // --------------------------------------------------------------------------
  protected function layoutOverride(vec2 availableSize) returns vec2

    let padding = getPadding()
    for child in m_children
    //{
      if (child.isVisible())
        let marginAndPadding = padding + child.getMargin()
        Frame.layoutFrame(this, child, marginAndPadding)
        child.layout(availableSize - marginAndPadding.size())          
    //}

    return availableSize
      
  // --------------------------------------------------------------------------
  static function layoutFrame(Frame parentFrame, Frame childFrame, thickness padding)

    let parentHandle = parentFrame.getFrameHandle()
    let childHandle = childFrame.getFrameHandle()

    childHandle.clearAllPoints()

    let horizontalLayoutMode = childFrame.getHorizontalLayoutMode()
    let verticalLayoutMode = childFrame.getVerticalLayoutMode()
    let marginAndPadding = childFrame.getMargin() + padding

    if (horizontalLayoutMode == STRETCH and verticalLayoutMode == STRETCH)
    //{
      childHandle.setPoint(FRAMEPOINT_BOTTOMLEFT, parentHandle, FRAMEPOINT_BOTTOMLEFT, marginAndPadding.bottomLeft() * LayoutScalars.bottomLeft)
      childHandle.setPoint(FRAMEPOINT_TOPRIGHT, parentHandle, FRAMEPOINT_TOPRIGHT, marginAndPadding.topRight() * LayoutScalars.topRight)
    //}
    else if (horizontalLayoutMode == CENTER and verticalLayoutMode == CENTER)
    //{
      childHandle.setPoint(FRAMEPOINT_CENTER, parentHandle, FRAMEPOINT_CENTER, ZERO2)
    //}
    else if (horizontalLayoutMode == LEFT)
    //{
      if (verticalLayoutMode == BOTTOM or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_BOTTOMLEFT, parentHandle, FRAMEPOINT_BOTTOMLEFT, marginAndPadding.bottomLeft() * LayoutScalars.bottomLeft)
      if (verticalLayoutMode == TOP or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_TOPLEFT, parentHandle, FRAMEPOINT_TOPLEFT, marginAndPadding.topLeft()  * LayoutScalars.topLeft)
      if (verticalLayoutMode == CENTER)
        childHandle.setPoint(FRAMEPOINT_LEFT, parentHandle, FRAMEPOINT_LEFT, vec2(marginAndPadding.left, 0))
    //}
    else if (horizontalLayoutMode == RIGHT)
    //{
      if (verticalLayoutMode == BOTTOM or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_BOTTOMRIGHT, parentHandle, FRAMEPOINT_BOTTOMRIGHT, marginAndPadding.bottomRight() * LayoutScalars.bottomRight)
      if (verticalLayoutMode == TOP or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_TOPRIGHT, parentHandle, FRAMEPOINT_TOPRIGHT, marginAndPadding.topRight()  * LayoutScalars.topRight)
      if (verticalLayoutMode == CENTER)
        childHandle.setPoint(FRAMEPOINT_RIGHT, parentHandle, FRAMEPOINT_RIGHT, vec2(-marginAndPadding.right, 0))
    //}
    else if (horizontalLayoutMode == CENTER)
    //{
      if (verticalLayoutMode == BOTTOM or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_BOTTOM, parentHandle, FRAMEPOINT_BOTTOM, vec2(0, marginAndPadding.bottom))
      if (verticalLayoutMode == TOP or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_TOP, parentHandle, FRAMEPOINT_TOP, vec2(0, -marginAndPadding.top))
    //}
    else if (horizontalLayoutMode == STRETCH)
    //{
      if (verticalLayoutMode == BOTTOM)
        childHandle.setPoint(FRAMEPOINT_BOTTOMLEFT, parentHandle, FRAMEPOINT_BOTTOMLEFT, marginAndPadding.bottomLeft() * LayoutScalars.bottomLeft)
        childHandle.setPoint(FRAMEPOINT_BOTTOMRIGHT, parentHandle, FRAMEPOINT_BOTTOMRIGHT, marginAndPadding.bottomRight() * LayoutScalars.bottomRight)
      else if (verticalLayoutMode == TOP)
        childHandle.setPoint(FRAMEPOINT_TOPLEFT, parentHandle, FRAMEPOINT_TOPLEFT, marginAndPadding.topLeft() * LayoutScalars.topLeft)
        childHandle.setPoint(FRAMEPOINT_TOPRIGHT, parentHandle, FRAMEPOINT_TOPRIGHT, marginAndPadding.topRight() * LayoutScalars.topRight)
      else if (verticalLayoutMode == CENTER)
        childHandle.setPoint(FRAMEPOINT_LEFT, parentHandle, FRAMEPOINT_LEFT, vec2(marginAndPadding.left, 0))
        childHandle.setPoint(FRAMEPOINT_RIGHT, parentHandle, FRAMEPOINT_RIGHT, vec2(-marginAndPadding.right, 0))
    //}
    else
      Log.error("H: " + horizontalLayoutMode.toString() + " v: " + verticalLayoutMode.toString())

// ============================================================================
public interface IFrameFactory
  function createFrame(framehandle frameHandle) returns Frame

// ============================================================================
public class DefaultFrameFactory implements IFrameFactory
  constant static IFrameFactory instance = new DefaultFrameFactory()
  
  // --------------------------------------------------------------------------
  override function createFrame(framehandle frameHandle) returns Frame
    return new Frame(frameHandle)

// ============================================================================
public interface IFrameLayout
  function measure(Frame frame, vec2 size) returns vec2
  function layout(Frame frame, vec2 size) returns vec2

// ============================================================================
public interface IFrameTemplate
  function getFrameDefinition() returns FrameDefinition
  function setFrameDefinition(FrameDefinition definition)
  function getItemFrameFactory() returns IFrameFactory
  function setItemFrameFactory(IFrameFactory factory)
  function createFrame() returns Frame

// ============================================================================
public class FrameDefinition
  private string m_name = null
  private string m_typeName = null
  private framehandle m_owner = null
  private int m_priority = -1
  private string m_inherits = null
  private int m_createContext = -1

  // --------------------------------------------------------------------------
  construct (string name)
    m_name = name

  // --------------------------------------------------------------------------
  construct (string name, framehandle owner, int priority, int createContext)
    m_name = name
    m_owner = owner
    m_priority = priority
    m_createContext = createContext

  // --------------------------------------------------------------------------
  construct (string typeName, string name, framehandle owner, string inherits, int createContext)
    m_typeName = typeName
    m_name = name
    m_owner = owner
    m_inherits = inherits
    m_createContext = createContext

  // --------------------------------------------------------------------------
  function buildFrame() returns framehandle
    if (m_typeName != null)
      return createFrame(m_typeName, m_name, m_owner, m_inherits, m_createContext)
    if (m_owner != null)
      return createFrame(m_name, m_owner, m_priority, m_createContext)
    return createFrame(m_name)

// ============================================================================
public class FrameTemplate implements IFrameTemplate
  private FrameDefinition m_frameDef
  private IFrameFactory m_frameFactory
  private Action1<Frame> m_initializer

  // --------------------------------------------------------------------------
  override function getFrameDefinition() returns FrameDefinition
    return m_frameDef
  
  // --------------------------------------------------------------------------
  override function setFrameDefinition(FrameDefinition value)
    m_frameDef = value

  // --------------------------------------------------------------------------
  override function getItemFrameFactory() returns IFrameFactory
    return m_frameFactory
  
  // --------------------------------------------------------------------------
  override function setItemFrameFactory(IFrameFactory value)
    m_frameFactory = value

  // --------------------------------------------------------------------------
  function getInitializer() returns Action1<Frame>
    return m_initializer
  
  // --------------------------------------------------------------------------
  function setInitializer(Action1<Frame> value)
    m_initializer = value

  // --------------------------------------------------------------------------
  override function createFrame() returns Frame
    if (m_frameDef == null or m_frameFactory == null)
      return null
    let frame = m_frameFactory.createFrame(m_frameDef.buildFrame())
    if (m_initializer != null)
      m_initializer.call(frame)
    return frame

// ============================================================================
public enum HorizontalLayoutMode
  LEFT
  CENTER
  RIGHT
  STRETCH
  
// ============================================================================
public function HorizontalLayoutMode.toString() returns string
  switch (this)
    case LEFT
      return "LEFT"
    case RIGHT
      return "RIGHT"
    case CENTER
      return "CENTER"
    case STRETCH
      return "STRETCH"

// ============================================================================
public enum VerticalLayoutMode
  BOTTOM
  CENTER
  TOP
  STRETCH

// ============================================================================
public function VerticalLayoutMode.toString() returns string
  switch (this)
    case BOTTOM
      return "BOTTOM"
    case TOP
      return "TOP"
    case CENTER
      return "CENTER"
    case STRETCH
      return "STRETCH"

// ============================================================================
class Thickness
  thickness value = ZEROTHICK
  construct(thickness initialValue)
    value = initialValue

// ============================================================================
public interface ILightweightProperty
  function hasValue(Frame context) returns bool
  function clearValue(Frame context)

// ============================================================================
public class LightweightProperty<T> implements ILightweightProperty
  private HashMap<Frame, T> m_effectiveValues
  private Action1<Frame> m_propertyChanged
  private T m_defaultValue

  // --------------------------------------------------------------------------
  construct(T defaultValue, Action1<Frame> propertyChanged)
    m_defaultValue = defaultValue
    m_propertyChanged = propertyChanged

    if (g_allLightweightProperties == null)
      g_allLightweightProperties = new LinkedList<ILightweightProperty>()
    g_allLightweightProperties.add(this)

  // --------------------------------------------------------------------------
  override function hasValue(Frame context) returns bool
    return m_effectiveValues != null and m_effectiveValues.has(context)

  // --------------------------------------------------------------------------
  function getValue(Frame context) returns T
    if (m_effectiveValues == null)
      return m_defaultValue
    return m_effectiveValues.get(context)

  // --------------------------------------------------------------------------
  function setValue(Frame context, T value)
    if (m_effectiveValues == null)
      m_effectiveValues = new HashMap<Frame, T>()
    if (m_effectiveValues.has(context) == false or
        m_effectiveValues.get(context) != value)
      m_effectiveValues.put(context, value)
      raisePropertyChanged(context)
  
  // --------------------------------------------------------------------------
  override function clearValue(Frame context)
    if (m_effectiveValues != null)
      m_effectiveValues.remove(context)
      if (m_effectiveValues.size() == 0)
        destroy m_effectiveValues
        m_effectiveValues = null

  // --------------------------------------------------------------------------
  protected function raisePropertyChanged(Frame context)
    if (m_propertyChanged != null)
      m_propertyChanged.call(context)