package Frame
import HashMap
import LinkedList
import Layout
import Action
import public FramehandleExtensions
import Object
import Flags
import ClosureTimers
import ErrorHandling
import Execute

@configurable public constant bool FRAME_SECURITY_CHECKS_ENABLED = false
@configurable public string FRAME_LOG_FILTER_STRING = null

LinkedList<ILightweightProperty> g_allLightweightProperties

// ============================================================================
class FrameFlags
  static constant int measureDirty          = 0x01
  static constant int arrangeDirty          = 0x02
  static constant int measureInProgress     = 0x04
  static constant int arrangeInProgress     = 0x08
  static constant int neverMeasured         = 0x10
  static constant int neverArranged         = 0x20
  static constant int measureDuringArrange  = 0x40

// ============================================================================
public class Frame
  static constant LightweightProperty<object>         dataContextProperty   = new LightweightProperty<object>(NULL, (frame, args) -> frame.onDataContextChanged(args.oldValue, args.newValue))
  static constant LightweightProperty<Thickness>      marginProperty        = new LightweightProperty<Thickness>(null, null)..setAffectsMeasure(true)
  static constant LightweightProperty<Thickness>      paddingProperty       = new LightweightProperty<Thickness>(null, null)..setAffectsMeasure(true)

  private framehandle m_frameHandle
  private Frame m_parent
  private LinkedList<Frame> m_children
  private HorizontalLayoutMode m_horizontalLayoutMode
  private VerticalLayoutMode m_verticalLayoutMode
  private vec2 m_desiredSize = ZERO2
  private vec2 m_measuredSize = ZERO2
  protected vec2 m_prevConstraint = ZERO2
  private vec2 m_prevArrangeSize = ZERO2
  private int m_flags = 0x30 // neverMeasured | neverArranged
  private Frame m_rootFrame = null
  private int m_treeLevel = 0
  private player m_player = null
  private int m_playerVisibility = INT_MAX

  protected LayoutRequest m_measureRequest = null
  protected LayoutRequest m_arrangeRequest = null
  protected SizeChangedInfo m_sizeChangedInfo = null

  // --------------------------------------------------------------------------
  protected function log(string message)
    if (FRAME_LOG_FILTER_STRING == null or getFullName().contains(FRAME_LOG_FILTER_STRING))
      Log.info("[{0}] {1}".format(getFullName(), message))

  // --------------------------------------------------------------------------
  protected function log(string context, string message)
    log("{0}: {1}".format(context, message))

  // --------------------------------------------------------------------------
  construct(framehandle frameHandle)
    m_frameHandle = frameHandle
    m_children = new LinkedList<Frame>()
    m_parent = null
    m_horizontalLayoutMode = HorizontalLayoutMode.STRETCH
    m_verticalLayoutMode = VerticalLayoutMode.STRETCH
    m_desiredSize = frameHandle.getSize()

  // --------------------------------------------------------------------------
  ondestroy
  //{
    if (m_frameHandle != null)
      m_frameHandle.remove()
      m_frameHandle = null

    if (m_parent != null)
      m_parent.m_children.remove(this)
      m_parent = null

    while m_children.isEmpty() == false
      destroy m_children.pop()
    destroy m_children
    m_children = null
  
    m_frameHandle.remove()
    m_frameHandle = null

    for prop in g_allLightweightProperties
      prop.clearValue(this)

    if (m_sizeChangedInfo != null)
      m_sizeChangedInfo.frame = null
      m_sizeChangedInfo = null
  //}

  // --------------------------------------------------------------------------
  function getName() returns string
    return m_frameHandle.getName()

  // --------------------------------------------------------------------------
  function getFullName() returns string
    return m_parent != null ? "{0}.{1}".format(m_parent.getFullName(), getName()) : getName()

  // --------------------------------------------------------------------------
  function getFrameHandle() returns framehandle
    return m_frameHandle

  // --------------------------------------------------------------------------
  function getParent() returns Frame
    return m_parent

  // --------------------------------------------------------------------------
  private function setParent(Frame value)
    if (m_parent == value)
      return

    if (m_parent != null)
      m_parent.m_children.remove(this)

    let prevParent = value
    m_parent = value

    if (m_parent != null)
      m_parent.m_children.add(this)
      m_frameHandle.setParent(value.m_frameHandle)
      m_parent.invalidateMeasure()
      if (prevParent == null)
        resinsertIntoLayoutQueue()

    onParentChanged()

  // --------------------------------------------------------------------------
  protected function onParentChanged()
    m_treeLevel = m_parent != null ? m_parent.getTreeLevel() + 1 : 1
    m_rootFrame = m_parent != null ? m_parent.getRootFrame() : this
    for child in m_children
      child.onParentChanged()

  // --------------------------------------------------------------------------
  function getTreeLevel() returns int
    return m_treeLevel

  // --------------------------------------------------------------------------
  function getRootFrame() returns Frame
    return m_rootFrame
  
  // --------------------------------------------------------------------------
  function getChildren() returns LinkedList<Frame>
    return m_children

  // --------------------------------------------------------------------------
  function addChild(Frame childFrame)
    if (childFrame.m_parent != this)
      childFrame.setParent(this)
      invalidateMeasure()

  // --------------------------------------------------------------------------
  function removeChild(Frame childFrame)
    if (childFrame.m_parent == this)
      childFrame.setParent(null)
      invalidateMeasure()

  // --------------------------------------------------------------------------
  function isPanel() returns bool
    return false

  // --------------------------------------------------------------------------
  function getWidth() returns real
    return m_frameHandle.getWidth()
  
  // --------------------------------------------------------------------------
  function setWidth(real value)
    if (m_frameHandle.getWidth() != value or m_desiredSize.x != value)
      m_frameHandle.setWidth(value)
      setDesiredWidth(value)
  
  // --------------------------------------------------------------------------
  function getHeight() returns real
    return m_frameHandle.getHeight()
  
  // --------------------------------------------------------------------------
  function setHeight(real value)
    if (m_frameHandle.getHeight() != value or m_desiredSize.y != value)
      m_frameHandle.setHeight(value)
      setDesiredHeight(value)
  
  // --------------------------------------------------------------------------
  function getSize() returns vec2
    return m_frameHandle.getSize()
  
  // --------------------------------------------------------------------------
  function setSize(vec2 value)
    if (m_frameHandle.getSize() != value or m_desiredSize != value)
      m_frameHandle.setSize(value)
      setDesiredSize(value)

  // --------------------------------------------------------------------------
  function setAbsArea(rectr area)
    setAbsArea(FRAMEPOINT_BOTTOMLEFT, area)

  // --------------------------------------------------------------------------
  function setAbsArea(framepointtype framepoint, rectr area)
    setAbsArea(framepoint, area.getFramePointOffset(framepoint), area.size())

  // --------------------------------------------------------------------------
  function setAbsArea(framepointtype framepoint, vec2 pos, vec2 size)
    m_frameHandle.clearAllPoints()
    m_frameHandle.setAbsPoint(framepoint, pos)
    setDesiredSize(size)

  // --------------------------------------------------------------------------
  function setText(string value)
    m_frameHandle.setText(value)

  // --------------------------------------------------------------------------
  function getText() returns string
    return m_frameHandle.getText()

  // --------------------------------------------------------------------------
  function setTextAlignment(textaligntype vert, textaligntype horz)
    m_frameHandle.setTextAlignment(vert, horz)

  // --------------------------------------------------------------------------
  function getEnabled() returns bool
    return m_frameHandle.isEnabled()

  // --------------------------------------------------------------------------
  function getDesiredSize() returns vec2
    return m_desiredSize

  // --------------------------------------------------------------------------
  function setDesiredSize(vec2 value)
    if (m_desiredSize != value)
      m_desiredSize = value
      if (m_parent != null)
        invalidateMeasure()
        m_parent.invalidateMeasure()
      else
        doLayout(value)

  // --------------------------------------------------------------------------
  function resinsertIntoLayoutQueue()
    let requiresMeasure = getMeasureDirty() and not getNeverMeasured() and m_measureRequest == null
    if (requiresMeasure)
      LayoutManager.measureQueue.add(this)

    let requiresArrange = getArrangeDirty() and not getNeverArranged() and m_arrangeRequest == null
    if (requiresArrange)
      LayoutManager.arrangeQueue.add(this)

  // --------------------------------------------------------------------------
  function getDesiredWidth() returns real
    return m_desiredSize.x

  // --------------------------------------------------------------------------
  function setDesiredWidth(real value)
    setDesiredSize(vec2(value, m_desiredSize.y))

  // --------------------------------------------------------------------------
  function getDesiredHeight() returns real
    return m_desiredSize.y

  // --------------------------------------------------------------------------
  function setDesiredHeight(real value)
    setDesiredSize(vec2(m_desiredSize.x, value))

  // --------------------------------------------------------------------------
  function getMeasuredSize() returns vec2
    return m_measuredSize

  // --------------------------------------------------------------------------
  function getMeasuredWidth() returns real
    return m_measuredSize.x

  // --------------------------------------------------------------------------
  function getMeasuredHeight() returns real
    return m_measuredSize.y

  // --------------------------------------------------------------------------
  function getDataContext() returns object
    return dataContextProperty.getValue(this)

  // --------------------------------------------------------------------------
  function setDataContext(object value)
    dataContextProperty.setValue(this, value)

  // --------------------------------------------------------------------------
  function getHorizontalAlignment() returns HorizontalLayoutMode
    return m_horizontalLayoutMode

  // --------------------------------------------------------------------------
  function setHorizontalAlignment(HorizontalLayoutMode value)
    if (m_horizontalLayoutMode != value)
      m_horizontalLayoutMode = value
      invalidateArrange()

  // --------------------------------------------------------------------------
  function getVerticalAlignment() returns VerticalLayoutMode    
    return m_verticalLayoutMode

  // --------------------------------------------------------------------------
  function setVerticalAlignment(VerticalLayoutMode value)
    if (m_verticalLayoutMode != value)
      m_verticalLayoutMode = value
      invalidateArrange()

  // --------------------------------------------------------------------------
  function getMargin() returns thickness
    let valueObject = marginProperty.getValue(this)
    return valueObject != null ? valueObject.value : ZEROTHICK

  // --------------------------------------------------------------------------
  function setMargin(thickness value)
    var valueObject = marginProperty.getValue(this)
    if (valueObject == null)
      valueObject = new Thickness(value)
      marginProperty.setValue(this, valueObject)
    else if (valueObject.value != value)
      let oldValue = new Thickness(valueObject.value)
      valueObject.value = value
      marginProperty.onPropertyChanged(this, oldValue, valueObject)
      destroy oldValue

  // --------------------------------------------------------------------------
  function getPadding() returns thickness
    let valueObject = paddingProperty.getValue(this)
    return valueObject != null ? valueObject.value : ZEROTHICK

  // --------------------------------------------------------------------------
  function setPadding(thickness value)
    var valueObject = paddingProperty.getValue(this)
    if (valueObject == null)
      valueObject = new Thickness(value)
      paddingProperty.setValue(this, valueObject)
    else if (valueObject.value != value)
      let oldValue = new Thickness(valueObject.value)
      valueObject.value = value
      paddingProperty.onPropertyChanged(this, oldValue, valueObject)
      destroy oldValue

  // --------------------------------------------------------------------------
  function getPlayer() returns player
    return m_player

  // --------------------------------------------------------------------------
  function setPlayer(player value)
    if (m_player != value)
      m_player = value
      onPlayerChanged()

  // --------------------------------------------------------------------------
  protected function onPlayerChanged()
    skip

  // --------------------------------------------------------------------------
  function isVisible() returns bool
    return m_playerVisibility != 0

  // --------------------------------------------------------------------------
  function isVisible(player p) returns bool
    return m_playerVisibility.isBitSet(p.getId())

  // --------------------------------------------------------------------------
  function show()
    m_frameHandle.show()
    let wasVisible = m_playerVisibility
    m_playerVisibility = INT_MAX
    if (wasVisible != m_playerVisibility)
      onVisibilityChanged()
      signalDesiredSizeChanged()
      invalidateMeasure()
  
  // --------------------------------------------------------------------------
  function show(player _player)
    m_frameHandle.show(_player)
    let wasVisible = m_playerVisibility
    m_playerVisibility = m_playerVisibility.setBit(_player.getId())
    if (wasVisible != m_playerVisibility)
      onVisibilityChanged()
      signalDesiredSizeChanged()
      invalidateMeasure()

  // --------------------------------------------------------------------------
  function showOnly(player _player)
    m_frameHandle.hide()
    m_frameHandle.show(_player)
    let wasVisible = m_playerVisibility
    m_playerVisibility = 0
    m_playerVisibility = m_playerVisibility.setBit(_player.getId())
    if (wasVisible != m_playerVisibility)
      onVisibilityChanged()
      signalDesiredSizeChanged()
      invalidateMeasure()

  // --------------------------------------------------------------------------
  function hide()
    m_frameHandle.hide()
    let wasVisible = m_playerVisibility
    m_playerVisibility = 0
    if (wasVisible != m_playerVisibility)
      onVisibilityChanged()

  // --------------------------------------------------------------------------
  function hide(player _player)
    m_frameHandle.hide(_player)
    let wasVisible = m_playerVisibility
    m_playerVisibility = m_playerVisibility.clearBit(_player.getId())
    if (wasVisible != m_playerVisibility)
      onVisibilityChanged()

  // --------------------------------------------------------------------------
  function hideOnly(player _player)
    m_frameHandle.show()
    m_frameHandle.hide(_player)
    let wasVisible = m_playerVisibility
    m_playerVisibility = INT_MAX
    m_playerVisibility = m_playerVisibility.clearBit(_player.getId())
    if (wasVisible != m_playerVisibility)
      onVisibilityChanged()

  // --------------------------------------------------------------------------
  protected function onVisibilityChanged()
    skip

  // --------------------------------------------------------------------------
  function clearFocus()
    m_frameHandle.clearFocus()

  // --------------------------------------------------------------------------
  function invalidateMeasure()
    if (getMeasureDirty() or getMeasureInProgress())
      return
    if (m_measureRequest != null)
      error("Can't be clean and still have a measure request")
    if (not getNeverMeasured())
      LayoutManager.measureQueue.add(this)
    setMeasureDirty(true)

  // --------------------------------------------------------------------------
  protected function invalidateMeasureInternal()
    setMeasureDirty(true)

  // --------------------------------------------------------------------------
  function invalidateArrange()
    if (getArrangeDirty() or getArrangeInProgress())
      return
    if (m_arrangeRequest != null)
      error("Can't be clean and still have an arrange request")
    if (not getNeverArranged())
      LayoutManager.arrangeQueue.add(this)
    setArrangeDirty(true)

  // --------------------------------------------------------------------------
  protected function invalidateArrangeInternal()
    setArrangeDirty(true)

  // --------------------------------------------------------------------------
  function signalDesiredSizeChanged()
    if (m_parent != null)
      m_parent.onChildMeasuredSizeChanged(this)

  // --------------------------------------------------------------------------
  protected function onChildMeasuredSizeChanged(Frame _child)
    if (not getMeasureDirty())
      invalidateMeasure()

  // --------------------------------------------------------------------------
  private function doLayout(vec2 size)
    measure(size)
    arrange(size)

  // --------------------------------------------------------------------------
  function updateLayout()
    LayoutManager.updateLayout()

  // --------------------------------------------------------------------------
  function measure(vec2 availableSize)

    let isCloseToPrevMeasure = availableSize == m_prevConstraint

    if (not getMeasureDirty() and not getNeverMeasured() and isCloseToPrevMeasure)
      return

    if (not isVisible())
      if (m_measureRequest != null)
        LayoutManager.measureQueue.remove(this)
      if (not isCloseToPrevMeasure)
        invalidateMeasureInternal()
        m_prevConstraint = availableSize
      return

    let prevMeasuredSize = m_measuredSize
    let marginSize = getMargin().size()

    invalidateArrange()

    setMeasureInProgress(true)

    LayoutManager.enterMeasure()
    let measuredSize = measureOverride(availableSize - marginSize)
    LayoutManager.exitMeasure()

    setMeasureInProgress(false)
    
    setMeasureDirty(false)
    setNeverMeasured(false)

    if (m_measureRequest != null)
      LayoutManager.measureQueue.remove(this)

    // log("ms: " + measuredSize.toString())

    if (measuredSize.x == REAL_MAX)
      error("Measured width cannot be REAL_MAX")

    if (measuredSize.y == REAL_MAX)
      error("Measured height cannot be REAL_MAX")

    m_measuredSize = measuredSize
    m_prevConstraint = availableSize

    if (m_parent != null and prevMeasuredSize != measuredSize
        and not m_parent.getMeasureInProgress() and not getMeasureDuringArrange())
      m_parent.onChildMeasuredSizeChanged(this)

  // --------------------------------------------------------------------------
  protected function measureOverride(vec2 availableSize) returns vec2
    
    var adjustedSize = m_desiredSize

    if (adjustedSize.x == REAL_MAX)
      adjustedSize.x = 0
    if (adjustedSize.y == REAL_MAX)
      adjustedSize.y = 0

    if (m_children.isEmpty())
      return adjustedSize

    var measuredSize = adjustedSize

    for child in m_children
    //{
      if (child.isVisible())
        child.measure(availableSize)
        let childMeasuredSize = child.getMeasuredSize()
        measuredSize.x = max(measuredSize.x, childMeasuredSize.x)
        measuredSize.y = max(measuredSize.y, childMeasuredSize.y)
    //}

    return measuredSize

  // --------------------------------------------------------------------------
  function arrange()
    arrange(m_prevArrangeSize)

  // --------------------------------------------------------------------------
  function arrange(vec2 availableSize)

    //if (availableSize.x == REAL_MAX)
    //  Log.error("Arrange width cannot be REAL_MAX")

    //if (availableSize.y == REAL_MAX)
    //  Log.error("Arrange height cannot be REAL_MAX")

    if (not isVisible())
      if (m_arrangeRequest != null)
        LayoutManager.arrangeQueue.remove(this)
      m_prevArrangeSize = availableSize
      return

    let neverMeasured = getNeverMeasured()

    if (getMeasureDirty() or neverMeasured)
      setMeasureDuringArrange(true)
      if (neverMeasured)
        measure(availableSize)
      else
        measure(m_prevConstraint)
      setMeasureDuringArrange(false)

    if (not getArrangeDirty() and not getNeverArranged() and m_prevArrangeSize == availableSize)
      return

    let oldSize = getSize()

    setArrangeInProgress(true)
      
    LayoutManager.enterArrange()
    
    arrangeCore(availableSize)

    markForSizeChangedIfNeeded(oldSize, getSize())

    LayoutManager.exitArrange()

    setArrangeInProgress(false)

    m_prevArrangeSize = availableSize

    setArrangeDirty(false)
    setNeverArranged(false)

    if (m_arrangeRequest != null)
      LayoutManager.arrangeQueue.remove(this)

  // --------------------------------------------------------------------------
  private function arrangeCore(vec2 availableSize)

    // log("arrangeCore", "availableSize: " + availableSize.toString())

    let margin = getMargin()
    let marginWidth = margin.width()
    let marginHeight = margin.height()

    let availableSizeMarginAdjusted = vec2(
      max(0, availableSize.x - marginWidth),
      max(0, availableSize.y - marginHeight))

    var arrangeSize = availableSizeMarginAdjusted

    // log("arrangeCore", "arrangeSize: " + arrangeSize.toString())

    let measuredSizeMarginAdjusted = vec2(
      max(0, m_measuredSize.x - marginWidth),
      max(0, m_measuredSize.y - marginHeight))

    // log("arrangeCore", "arrangeSize: " + arrangeSize.toString())

    if (arrangeSize.x < measuredSizeMarginAdjusted.x)
      arrangeSize.x = measuredSizeMarginAdjusted.x

    if (arrangeSize.y < measuredSizeMarginAdjusted.y)
      arrangeSize.y = measuredSizeMarginAdjusted.y

    // log("arrangeCore", "arrangeSize: " + arrangeSize.toString())
    
    if (getHorizontalAlignment() != STRETCH or (m_parent == null and m_desiredSize.x == REAL_MAX))
      arrangeSize.x = measuredSizeMarginAdjusted.x
    
    if (getVerticalAlignment() != STRETCH or (m_parent == null and m_desiredSize.y == REAL_MAX))
      arrangeSize.y = measuredSizeMarginAdjusted.y

    // TODO: max size?

    arrangeSize.x = min(arrangeSize.x, availableSizeMarginAdjusted.x)
    arrangeSize.y = min(arrangeSize.y, availableSizeMarginAdjusted.y)

    // log("as: " + arrangeSize.toString())

    var finalSize = arrangeOverride(arrangeSize)

    finalSize.x = min(finalSize.x, availableSizeMarginAdjusted.x)
    finalSize.y = min(finalSize.y, availableSizeMarginAdjusted.y)

    m_frameHandle.setSize(finalSize)

    // log("arrangeCore", "finalSize: " + finalSize.toString())

  // --------------------------------------------------------------------------
  protected function arrangeOverride(vec2 availableSize) returns vec2
    if (m_children.isEmpty() == false)
      let padding = getPadding()
      for child in m_children
      //{
        if (child.isVisible())
          Frame.arrangeFrame(this, child, padding)
          child.arrange(availableSize - padding.size())
      //}
    return availableSize

  // --------------------------------------------------------------------------
  private function markForSizeChangedIfNeeded(vec2 oldSize, vec2 newSize) returns bool
    let widthChanged = oldSize.x != newSize.x
    let heightChanged = oldSize.y != newSize.y

    // log("o: " +oldSize.toString() + "n: " + newSize.toString())

    var info = m_sizeChangedInfo

    if (info != null)
      info.widthChanged = info.widthChanged or widthChanged
      info.heightChanged = info.heightChanged or heightChanged
      return true

    if (widthChanged or heightChanged)
      info = new SizeChangedInfo()
      info.frame = this
      info.oldSize = oldSize
      info.widthChanged = widthChanged
      info.heightChanged = heightChanged
      m_sizeChangedInfo = info
      LayoutManager.addToSizeChangedChain(info)
      return true

    return false

  // --------------------------------------------------------------------------
  protected function onRenderSizeChanged(SizeChangedInfo _info)
    skip

  // --------------------------------------------------------------------------
  protected function onDataContextChanged(object _oldValue, object _newValue)
    skip
      
  // --------------------------------------------------------------------------
  static function arrangeFrame(Frame parentFrame, Frame childFrame, thickness padding)

    let parentHandle = parentFrame.getFrameHandle()
    let childHandle = childFrame.getFrameHandle()

    childHandle.clearAllPoints()

    let horizontalLayoutMode = childFrame.getHorizontalAlignment()
    let verticalLayoutMode = childFrame.getVerticalAlignment()
    let marginAndPadding = childFrame.getMargin() + padding

    if (horizontalLayoutMode == STRETCH and verticalLayoutMode == STRETCH)
    //{
      childHandle.setPoint(FRAMEPOINT_BOTTOMLEFT, parentHandle, FRAMEPOINT_BOTTOMLEFT, marginAndPadding.bottomLeft() * LayoutScalars.bottomLeft)
      childHandle.setPoint(FRAMEPOINT_TOPRIGHT, parentHandle, FRAMEPOINT_TOPRIGHT, marginAndPadding.topRight() * LayoutScalars.topRight)
    //}
    else if (horizontalLayoutMode == CENTER and verticalLayoutMode == CENTER)
    //{
      childHandle.setPoint(FRAMEPOINT_CENTER, parentHandle, FRAMEPOINT_CENTER, ZERO2)
    //}
    else if (horizontalLayoutMode == LEFT)
    //{
      if (verticalLayoutMode == BOTTOM or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_BOTTOMLEFT, parentHandle, FRAMEPOINT_BOTTOMLEFT, marginAndPadding.bottomLeft() * LayoutScalars.bottomLeft)
      if (verticalLayoutMode == TOP or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_TOPLEFT, parentHandle, FRAMEPOINT_TOPLEFT, marginAndPadding.topLeft()  * LayoutScalars.topLeft)
      if (verticalLayoutMode == CENTER)
        childHandle.setPoint(FRAMEPOINT_LEFT, parentHandle, FRAMEPOINT_LEFT, vec2(marginAndPadding.left, 0))
    //}
    else if (horizontalLayoutMode == RIGHT)
    //{
      if (verticalLayoutMode == BOTTOM or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_BOTTOMRIGHT, parentHandle, FRAMEPOINT_BOTTOMRIGHT, marginAndPadding.bottomRight() * LayoutScalars.bottomRight)
      if (verticalLayoutMode == TOP or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_TOPRIGHT, parentHandle, FRAMEPOINT_TOPRIGHT, marginAndPadding.topRight()  * LayoutScalars.topRight)
      if (verticalLayoutMode == CENTER)
        childHandle.setPoint(FRAMEPOINT_RIGHT, parentHandle, FRAMEPOINT_RIGHT, vec2(-marginAndPadding.right, 0))
    //}
    else if (horizontalLayoutMode == CENTER)
    //{
      if (verticalLayoutMode == BOTTOM or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_BOTTOM, parentHandle, FRAMEPOINT_BOTTOM, vec2(0, marginAndPadding.bottom))
      if (verticalLayoutMode == TOP or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_TOP, parentHandle, FRAMEPOINT_TOP, vec2(0, -marginAndPadding.top))
    //}
    else if (horizontalLayoutMode == STRETCH)
    //{
      if (verticalLayoutMode == BOTTOM)
        childHandle.setPoint(FRAMEPOINT_BOTTOMLEFT, parentHandle, FRAMEPOINT_BOTTOMLEFT, marginAndPadding.bottomLeft() * LayoutScalars.bottomLeft)
        childHandle.setPoint(FRAMEPOINT_BOTTOMRIGHT, parentHandle, FRAMEPOINT_BOTTOMRIGHT, marginAndPadding.bottomRight() * LayoutScalars.bottomRight)
      else if (verticalLayoutMode == TOP)
        childHandle.setPoint(FRAMEPOINT_TOPLEFT, parentHandle, FRAMEPOINT_TOPLEFT, marginAndPadding.topLeft() * LayoutScalars.topLeft)
        childHandle.setPoint(FRAMEPOINT_TOPRIGHT, parentHandle, FRAMEPOINT_TOPRIGHT, marginAndPadding.topRight() * LayoutScalars.topRight)
      else if (verticalLayoutMode == CENTER)
        childHandle.setPoint(FRAMEPOINT_LEFT, parentHandle, FRAMEPOINT_LEFT, vec2(marginAndPadding.left, 0))
        childHandle.setPoint(FRAMEPOINT_RIGHT, parentHandle, FRAMEPOINT_RIGHT, vec2(-marginAndPadding.right, 0))
    //}
    else
      Log.error("H: " + horizontalLayoutMode.toString() + " v: " + verticalLayoutMode.toString())

  // --------------------------------------------------------------------------
  protected function getMeasureDirty() returns bool
    return readFlag(FrameFlags.measureDirty)

  // --------------------------------------------------------------------------
  protected function setMeasureDirty(bool value)
    writeFlag(FrameFlags.measureDirty, value)

  // --------------------------------------------------------------------------
  protected function getArrangeDirty() returns bool
    return readFlag(FrameFlags.arrangeDirty)

  // --------------------------------------------------------------------------
  protected function setArrangeDirty(bool value)
    writeFlag(FrameFlags.arrangeDirty, value)

  // --------------------------------------------------------------------------
  function getMeasureInProgress() returns bool
    return readFlag(FrameFlags.measureInProgress)

  // --------------------------------------------------------------------------
  protected function setMeasureInProgress(bool value)
    writeFlag(FrameFlags.measureInProgress, value)

  // --------------------------------------------------------------------------
  function getArrangeInProgress() returns bool
    return readFlag(FrameFlags.arrangeInProgress)

  // --------------------------------------------------------------------------
  protected function setArrangeInProgress(bool value)
    writeFlag(FrameFlags.arrangeInProgress, value)

  // --------------------------------------------------------------------------
  protected function getNeverMeasured() returns bool
    return readFlag(FrameFlags.neverMeasured)

  // --------------------------------------------------------------------------
  protected function setNeverMeasured(bool value)
    writeFlag(FrameFlags.neverMeasured, value)

  // --------------------------------------------------------------------------
  protected function getNeverArranged() returns bool
    return readFlag(FrameFlags.neverArranged)

  // --------------------------------------------------------------------------
  protected function setNeverArranged(bool value)
    writeFlag(FrameFlags.neverArranged, value)

  // --------------------------------------------------------------------------
  protected function getMeasureDuringArrange() returns bool
    return readFlag(FrameFlags.measureDuringArrange)

  // --------------------------------------------------------------------------
  protected function setMeasureDuringArrange(bool value)
    writeFlag(FrameFlags.measureDuringArrange, value)

  // --------------------------------------------------------------------------
  @inline
  protected function readFlag(int flag) returns bool
    return m_flags.readFlag8(flag)

  // --------------------------------------------------------------------------
  @inline
  protected function writeFlag(int flag, bool value)
    m_flags = m_flags.writeFlag8(flag, value)

// ============================================================================
public interface IFrameFactory
  function createFrame(framehandle frameHandle) returns Frame

// ============================================================================
public class DefaultFrameFactory implements IFrameFactory
  constant static IFrameFactory instance = new DefaultFrameFactory()
  
  // --------------------------------------------------------------------------
  override function createFrame(framehandle frameHandle) returns Frame
    return new Frame(frameHandle)

// ============================================================================
public interface IFrameLayout
  function measure(Frame frame, vec2 size) returns vec2
  function arrange(Frame frame, vec2 size) returns vec2

// ============================================================================
public class FrameDefinition
  private string m_name = null
  private string m_typeName = null
  private framehandle m_owner = null
  private int m_priority = -1
  private string m_inherits = null
  private int m_createContext = -1

  // --------------------------------------------------------------------------
  construct (string name)
    m_name = name

  // --------------------------------------------------------------------------
  construct (string name, framehandle owner, int priority, int createContext)
    m_name = name
    m_owner = owner
    m_priority = priority
    m_createContext = createContext

  // --------------------------------------------------------------------------
  construct (string typeName, string name, framehandle owner, string inherits, int createContext)
    m_typeName = typeName
    m_name = name
    m_owner = owner
    m_inherits = inherits
    m_createContext = createContext

  // --------------------------------------------------------------------------
  function buildFrame() returns framehandle
    if (m_typeName != null)
      return createFrame(m_typeName, m_name, m_owner, m_inherits, m_createContext)
    if (m_owner != null)
      return createFrame(m_name, m_owner, m_priority, m_createContext)
    return createFrame(m_name)

// ============================================================================
public interface IFrameTemplate
  function createFrame() returns Frame

// ============================================================================
public class FrameTemplate implements IFrameTemplate
  private FrameDefinition m_frameDef
  private IFrameFactory m_frameFactory
  private Action1<Frame> m_initializer

  // --------------------------------------------------------------------------
  ondestroy
    m_frameDef = null
    m_frameFactory = null
    if (m_initializer != null)
      m_initializer.release()
      m_initializer = null

  // --------------------------------------------------------------------------
  function getFrameDefinition() returns FrameDefinition
    return m_frameDef
  
  // --------------------------------------------------------------------------
  function setFrameDefinition(FrameDefinition value)
    m_frameDef = value

  // --------------------------------------------------------------------------
  function getItemFrameFactory() returns IFrameFactory
    return m_frameFactory
  
  // --------------------------------------------------------------------------
  function setItemFrameFactory(IFrameFactory value)
    m_frameFactory = value

  // --------------------------------------------------------------------------
  function getInitializer() returns Action1<Frame>
    return m_initializer
  
  // --------------------------------------------------------------------------
  function setInitializer(Action1<Frame> value)
    m_initializer = value.acquire()

  // --------------------------------------------------------------------------
  override function createFrame() returns Frame
    if (m_frameDef == null or m_frameFactory == null)
      return null
    let frame = m_frameFactory.createFrame(m_frameDef.buildFrame())
    if (m_initializer != null)
      m_initializer.call(frame)
    return frame

// ============================================================================
public interface IFrameTemplateSelector
  function getFrameTemplate(int typeid) returns IFrameTemplate

// ============================================================================
public class DataTypeTemplateSelector implements IFrameTemplateSelector
  private IterableMap<int, IFrameTemplate> m_typeIdToTemplateMap = new IterableMap<int, IFrameTemplate>()
  private IFrameTemplate m_defaultFrameTemplate

  // --------------------------------------------------------------------------
  function getDefaultFrameTemplate() returns IFrameTemplate
    return m_defaultFrameTemplate

  // --------------------------------------------------------------------------
  function setDefaultFrameTemplate(IFrameTemplate value)
    m_defaultFrameTemplate = value

  // --------------------------------------------------------------------------
  function registerFrameTemplate(int typeid, IFrameTemplate template)
    m_typeIdToTemplateMap.put(typeid, template)
  
  // --------------------------------------------------------------------------
  function unregisterFrameTemplate(int typeid)
    m_typeIdToTemplateMap.remove(typeid)

  // --------------------------------------------------------------------------
  override function getFrameTemplate(int typeid) returns IFrameTemplate
    return m_typeIdToTemplateMap.get(typeid)

// ============================================================================
public enum HorizontalLayoutMode
  LEFT
  CENTER
  RIGHT
  STRETCH
  
// ============================================================================
public function HorizontalLayoutMode.toString() returns string
  switch (this)
    case LEFT
      return "LEFT"
    case RIGHT
      return "RIGHT"
    case CENTER
      return "CENTER"
    case STRETCH
      return "STRETCH"

// ============================================================================
public enum VerticalLayoutMode
  BOTTOM
  CENTER
  TOP
  STRETCH

// ============================================================================
public function VerticalLayoutMode.toString() returns string
  switch (this)
    case BOTTOM
      return "BOTTOM"
    case TOP
      return "TOP"
    case CENTER
      return "CENTER"
    case STRETCH
      return "STRETCH"

// ============================================================================
class Thickness
  thickness value = ZEROTHICK
  construct(thickness initialValue)
    value = initialValue

// ============================================================================
public interface ILightweightProperty
  function hasValue(Frame context) returns bool
  function clearValue(Frame context)

// ============================================================================
abstract class LightweightPropertyChangedCallback<T> extends Action2<Frame, LightweightPropertyChangedEventArgs<T>>

// ============================================================================
class LightweightPropertyChangedEventArgs<T>
  LightweightProperty<T> property
  T oldValue
  T newValue

// ============================================================================
public class LightweightProperty<T> implements ILightweightProperty
  private HashMap<Frame, T> m_effectiveValues
  private LightweightPropertyChangedCallback<T> m_propertyChanged
  private T m_defaultValue
  private int m_flags = 0

  // --------------------------------------------------------------------------
  static class Flags
    static constant int affectsMeasure        = 0x01
    static constant int affectsArrange        = 0x02
    static constant int affectsParentMeasure  = 0x04
    static constant int affectsParentArrange  = 0x08

  // --------------------------------------------------------------------------
  construct(T defaultValue, LightweightPropertyChangedCallback<T> propertyChanged)
    m_defaultValue = defaultValue
    m_propertyChanged = propertyChanged

    if (g_allLightweightProperties == null)
      g_allLightweightProperties = new LinkedList<ILightweightProperty>()
    g_allLightweightProperties.add(this)

  // --------------------------------------------------------------------------
  function getAffectsMeasure() returns bool
    return readFlag(Flags.affectsMeasure)

  // --------------------------------------------------------------------------
  function setAffectsMeasure(bool value)
    writeFlag(Flags.affectsMeasure, value)

  // --------------------------------------------------------------------------
  function getAffectsArrange() returns bool
    return readFlag(Flags.affectsArrange)

  // --------------------------------------------------------------------------
  function setAffectsArrange(bool value)
    writeFlag(Flags.affectsArrange, value)

  // --------------------------------------------------------------------------
  function getAffectsParentMeasure() returns bool
    return readFlag(Flags.affectsParentMeasure)

  // --------------------------------------------------------------------------
  function setAffectsParentMeasure(bool value)
    writeFlag(Flags.affectsParentMeasure, value)

  // --------------------------------------------------------------------------
  function getAffectsParentArrange() returns bool
    return readFlag(Flags.affectsParentArrange)

  // --------------------------------------------------------------------------
  function setAffectsParentArrange(bool value)
    writeFlag(Flags.affectsParentArrange, value)

  // --------------------------------------------------------------------------
  override function hasValue(Frame context) returns bool
    if (context == null)
      argumentNullError("context")
    return m_effectiveValues != null and m_effectiveValues.has(context)

  // --------------------------------------------------------------------------
  function getValue(Frame context) returns T
    if (context == null)
      argumentNullError("context")
    if (m_effectiveValues == null)
      return m_defaultValue
    return m_effectiveValues.get(context)

  // --------------------------------------------------------------------------
  function setValue(Frame context, T value)
    if (context == null)
      argumentNullError("context")
    if (m_effectiveValues == null)
      m_effectiveValues = new HashMap<Frame, T>()
    let hasValue = m_effectiveValues.has(context)
    let oldValue = m_effectiveValues.get(context)
    if (not hasValue or oldValue != value)
      m_effectiveValues.put(context, value)
      onPropertyChanged(context, oldValue, value)
  
  // --------------------------------------------------------------------------
  override function clearValue(Frame context)
    if (context == null)
      argumentNullError("context")
    if (m_effectiveValues != null)
      m_effectiveValues.remove(context)
      if (m_effectiveValues.size() == 0)
        destroy m_effectiveValues
        m_effectiveValues = null

  // --------------------------------------------------------------------------
  protected function onPropertyChanged(Frame context, T oldValue, T newValue)

    raisePropertyChanged(context, oldValue, newValue)

    let affectsMeasure = getAffectsMeasure()
    let affectsArrange = getAffectsArrange()
    let affectsParentMeasure = getAffectsParentMeasure()
    let affectsParentArrange = getAffectsParentArrange()

    if (affectsParentMeasure or affectsParentArrange)
      let layoutParent = context.getParent()
      if (layoutParent != null)
        if (affectsParentMeasure)
          layoutParent.invalidateMeasure()
        if (affectsParentArrange)
          layoutParent.invalidateArrange()

    if (affectsMeasure)
      context.invalidateMeasure()

    if (affectsArrange)
      context.invalidateArrange()

  // --------------------------------------------------------------------------
  private function raisePropertyChanged(Frame context, T oldValue, T newValue)
    if (m_propertyChanged != null)
      let args = new LightweightPropertyChangedEventArgs<T>()
      args.property = this
      args.oldValue = oldValue
      args.newValue = newValue
      m_propertyChanged.call(context, args)
      destroy args

  // --------------------------------------------------------------------------
  @inline
  protected function readFlag(int flag) returns bool
    return m_flags.readFlag8(flag)

  // --------------------------------------------------------------------------
  @inline
  protected function writeFlag(int flag, bool value)
    m_flags = m_flags.writeFlag8(flag, value)

// ============================================================================
abstract class LayoutQueue
  private LayoutRequest m_head = null

  abstract function getRequest(Frame frame) returns LayoutRequest
  abstract function setRequest(Frame frame, LayoutRequest request)
  abstract function invalidate(Frame frame)

  // --------------------------------------------------------------------------
  function add(Frame frame)
    let request = getRequest(frame)
    if (request != null)
      return
    removeOrphans(frame)

    var f = frame
    while f != null
      let p = f.getRootFrame()
      invalidate(f)
      if (p != null and p.isVisible())
        remove(f)
      else if (getRequest(f) == null)
        removeOrphans(f)
        addRequest(f)
      f = p

    LayoutManager.dispatchUpdateLayout()

  // --------------------------------------------------------------------------
  function remove(Frame frame)
    let request = getRequest(frame)
    if (request == null)
      return
    removeRequest(request)
    setRequest(frame, null)

  // --------------------------------------------------------------------------
  function isEmpty() returns bool
    return m_head == null

  // --------------------------------------------------------------------------
  function getTopMost() returns Frame
    Frame found = null
    int treeLevel = INT_MAX
    var request = m_head
    while request != null
      let frame = request.target
      let level = frame.getTreeLevel()
      if (level < treeLevel)
        treeLevel = level
        found = frame
      request = request.next
    return found

  // --------------------------------------------------------------------------
  private function addRequest(Frame frame)
    let request = getNewRequest(frame)
    if (request == null)
      return
    request.next = m_head
    if (m_head != null)
      m_head.prev = request
    m_head = request
    setRequest(frame, request)

  // --------------------------------------------------------------------------
  private function getNewRequest(Frame frame) returns LayoutRequest
    let request = new LayoutRequest()
    request.target = frame
    return request

  // --------------------------------------------------------------------------
  private function removeRequest(LayoutRequest request)
    if (request.prev == null)
      m_head = request.next
    else
      request.prev.next = request.next
    if (request.next != null)
      request.next.prev = request.prev
    destroy request

  // --------------------------------------------------------------------------
  private function removeOrphans(Frame parent)
    var request = m_head
    while request != null
    //{
      let child = request.target
      let next = request.next

      if (child.getTreeLevel() == parent.getTreeLevel() + 1 and
          child.getRootFrame() == parent)
        removeRequest(getRequest(child))
        setRequest(child, null)

      request = next
    //}

// ============================================================================
class LayoutRequest
  Frame target = null
  LayoutRequest next = null
  LayoutRequest prev = null

// ============================================================================
class MeasureQueue extends LayoutQueue

  // --------------------------------------------------------------------------
  override function getRequest(Frame frame) returns LayoutRequest
    return frame.m_measureRequest
    
  // --------------------------------------------------------------------------
  override function setRequest(Frame frame, LayoutRequest request)
    frame.m_measureRequest = request

  // --------------------------------------------------------------------------
  override function invalidate(Frame frame)
    frame.invalidateMeasureInternal()

// ============================================================================
class ArrangeQueue extends LayoutQueue

  // --------------------------------------------------------------------------
  override function getRequest(Frame frame) returns LayoutRequest
    return frame.m_arrangeRequest
    
  // --------------------------------------------------------------------------
  override function setRequest(Frame frame, LayoutRequest request)
    frame.m_arrangeRequest = request

  // --------------------------------------------------------------------------
  override function invalidate(Frame frame)
    frame.invalidateArrangeInternal()

// ============================================================================
public class SizeChangedInfo
  Frame frame = null
  vec2 oldSize
  bool widthChanged
  bool heightChanged
  SizeChangedInfo next = null

// ============================================================================
public class LayoutManager
  static constant LayoutQueue measureQueue = new MeasureQueue()
  static constant LayoutQueue arrangeQueue = new ArrangeQueue()

  private static int s_measureStack = 0
  private static int s_arrangeStack = 0
  private static bool s_isInUpdateLayout = false
  private static bool s_dispatchInFlight = false
  private static SizeChangedInfo s_sizeChangedChain
  private static bool s_isInFireSizeChanged

  // --------------------------------------------------------------------------
  static function enterMeasure()
    s_measureStack++
  
  // --------------------------------------------------------------------------
  static function exitMeasure()
    s_measureStack--

  // --------------------------------------------------------------------------
  static function enterArrange()
    s_arrangeStack++
  
  // --------------------------------------------------------------------------
  static function exitArrange()
    s_arrangeStack--

  // --------------------------------------------------------------------------
  static function addToSizeChangedChain(SizeChangedInfo info)
    info.next = s_sizeChangedChain
    s_sizeChangedChain = info

  // --------------------------------------------------------------------------
  protected static function dispatchUpdateLayout()
    if (s_isInUpdateLayout or s_measureStack > 0 or s_arrangeStack > 0 or s_dispatchInFlight)
      return
    s_dispatchInFlight = true
    nullTimer() () ->
      s_dispatchInFlight = false
      updateLayout()

  // --------------------------------------------------------------------------
  private static function getHasDirtiness() returns bool
    return measureQueue.isEmpty() == false or arrangeQueue.isEmpty() == false

  // --------------------------------------------------------------------------
  protected static function updateLayout()
    if (s_isInUpdateLayout or s_measureStack > 0 or s_arrangeStack > 0 or s_dispatchInFlight)
      return

    let succeeded = try() -> 
    //{
      Frame currentFrame

      s_isInUpdateLayout = true
      // Log.info("LayoutManager", "updateLayout", "", "s_isInUpdateLayout = true")

      while (getHasDirtiness())
      //{
        var measured = 0
        while (true)
        //{
          currentFrame = measureQueue.getTopMost()
          if (currentFrame == null)
            break
          currentFrame.measure(currentFrame.m_prevConstraint)
          measured++
        //}

        var arranged = 0
        while (measureQueue.isEmpty())
        //{
          currentFrame = arrangeQueue.getTopMost()
          if (currentFrame == null)
            break
          currentFrame.arrange()
          arranged++
        //}

        // Log.info("LayoutManager", "updateLayout", "", "m: " + measured.toString() + "a: " + arranged.toString())
        
        if (measureQueue.isEmpty())
          s_isInUpdateLayout = false
          // Log.info("LayoutManager", "updateLayout", "", "s_isInUpdateLayout = false")
          fireSizeChangedEvents()
      //}
      
      fireSizeChangedEvents()
    //}

    s_isInUpdateLayout = false
    // Log.info("LayoutManager", "updateLayout", "", "s_isInUpdateLayout = false")
  
    if (not succeeded)
      Log.error("LayerManager", "updateLayout", "", "failed to update layout")
      error(lastError)

  // --------------------------------------------------------------------------
  private static function fireSizeChangedEvents()
    if (s_isInFireSizeChanged)
      return

    s_isInFireSizeChanged = true
    // Log.info("LayoutManager", "fireSizeChangedEvents", "", "enter")

    while (s_sizeChangedChain != null)
      let info = s_sizeChangedChain
      s_sizeChangedChain = info.next
      if (info.frame != null)
        info.frame.m_sizeChangedInfo = null
        info.frame.onRenderSizeChanged(info)
      destroy info
      if (getHasDirtiness())
        break

    s_isInFireSizeChanged = false
    // Log.info("LayoutManager", "fireSizeChangedEvents", "", "exit")