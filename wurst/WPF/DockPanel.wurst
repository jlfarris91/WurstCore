package DockPanel
import Panel
import HashMap

// ============================================================================
public enum Dock
  LEFT
  RIGHT
  BOTTOM
  TOP

HashMap<Frame, Dock> m_frameToDockLookup = new HashMap<Frame, Dock>()

// ============================================================================
public class DockPanel extends Panel
  private bool m_lastChildFill

  // --------------------------------------------------------------------------
  function getLastChildFill() returns bool
    return m_lastChildFill

  // --------------------------------------------------------------------------
  function setLastChildFill(bool value)
    if (m_lastChildFill != value)
      m_lastChildFill = value
      invalidateMeasure()

  // --------------------------------------------------------------------------
  override function measureOverride(vec2 availableSize) returns vec2

    var panelSize = ZERO2
    var accumulatedSize = ZERO2
    var i = 0

    for child in m_children
    //{
      let childConstraint = vec2(
        max(0.0, availableSize.x - accumulatedSize.x),
        max(0.0, availableSize.y - accumulatedSize.y))

      child.measure(childConstraint)
      let childDesiredSize = child.getDesiredSize()

      let dock = child.getDock()
      switch (dock)
        case Dock.LEFT | Dock.RIGHT
          panelSize.y = max(panelSize.y, accumulatedSize.y + childDesiredSize.y)
          accumulatedSize.x += childDesiredSize.x
        case Dock.BOTTOM | Dock.TOP
          panelSize.x = max(panelSize.x, accumulatedSize.x + childDesiredSize.x)
          accumulatedSize.y += childDesiredSize.y

      i++
    //}

    panelSize.x = max(panelSize.x, accumulatedSize.x)
    panelSize.y = max(panelSize.y, accumulatedSize.y)

    return panelSize

  // --------------------------------------------------------------------------
  override function arrangeOverride(vec2 arrangeSize) returns vec2

    var accumulated = ZEROTHICK
    let childCount = m_children.size()
    let nonFillChildrenCount = childCount - (m_lastChildFill ? 1 : 0)
    var i = 0

    for child in m_children
    //{
      let childDesiredSize = child.getDesiredSize()
      var rcChild = rectr(
        accumulated.left,
        accumulated.bottom,
        max(0., arrangeSize.x - accumulated.width()),
        max(0., arrangeSize.y - accumulated.height()))

      if (i < nonFillChildrenCount)
      //{
        let dock = child.getDock()
        switch (dock)
          case Dock.LEFT
            accumulated.left += childDesiredSize.x
            rcChild.width = childDesiredSize.x
          case Dock.RIGHT
            accumulated.right += childDesiredSize.x
            rcChild.x = max(0., arrangeSize.x - accumulated.right)
            rcChild.width = childDesiredSize.x
          case Dock.BOTTOM
            accumulated.bottom += childDesiredSize.y
            rcChild.height = childDesiredSize.y
          case Dock.TOP
            accumulated.top += childDesiredSize.y
            rcChild.y = max(0., arrangeSize.y - accumulated.top)
            rcChild.height = childDesiredSize.y
      //}

      child.arrange(rcChild)

      i++
    //}

    return arrangeSize

// ============================================================================
public function Frame.setDock(Dock dock)
  m_frameToDockLookup.put(this, dock)

// ============================================================================
public function Frame.getDock() returns Dock
  if (m_frameToDockLookup.has(this))
    return m_frameToDockLookup.get(this)
  return Dock.LEFT