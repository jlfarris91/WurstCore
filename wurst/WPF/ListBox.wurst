package ListBox
import Panel
import Frame
import Layout
import Vector
import ClosureFrames
import Range
import Object
import StackPanel
import Execute

tuple scrollbarState(int value, rangeInt range, bool show)

// ============================================================================
public class ListBox extends Panel
  private StackPanel m_stackPanel
  
  private real m_spacing
  private bool m_needsRebuild

  private Vector<object> m_itemsSource
  private IFrameTemplate m_itemFrameTemplate
  private Vector<Frame> m_itemFrames
  private Vector<Frame> m_itemFramesPool
  private real m_itemSize
  private int m_lastItemsSourceCount
  
  private rangeInt m_viewport
  private scrollbarState m_scrollbarState

  private framehandle m_verticalScrollBar
  private framehandle m_horizontalScrollBar
  private framehandle m_scrollBar
  private framehandle m_scrollingBackdrop

  // --------------------------------------------------------------------------
  construct()
    _construct()

  // --------------------------------------------------------------------------
  construct(string name)
    super(name)
    _construct()

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_itemFrames

  // --------------------------------------------------------------------------
  private function _construct()
    m_itemsSource = null
    m_itemFrames = new Vector<Frame>()
    m_itemFramesPool = new Vector<Frame>()

    let frameHandle = getFrameHandle()

    m_stackPanel = new StackPanel()
    m_stackPanel.getFrameHandle().setParent(getFrameHandle())

    // Just exists to capture the mouse wheel scroll event
    m_scrollingBackdrop = createFrame("SLIDER", "BackdropScrollCapture", GAME_UI, "", 0)
      ..setLevel(1) // above items
      ..onMouseWheel(() -> onMouseWheel())
      ..setParent(frameHandle)
      ..hide()

    m_verticalScrollBar = createFrame("VerticalSliderTemplate")
      ..onSliderValueChange(() -> updateViewport())
      ..onMouseWheel(() -> onMouseWheel())
      ..setParent(frameHandle)
      ..setWidth(0.012)
      ..setPoint(FRAMEPOINT_BOTTOMRIGHT, frameHandle, FRAMEPOINT_BOTTOMRIGHT)
      ..setPoint(FRAMEPOINT_TOPRIGHT, frameHandle, FRAMEPOINT_TOPRIGHT)
      ..hide()

    m_horizontalScrollBar = createFrame("HorizontalSliderTemplate")
      ..onSliderValueChange(() -> updateViewport())
      ..onMouseWheel(() -> onMouseWheel())
      ..setParent(frameHandle)
      ..setHeight(0.012)
      ..setPoint(FRAMEPOINT_BOTTOMLEFT, frameHandle, FRAMEPOINT_BOTTOMLEFT)
      ..setPoint(FRAMEPOINT_BOTTOMRIGHT, frameHandle, FRAMEPOINT_BOTTOMRIGHT)
      ..hide()

    updateScrollBarFrame()

  // --------------------------------------------------------------------------
  function getOrientation() returns LayoutOrientation
    return m_stackPanel.getOrientation()

  // --------------------------------------------------------------------------
  function setOrientation(LayoutOrientation value)
    if (getOrientation() != value)
      m_stackPanel.setOrientation(value)
      updateScrollBarFrame()

  // --------------------------------------------------------------------------
  function getItemFrameTemplate() returns IFrameTemplate
    return m_itemFrameTemplate
  
  // --------------------------------------------------------------------------
  function setItemFrameTemplate(IFrameTemplate value)
    if (m_itemFrameTemplate != value)
      m_itemFrameTemplate = value
      destroyItemFrames()
      m_needsRebuild = true

  // --------------------------------------------------------------------------
  function getItemsSource() returns Vector<object>
    return m_itemsSource

  // --------------------------------------------------------------------------
  function setItemsSource(Vector<object> itemsSource)
    if (m_itemsSource != itemsSource)
      m_itemsSource = itemsSource
      onItemSourceChanged()

  // --------------------------------------------------------------------------
  function onItemSourceChanged()
    let itemsSourceCount = getItemsSourceCount()

    // log("onItemSourceChanged", "l: " + m_lastItemsSourceCount.toString() + " c: " + itemsSourceCount.toString())

    if (m_lastItemsSourceCount != itemsSourceCount)
      tryUpdateItems(getSize())
      updateScrollbar()

    // always update the viewport since an item in the items source vector
    // could have changed
    updateViewport()

    m_lastItemsSourceCount = itemsSourceCount

  // --------------------------------------------------------------------------
  private function getItemsSourceCount() returns int
    return m_itemsSource != null ? m_itemsSource.size() : 0

  // --------------------------------------------------------------------------
  private function updateScrollBarFrame()
    let orientation = getOrientation()
    let isHorizontal = orientation == LEFTTORIGHT or orientation == RIGHTTOLEFT
    let scrollBar = isHorizontal ? m_horizontalScrollBar : m_verticalScrollBar
    
    if (scrollBar == m_scrollBar)
      return
    
    if (m_scrollBar != null)
      m_scrollBar.hide()
    
    m_scrollBar = scrollBar
    
    // log("updateScrollBarFrame")

    m_scrollBar.show()

    m_scrollingBackdrop.setPoint(FRAMEPOINT_BOTTOMLEFT, getFrameHandle(), FRAMEPOINT_BOTTOMLEFT, isHorizontal ? vec2(0, m_scrollBar.getHeight()) : ZERO2)
    m_scrollingBackdrop.setPoint(FRAMEPOINT_TOPRIGHT, getFrameHandle(), FRAMEPOINT_TOPRIGHT, isHorizontal ? ZERO2 : vec2(-m_scrollBar.getWidth(), 0))

    invalidateMeasure()
    
  // --------------------------------------------------------------------------
  private function tryUpdateItems(vec2 size)
    let orientation = getOrientation()
    let isHorizontal = orientation == LayoutOrientation.LEFTTORIGHT or orientation == LayoutOrientation.RIGHTTOLEFT
    let newMaxNumberItems = getMaxNumberOfItems(m_itemSize, isHorizontal ? size.x : size.y)
    if (getNeverMeasured() or m_needsRebuild or newMaxNumberItems != m_itemFrames.size())
      executeRebuildItems(size)

  // --------------------------------------------------------------------------
  override protected function onRenderSizeChanged(SizeChangedInfo info)
    tryUpdateItems(getSize())

  // --------------------------------------------------------------------------
  private function executeRebuildItems(vec2 size)
    execute(() -> rebuildItems(size))
  
  // --------------------------------------------------------------------------
  private function rebuildItems(vec2 size)

    // log("rebuildItems", "size: " + size.toString())

    let itemFrameTemplate = getItemFrameTemplate()
    if (itemFrameTemplate == null)
      return

    let orientation = getOrientation()
    let isHorizontal = orientation == LayoutOrientation.LEFTTORIGHT or orientation == LayoutOrientation.RIGHTTOLEFT
    let panelSize = isHorizontal ? size.x : size.y

    if (m_itemFrames.isEmpty())
      let firstItemFrame = getNewItemFrame(itemFrameTemplate)
      if (firstItemFrame == null)
        return
      m_itemFrames.add(firstItemFrame)
      firstItemFrame.measure(size)
      let itemFrameMeasuredSize = firstItemFrame.getMeasuredSize()      
      m_itemSize = isHorizontal ? itemFrameMeasuredSize.x : itemFrameMeasuredSize.y

    let maxNumItems = getMaxNumberOfItems(m_itemSize, panelSize)
    m_spacing = getSpacing(m_itemSize, panelSize)

    // log("rebuildItems", "itemSize: " + m_itemSize.toString())
    // log("rebuildItems", "panelSize: " + panelSize.toString())
    // log("rebuildItems", "maxNumItems: " + maxNumItems.toString())

    var added = 0
    var removed = 0

    while (m_itemFrames.size() < maxNumItems)
      let frame = getNewItemFrame(itemFrameTemplate)
      m_itemFrames.add(frame)
      frame.show()
      added++

    while (m_itemFrames.size() > maxNumItems)
      let frame = m_itemFrames.pop()
      m_itemFramesPool.add(frame)
      frame.hide()
      removed++

    // log("rebuildItems", "m_itemFrames: " + m_itemFrames.size().toString())
    // log("rebuildItems", "a: {0} r: {1}".format(added.toString(), removed.toString()))

    m_needsRebuild = false

    updateScrollbar()

  // --------------------------------------------------------------------------
  override function measureOverride(vec2 availableSize) returns vec2

    var stackPanelSize = availableSize
    let orientation = getOrientation()
    let isHorizontal = orientation == LayoutOrientation.LEFTTORIGHT or orientation == LayoutOrientation.RIGHTTOLEFT

    var scrollBarSize = 0.0
    if (m_scrollbarState.show)
      scrollBarSize = isHorizontal ? m_scrollBar.getHeight() : m_scrollBar.getWidth()

    if (isHorizontal)
      stackPanelSize.x = m_itemSize
      if (m_scrollbarState.show)
        stackPanelSize.y -= scrollBarSize
    else
      stackPanelSize.y = m_itemSize
      if (m_scrollbarState.show)
        stackPanelSize.x -= scrollBarSize

    m_stackPanel.measure(stackPanelSize)

    return m_stackPanel.getMeasuredSize()

  // --------------------------------------------------------------------------
  override function arrangeOverride(vec2 arrangeSize) returns vec2

    let frameHandle = getFrameHandle()
    let orientation = getOrientation()
    let isHorizontal = orientation == LayoutOrientation.LEFTTORIGHT or orientation == LayoutOrientation.RIGHTTOLEFT
    var stackPanelSize = arrangeSize
    
    var scrollBarSize = 0.0
    if (m_scrollbarState.show)
    //{
      scrollBarSize = isHorizontal ? m_scrollBar.getHeight() : m_scrollBar.getWidth()

      if (isHorizontal)
        m_scrollBar.setWidth(arrangeSize.x) // scroll bars need both width and height set to work properly
        stackPanelSize.y -= scrollBarSize
      else
        m_scrollBar.setHeight(arrangeSize.y)
        stackPanelSize.x -= scrollBarSize
    //}

    let stackPanelHandle = m_stackPanel.getFrameHandle()
    
    stackPanelHandle.clearAllPoints()
    stackPanelHandle.setPoint(FRAMEPOINT_BOTTOMLEFT, frameHandle, FRAMEPOINT_BOTTOMLEFT, isHorizontal ? vec2(0, scrollBarSize) : ZERO2)

    m_stackPanel.arrange(stackPanelSize)

    return arrangeSize

  // --------------------------------------------------------------------------
  private static function getMaxNumberOfItems(real rowHeight, real totalHeight) returns int
    return rowHeight != 0 ? (totalHeight / rowHeight).floor() : 1

  // --------------------------------------------------------------------------
  private static function getSpacing(real rowHeight, real totalHeight) returns real
    if (rowHeight == 0)
      return 0
    let rowsAbs = totalHeight / rowHeight
    let rowsFloor = rowsAbs.floor()
    if (rowsFloor <= 1)
      return 0
    return ((rowsAbs - rowsFloor) * rowHeight) / (rowsFloor - 1)

  // --------------------------------------------------------------------------
  function getNewItemFrame(IFrameTemplate itemFrameTemplate) returns Frame
    Frame frame
    if (not m_itemFramesPool.isEmpty())
      frame = m_itemFramesPool.pop()
    else
      frame = itemFrameTemplate.createFrame()
      m_stackPanel.addChild(frame)
    return frame

  // --------------------------------------------------------------------------
  private function destroyItemFrames()
    while (m_itemFrames.isEmpty() == false)
      let childFrame = m_itemFrames.pop()
      m_stackPanel.removeChild(childFrame)
      destroy childFrame
    while (m_itemFramesPool.isEmpty() == false)
      destroy m_itemFramesPool.pop()

  // --------------------------------------------------------------------------
  private function updateScrollbar()

    var next = m_scrollbarState
    next.value = m_scrollBar != null ? m_scrollBar.getValue().floor() : 0

    next = updateScrollbarState(
      m_itemFrames.size(),
      getItemsSourceCount(),
      next)

    var updateViewport = false

    if (m_scrollbarState.range != next.range)
      // log("updateScrollbar", "min/max " + next.range.toString())
      m_scrollBar.setMinMax(next.range.min.toReal(), next.range.max.toReal())
      updateViewport = true

    if (m_scrollbarState.value != next.value)
      // log("updateScrollbar", "value " + next.value.toString())
      m_scrollBar.setValue(next.value.toReal())
      updateViewport = true

    if (updateViewport)
      updateViewport()

    if (m_scrollbarState.show != next.show)
      // log("updateScrollbar", "visibility " + next.show.toString())
      m_scrollBar.setVisible(next.show)
      m_scrollingBackdrop.setVisible(next.show)
      invalidateMeasure()

    m_scrollbarState = next

  // --------------------------------------------------------------------------
  private static function updateScrollbarState(int viewportSize, int itemsSourceCount, scrollbarState current) returns scrollbarState
    var result = current
    let viewportStart = max(((current.range.max + viewportSize - 1) - current.value), 0)
    result.range = rangeInt(0, max((itemsSourceCount - 1) - viewportSize, 0))
    result.value = max(((itemsSourceCount - 1) - viewportStart), 0)
    result.show = viewportSize < itemsSourceCount
    return result

  // --------------------------------------------------------------------------
  private function updateViewport()
    // let itemsSourceCount = getItemsSourceCount()
    let viewportStart = max((m_scrollbarState.range.max - m_scrollBar.getValue()).floor(), 0)
    let viewportLength = m_itemFrames.size()
    let next = rangeInt(viewportStart, viewportStart + viewportLength)
    // log("updateViewport", "c: " + m_viewport.toString() + " next: " + next.toString())
    // if (next == m_viewport and m_lastItemsSourceCount == itemsSourceCount)
    //   return
    m_viewport = next
    updateFrames()

  // --------------------------------------------------------------------------
  private function updateFrames()
    // log("updateFrames",  "")
    let itemsSourceCount = getItemsSourceCount()
    for i = 0 to m_viewport.getLength() - 1
    //{
      let childFrame = m_itemFrames.get(i)
      let itemIndex = m_viewport.min + i
      if (itemIndex < itemsSourceCount)
        // Log.info(i.toString() + " -> " + m_itemsSource.get(itemIndex).toString())
        childFrame.setDataContext(m_itemsSource.get(itemIndex))
        childFrame.show()
      else
        // Log.info(i.toString() + " -> NULL")
        childFrame.setDataContext(NULL)
        childFrame.hide()
    //}

  // --------------------------------------------------------------------------
  private function onMouseWheel()
    let scrollValue = BlzGetTriggerFrameValue()
    let newScrollValue = m_scrollBar.getValue() + (scrollValue / 120.0).floor()
    m_scrollBar.setValue(newScrollValue)
    // log("onMouseWheel", "setValue")