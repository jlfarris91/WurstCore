package ListBox
import Frame
import Vector
import Layout
import Panel
import Object
import ClosureFrames
import Range

// ============================================================================
public class ListBox extends Panel
  private LayoutOrientation m_orientation = LayoutOrientation.TOPTOBOTTOM
  private Vector<ObjectRef> m_itemsSource
  private FrameTemplate m_itemFrameTemplate
  private Frame m_scrollBar
  private Vector<Frame> m_itemFrames
  private bool m_showScrollbar
  private real m_itemSize
  private real m_spacing
  private rangeReal m_scrollBarMinMax
  private bool m_needsRebuild

  private framehandle m_scrollBarHandle
  private framehandle m_scrollingBackdrop

  // --------------------------------------------------------------------------
  construct()
    m_itemsSource = null
    m_itemFrames = new Vector<Frame>()

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_itemFrames

  // --------------------------------------------------------------------------
  function getOrientation() returns LayoutOrientation
    return m_orientation

  // --------------------------------------------------------------------------
  function setOrientation(LayoutOrientation value)
    if (m_orientation != value)
      m_orientation = value
      m_needsRebuild = true

  // --------------------------------------------------------------------------
  function getItemFrameTemplate() returns FrameTemplate
    return m_itemFrameTemplate
  
  // --------------------------------------------------------------------------
  function setItemFrameTemplate(FrameTemplate value)
    if (m_itemFrameTemplate != value)
      m_itemFrameTemplate = value
      m_needsRebuild = true

  // --------------------------------------------------------------------------
  function getItemsSource() returns Vector<ObjectRef>
    return m_itemsSource

  // --------------------------------------------------------------------------
  function setItemsSource(Vector<ObjectRef> itemsSource)
    if (m_itemsSource != itemsSource)
      m_itemsSource = itemsSource
      onItemSourceChanged()

  // --------------------------------------------------------------------------
  function onItemSourceChanged()
    if (getIsInitialized() == true)
      updateScrollbar()
      updateViewport()

  // --------------------------------------------------------------------------
  override function onInitialize()
    super.onInitialize()

    // Just exists to capture the mouse wheel scroll event
    m_scrollingBackdrop = createFrame("SLIDER", "BackdropScrollCapture", GAME_UI, "", 0)
      ..setLevel(1) // above items
      ..onMouseWheel(() -> onMouseWheel())
      ..setParent(m_handle)
      ..hide()

    m_scrollBarHandle = createFrame("VerticalSliderTest")
      ..onSliderValueChange(() -> updateViewport())
      ..onMouseWheel(() -> onMouseWheel())
      ..setParent(m_handle)

    m_scrollBar = new Frame(m_scrollBarHandle)
      ..setWidth(0.012)
      ..setHeight(0.012)
      ..initialize()
      ..setVisibility(FrameVisibility.HIDDEN)
    addLogicalChild(m_scrollBar)
  
  // --------------------------------------------------------------------------
  private function rebuildItems(vec2 size)

    destroyItemFrames()

    let itemFrameTemplate = getItemFrameTemplate()
    if (itemFrameTemplate == null)
      return

    let firstItemFrame = itemFrameTemplate.createFrame()
    if (firstItemFrame == null)
      return

    addItemFrame(firstItemFrame)
    firstItemFrame.measure(vec2(REAL_MAX, REAL_MAX))

    let itemFrameDesiredSize = firstItemFrame.getDesiredSize()    
    let isHorizontal = m_orientation == LayoutOrientation.LEFTTORIGHT or m_orientation == LayoutOrientation.RIGHTTOLEFT
    m_itemSize = isHorizontal ? itemFrameDesiredSize.x : itemFrameDesiredSize.y
    let panelSize = isHorizontal ? size.x : size.y

    let maxNumItems = getMaxNumberOfItems(m_itemSize, panelSize)
    m_spacing = getSpacing(m_itemSize, panelSize)

    m_itemFrames.resize(maxNumItems)

    for i = 1 to maxNumItems - 1
      let childFrame = itemFrameTemplate.createFrame()
      addItemFrame(childFrame)

    m_needsRebuild = false

    updateScrollbar()

  // --------------------------------------------------------------------------
  override function measureOverride(vec2 availableSize) returns vec2

    if (getNeverMeasured() or m_needsRebuild)
      rebuildItems(availableSize)

    var childSize = availableSize
    let isHorizontal = m_orientation == LayoutOrientation.LEFTTORIGHT or m_orientation == LayoutOrientation.RIGHTTOLEFT
    
    if (m_showScrollbar)
      m_scrollBar.measure(availableSize)

    if (m_children.size() > 0)

      if (isHorizontal)
        childSize.x = m_itemSize
        if (m_showScrollbar)
          childSize.y -= m_scrollBar.getDesiredSize().y
      else
        childSize.y = m_itemSize
        if (m_showScrollbar)
          childSize.x -= m_scrollBar.getDesiredSize().x

      for i = 0 to m_children.size() - 1
        let childFrame = m_children.get(i)
        childFrame.measure(childSize)

    return availableSize

  // --------------------------------------------------------------------------
  override function arrangeOverride(vec2 arrangeSize) returns vec2

    let isHorizontal = m_orientation == LayoutOrientation.LEFTTORIGHT or m_orientation == LayoutOrientation.RIGHTTOLEFT
    let layoutDir = m_orientation.getLayoutDir()
    var childRect = rectr(0, 0, arrangeSize.x, arrangeSize.y)
    var scrollBarSize = 0.
    var prevChildSize = 0.    

    if (m_showScrollbar)
    //{
      scrollBarSize = isHorizontal ? m_scrollBar.getDesiredSize().y : m_scrollBar.getDesiredSize().x
      let scrollBarRect = isHorizontal
        ? rectr(0, 0, arrangeSize.x, scrollBarSize)
        : rectr(arrangeSize.x - scrollBarSize, 0, scrollBarSize, arrangeSize.y)
      m_scrollBar.arrange(scrollBarRect)

      m_scrollingBackdrop.setPoint(FRAMEPOINT_BOTTOMLEFT, m_handle, FRAMEPOINT_BOTTOMLEFT, isHorizontal ? vec2(0, scrollBarSize) : ZERO2)
      m_scrollingBackdrop.setPoint(FRAMEPOINT_TOPRIGHT, m_handle, FRAMEPOINT_TOPRIGHT, isHorizontal ? ZERO2 : vec2(-scrollBarSize, 0))
    //}

    if (m_orientation == RIGHTTOLEFT)
      childRect.x = arrangeSize.x - m_itemSize
      childRect.y += scrollBarSize
      childRect.height -= scrollBarSize
    else if (m_orientation == TOPTOBOTTOM)
      childRect.y = arrangeSize.y - m_itemSize
      childRect.width -= scrollBarSize

    for childFrame in m_children
      let childDesiredSize = childFrame.getDesiredSize()

      if (isHorizontal)
        childRect.x += (prevChildSize + m_spacing) * layoutDir.x
        prevChildSize = childDesiredSize.x
        childRect.width = prevChildSize
        childRect.height = max(arrangeSize.y - scrollBarSize, childDesiredSize.y)
      else
        childRect.y += (prevChildSize + m_spacing) * layoutDir.y
        prevChildSize = childDesiredSize.y
        childRect.height = prevChildSize
        childRect.width = max(arrangeSize.x - scrollBarSize, childDesiredSize.x)

      childFrame.arrange(childRect)

    return arrangeSize

  // --------------------------------------------------------------------------
  private static function getMaxNumberOfItems(real rowHeight, real totalHeight) returns int
    return (totalHeight / rowHeight).floor()

  // --------------------------------------------------------------------------
  private static function getSpacing(real rowHeight, real totalHeight) returns real
    let rowsAbs = totalHeight / rowHeight
    let rowsFloor = rowsAbs.floor()
    return ((rowsAbs - rowsFloor) * rowHeight) / (rowsFloor - 1)

  // --------------------------------------------------------------------------
  private function addItemFrame(Frame frame)
    addChild(frame)
    m_itemFrames.add(frame)

  // --------------------------------------------------------------------------
  private function destroyItemFrames()
    while (m_itemFrames.isEmpty() == false)
      let childFrame = m_itemFrames.pop()
      removeChild(childFrame)
      destroy childFrame

  // --------------------------------------------------------------------------
  private function updateScrollbar()
    let itemFramesCount = m_itemFrames.getCount()
    let itemSourceCount = m_itemsSource != null ? m_itemsSource.getCount() : 0
    let viewportSize = itemFramesCount

    let prevScrollValue = m_scrollBarHandle.getValue()
    let viewportStart = max(((m_scrollBarMinMax.max + viewportSize - 1) - prevScrollValue).floor(), 0)

    let scrollBarMax = max(itemSourceCount - viewportSize, 0).toReal()
    m_scrollBarMinMax = rangeReal(0, scrollBarMax)
    m_scrollBarHandle.setMinMax(0, scrollBarMax)

    let nextScrollValue = max(((itemSourceCount - 1) - viewportStart), 0)
    m_scrollBarHandle.setValue(nextScrollValue.toReal())

    let wasShowingScrollBar = m_showScrollbar
    m_showScrollbar = itemFramesCount < itemSourceCount
    
    if (m_showScrollbar != wasShowingScrollBar)
      invalidateMeasure()
      invalidateArrange()
      updateViewport()
      m_scrollBar.setVisibility(m_showScrollbar ? FrameVisibility.VISIBLE : FrameVisibility.COLLAPSED)
      m_scrollingBackdrop.setVisible(m_showScrollbar)

  // --------------------------------------------------------------------------
  private function updateViewport()
    let scrollValue = m_scrollBarHandle.getValue()
    let viewportStart = max((m_scrollBarMinMax.max - scrollValue).round(), 0)
    let itemFramesCount = m_itemFrames.getCount()
    let itemSourceCount = m_itemsSource != null ? m_itemsSource.getCount() : 0

    for i = 0 to itemFramesCount - 1
      let childFrame = m_itemFrames.getItem(i)
      let itemIndex = viewportStart + i
      if (itemIndex < itemSourceCount)
        childFrame.setDataContext(m_itemsSource.getItem(itemIndex).getObject())
        childFrame.setVisibility(FrameVisibility.VISIBLE)
        childFrame.show()
      else
        childFrame.setVisibility(FrameVisibility.COLLAPSED)

  // --------------------------------------------------------------------------
  private function onMouseWheel()
    let scrollValue = BlzGetTriggerFrameValue()
    let newScrollValue = m_scrollBarHandle.getValue() + (scrollValue / 120.0).floor()
    m_scrollBarHandle.setValue(newScrollValue)