package Grid
import Panel
import HashMap
import Frame
import Vector
import Math
import Layout

HashMap<Frame, int> m_frameToColumnMap = new HashMap<Frame, int>()
HashMap<Frame, int> m_frameToRowMap = new HashMap<Frame, int>()

public enum GridSizeMode
  FIXED
  AUTO
  STAR

// ============================================================================
public class ColumnDefinition
  private real m_width
  private GridSizeMode m_mode

  // --------------------------------------------------------------------------
  construct(real width)
    m_width = width

  // --------------------------------------------------------------------------
  function getFixedWidth() returns real
    return m_width

// ============================================================================
public class RowDefinition
  private real m_height
  private GridSizeMode m_mode

  // --------------------------------------------------------------------------
  construct(real height)
    m_height = height

  // --------------------------------------------------------------------------
  function getFixedHeight() returns real
    return m_height

// ============================================================================
public class Grid extends Panel
  private Vector<ColumnDefinition> m_columnDefinitions
  private Vector<RowDefinition> m_rowDefinitions

  // --------------------------------------------------------------------------
  construct()
    m_columnDefinitions = new Vector<ColumnDefinition>()
    m_rowDefinitions = new Vector<RowDefinition>()

  // --------------------------------------------------------------------------
  ondestroy
    while m_columnDefinitions.isEmpty() == false
      destroy m_columnDefinitions.pop()
    m_columnDefinitions = null

    while m_rowDefinitions.isEmpty() == false
      destroy m_rowDefinitions.pop()
    m_rowDefinitions = null

  // --------------------------------------------------------------------------
  function addColumnDefinition(ColumnDefinition columnDefinition)
    m_columnDefinitions.add(columnDefinition)

  // --------------------------------------------------------------------------
  function addRowDefinition(RowDefinition rowDefinition)
    m_rowDefinitions.add(rowDefinition)

  // --------------------------------------------------------------------------
  override function measureOverride(vec2 availableSize) returns vec2
    for childFrame in m_children
      let row = clamp(childFrame.getGridRow(), 0, min(m_rowDefinitions.getCount() - 1, 0))
      let col = clamp(childFrame.getGridColumn(), 0, min(m_columnDefinitions.getCount() - 1, 0))
      let cellArea = getCellArea(availableSize, row, col)
      childFrame.measure(cellArea.size())
    return availableSize

  // --------------------------------------------------------------------------
  override function arrangeOverride(vec2 arrangeSize) returns vec2
    for childFrame in m_children
      let row = clamp(childFrame.getGridRow(), 0, min(m_rowDefinitions.getCount() - 1, 0))
      let col = clamp(childFrame.getGridColumn(), 0, min(m_columnDefinitions.getCount() - 1, 0))
      let cellArea = getCellArea(arrangeSize, row, col)
      childFrame.arrange(cellArea)
    return arrangeSize

  // --------------------------------------------------------------------------
  private function getCellArea(vec2 availableSize, int row, int col) returns rectr
    let rowDefs = m_rowDefinitions.getCount()
    let colDefs = m_columnDefinitions.getCount()
    var cellArea = ZERORECTR
    cellArea.height = (row < rowDefs) ? m_rowDefinitions.getItem(row).getFixedHeight() : availableSize.y
    cellArea.width = (col < colDefs) ? m_columnDefinitions.getItem(col).getFixedWidth() : availableSize.x
    for r = 0 to row - 1
      cellArea.y += (r < rowDefs) ? m_rowDefinitions.getItem(r).getFixedHeight() : 0
    for c = 0 to col - 1
      cellArea.x += (c < colDefs) ? m_columnDefinitions.getItem(c).getFixedWidth() : 0
    return cellArea

// ============================================================================
public function Frame.getGridColumn() returns int
  return m_frameToColumnMap.get(this)

// ============================================================================
public function Frame.setGridColumn(int column)
  m_frameToColumnMap.put(this, column)

// ============================================================================
public function Frame.getGridRow() returns int
  return m_frameToRowMap.get(this)

// ============================================================================
public function Frame.setGridRow(int row)
  m_frameToRowMap.put(this, row)