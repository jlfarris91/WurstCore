package TabPanel
import Panel
import DockPanel
import WrapPanel
import HashMap
import Frame
import Layout
import ClosureFrames
import LinkedList
import ErrorHandling

constant string array BACKDROP_IMAGES = [
  "UI\\Widgets\\BattleNet\\bnet-tab-empty",
  "UI\\Widgets\\BattleNet\\bnet-tab-down",
  "UI\\Widgets\\BattleNet\\bnet-tab-up"
]

public enum TabPanelButtonState
  EMPTY
  DOWN
  UP

// ============================================================================
public class TabPanelButton extends Frame
  private framehandle m_backdropFrame
  private framehandle m_backdropDisabledFrame
  private TabPanelButtonState m_state

  // --------------------------------------------------------------------------
  construct()
    super(createFrame("TabPanelButtonTemplate"))
    m_backdropFrame = getFrame("TabPanelButtonBackdrop")
    m_backdropDisabledFrame = getFrame("TabPanelButtonDisabledBackdrop")
    m_state = EMPTY

  // --------------------------------------------------------------------------
  function setState(TabPanelButtonState state)
    m_state = state
    m_backdropFrame.setTexture(BACKDROP_IMAGES[state castTo int], 0, true)
    m_backdropDisabledFrame.setTexture(BACKDROP_IMAGES[state castTo int], 0, true)

  // --------------------------------------------------------------------------
  function getState() returns TabPanelButtonState
    return m_state

// ============================================================================
public class TabPanel extends DockPanel
  private WrapPanel m_buttonPanel
  private Panel m_fillPanel
  private HashMap<string, TabPanelButton> m_buttonFrameMap = new HashMap<string, TabPanelButton>()
  private HashMap<string, Frame> m_contentFrameMap = new HashMap<string, Frame>()
  private LinkedList<string> m_allIds = new LinkedList<string>()
  private string m_selectedFrameId
  private Frame m_selectedContentFrame
  private TabPanelButton m_selectedButtonFrame

  // --------------------------------------------------------------------------
  construct()
    super()
    _construct()

  // --------------------------------------------------------------------------
  construct(string name)
    super(name)
    _construct()

  // --------------------------------------------------------------------------
  private function _construct()

    setLastChildFills(true)

    m_buttonPanel = new WrapPanel("BP")
    ..setDock(Dock.TOP)
    ..setOrientation(Orientation.HORIZONTAL)
    ..setStretchItems(true)
    addChild(m_buttonPanel)

    m_fillPanel = new Panel("FP")
    ..setDock(Dock.BOTTOM)
    addChild(m_fillPanel)  

  // --------------------------------------------------------------------------
  function addContent(string id, Frame contentFrame)
    addContent(id, id, contentFrame)

  // --------------------------------------------------------------------------
  function addContent(string id, string buttonText, Frame contentFrame)
    let buttonFrame = new TabPanelButton()
    ..setText(buttonText)
    ..setWidth(0.05)
    ..setHeight(0.02)
    ..setState(TabPanelButtonState.DOWN)
    addContent(id, buttonFrame, contentFrame)

  // --------------------------------------------------------------------------
  function addContent(string id, TabPanelButton buttonFrame, Frame contentFrame)

    if (m_allIds.has(id))
      error("TabPanel already has content registered with id " + id)

    m_contentFrameMap.put(id, contentFrame)
    m_fillPanel.addChild(contentFrame)
    contentFrame.hide()

    m_buttonFrameMap.put(id, buttonFrame)
    m_buttonPanel.addChild(buttonFrame)
    buttonFrame.getFrameHandle().onClick(() -> onButtonClicked(buttonFrame, id))

  // --------------------------------------------------------------------------
  function removeContent(string id)
    let contentFrame = m_contentFrameMap.get(id)
    if (contentFrame != null)
      destroy contentFrame
    let buttonFrame = m_buttonFrameMap.get(id)
    if (buttonFrame != null)
      destroy buttonFrame
    m_allIds.remove(id)

  // --------------------------------------------------------------------------
  function removeAllContent()
    while (m_allIds.isEmpty() == false)
      removeContent(m_allIds.pop())

  // --------------------------------------------------------------------------
  function getContent(string id) returns Frame
    return m_contentFrameMap.get(id)

  // --------------------------------------------------------------------------
  function getAllContentIds() returns LinkedList<string>
    return m_allIds

  // --------------------------------------------------------------------------
  function getSelectedContentId() returns string
    return m_selectedFrameId

  // --------------------------------------------------------------------------
  function setSelectedContentId(string id)
    if (m_selectedFrameId == id)
      return
    
    if (m_selectedContentFrame != null)
      m_selectedContentFrame.hide()
      m_selectedContentFrame = null

    if (m_selectedButtonFrame != null)
      m_selectedButtonFrame.setState(TabPanelButtonState.DOWN)
    
    m_selectedFrameId = id
    m_selectedContentFrame = m_contentFrameMap.get(m_selectedFrameId)
    m_selectedButtonFrame = m_buttonFrameMap.get(m_selectedFrameId)

    if (m_selectedContentFrame != null)
      m_selectedContentFrame.show()

    if (m_selectedButtonFrame != null)
      m_selectedButtonFrame.setState(TabPanelButtonState.UP)

    invalidateMeasure()
  
  // --------------------------------------------------------------------------
  private function onButtonClicked(Frame buttonFrame, string id)
    buttonFrame.clearFocus()
    setSelectedContentId(id)