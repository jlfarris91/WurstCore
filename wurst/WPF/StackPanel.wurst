package StackPanel
import Panel
import StackLayout

// ============================================================================
public class StackPanel extends Panel
  private StackLayout m_layout = new StackLayout()

  // --------------------------------------------------------------------------
  function getLayoutOrientation() returns LayoutOrientation
    return m_layout.getOrientation()

  // --------------------------------------------------------------------------
  function setLayoutOrientation(LayoutOrientation value)
    if (m_layout.getOrientation() != value)
      m_layout.setOrientation(value)
      invalidateArrange()

  // --------------------------------------------------------------------------
  override function measureOverride(vec2 availableSize) returns vec2

    let orientation = m_layout.getOrientation()
    var stackDesiredSize = ZERO2
    var layoutSlotSize = availableSize
    let isHorizontal = orientation == LayoutOrientation.LEFTTORIGHT or orientation == LayoutOrientation.RIGHTTOLEFT
    let layoutDir = orientation.getLayoutDir()

    if (isHorizontal)
      layoutSlotSize.x = REAL_MAX
    else
      layoutSlotSize.y = REAL_MAX

    for child in m_children
    //{
      child.measure(layoutSlotSize)
      if (child.getVisibility() != FrameVisibility.COLLAPSED)
        let childDesiredSize = child.getDesiredSize()
        if (isHorizontal)
          stackDesiredSize.x += childDesiredSize.x * layoutDir.x
          stackDesiredSize.y = max(stackDesiredSize.y, childDesiredSize.y)
        else
          stackDesiredSize.x = max(stackDesiredSize.x, childDesiredSize.x)
          stackDesiredSize.y += childDesiredSize.y * layoutDir.y
    //}

    return stackDesiredSize

  // --------------------------------------------------------------------------
  override function arrangeOverride(vec2 arrangeSize) returns vec2

    m_layout.reset(rectr(ZERO2, arrangeSize))

    for child in m_children
    //{
      if (child.getVisibility() != FrameVisibility.COLLAPSED)
        let childArea = m_layout.arrange(child.getDesiredSize())
        child.arrange(childArea)
    //}

    return arrangeSize