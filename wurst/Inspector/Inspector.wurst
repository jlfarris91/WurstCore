package Inspector
import Inspection
import LinkedList
import ClosureTimers
import Frame
import StackPanelLayout
import PropertyEditors

InspectorFrame g_inspectorFrame

// ============================================================================
public abstract class InspectorRow extends Frame

  // --------------------------------------------------------------------------
  construct (string framename, framehandle owner)
    super(framename, owner)

// ============================================================================
public class InspectorEditorRow extends InspectorRow
  private IPropertyDescriptor m_descriptor
  private PropertyEditor m_editor
  private framehandle m_rowText
  private framehandle m_propertyEditorFrame

  // --------------------------------------------------------------------------
  construct(IPropertyDescriptor descriptor, PropertyEditor editor)
    super("InspectorRowTemplate", GAME_UI)
    m_descriptor = descriptor
    m_editor = editor

  // --------------------------------------------------------------------------
  ondestroy
    if (m_editor != null)
      destroy m_editor
      m_editor = null

  // --------------------------------------------------------------------------
  function getDescriptor() returns IPropertyDescriptor
    return m_descriptor

  // --------------------------------------------------------------------------
  function getEditor() returns PropertyEditor
    return m_editor

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()

    m_rowText = getFrame("InspectorRowText")
    m_rowText.setText(m_descriptor.getName())

    m_propertyEditorFrame = getFrame("InspectorEditorFrame")

    if (m_editor != null)
      m_editor.getFrameHandle()
      ..clearAllPoints()
      ..setAllPoints(m_propertyEditorFrame)
      ..setParent(m_propertyEditorFrame)
      ..show()

// ============================================================================
public class InspectorCategoryRow extends InspectorRow
  private string m_category
  private framehandle m_rowText

  // --------------------------------------------------------------------------
  construct(string category)
    super("InspectorCategoryRowTemplate", GAME_UI)
    m_category = category

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()

    m_rowText = getFrame("InspectorCategoryRowText")
    m_rowText.setText(m_category)

// ============================================================================
public class InspectorFrame extends Frame
  private LinkedList<int> m_contexts
  private LinkedList<InspectorRow> m_rows = new LinkedList<InspectorRow>()
  private framehandle m_rowsContainer
  private framehandle m_titleFrame
  private framehandle m_rowsContainerScrollBar

  // --------------------------------------------------------------------------
  construct()
    super("InspectorTemplate", GAME_UI)

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()

    m_rowsContainer = getFrame("InspectorRowsContainer")
    m_rowsContainerScrollBar = getFrame("InspectorRowsContainerScrollBar")
    
    m_titleFrame = getFrame("InspectorTitle")
    ..setText("Inspector")

  // --------------------------------------------------------------------------
  function setContexts(LinkedList<unit> contexts)
    if (m_contexts != null)
      destroy m_contexts
    m_contexts = new LinkedList<int>()
    for contextUnit in contexts
      m_contexts.add(unitToIndex(contextUnit))
    rebuild()

  // --------------------------------------------------------------------------
  function rebuild()
    destroyInspectorRows()
    buildInspectorRows()

  // --------------------------------------------------------------------------
  function refresh()
    for row in m_rows
      let editorRow = row castTo InspectorEditorRow
      if (editorRow != null)
        let editor = editorRow.getEditor()
        if (editor != null)
          editor.refresh()
  
  // --------------------------------------------------------------------------
  private function destroyInspectorRows()
    if (m_rows == null)
      return
    for row in m_rows
      row.getFrameHandle().setParent(null)
      destroy row
    m_rows.clear()

  // --------------------------------------------------------------------------
  private function buildInspectorRows()

    if (m_contexts == null)
      return

    // TODO: should not be hardcoded to units
    let descriptor = new UnitObjectDescriptor()
    let propertyDescriptors = new PropertyDescriptorCollection()
    for context in m_contexts
      descriptor.getPropertyDescriptors(context, propertyDescriptors)
    destroy descriptor

    for desc in propertyDescriptors
      addEditorRow(desc)

    let layout = new StackPanelLayout()
    layout.setOrientation(LayoutOrientation.DOWN)
    layout.setMargin(vec2(0.01, 0.01))
    layout.layoutBegin()

    for row in m_rows
      layout.layoutNextFrame(row.getFrameHandle(), m_rowsContainer)

    destroy layout

    refresh()

  // --------------------------------------------------------------------------
  private function addEditorRow(IPropertyDescriptor propertyDescriptor) returns InspectorEditorRow

    if (m_rows.size() == 15)
      return null

    let editor = buildEditor(propertyDescriptor)
    if (editor != null)
      editor.initialize()
      editor.setContexts(m_contexts)
      editor.setPropertyDescriptor(propertyDescriptor)
      editor.show()

    let row = new InspectorEditorRow(propertyDescriptor, editor)
    ..initialize()
    ..setParent(m_rowsContainer)
    ..show()

    row.getFrameHandle().setWidth(0.1)
    row.getFrameHandle().setHeight(0.022)

    m_rows.add(row)
    return row

  // --------------------------------------------------------------------------
  // private function addCategoryRow(string category) returns InspectorCategoryRow
  //   let row = new InspectorCategoryRow(category)
  //   ..initialize()
  //   ..setParent(m_listBoxFrame)
  //   m_rows.add(row)
  //   return row

  // --------------------------------------------------------------------------
  private function buildEditor(IPropertyDescriptor propertyDescriptor) returns PropertyEditor
    switch (propertyDescriptor.getEditorType())
      case "int"
        return new IntEditor()
      case "real"
        return new RealEditor()
      case "string"
        return new StringEditor()
    return null

// ============================================================================
public class Inspector

  // --------------------------------------------------------------------------
  static function getIsReady() returns bool
    return g_inspectorFrame != null

  // --------------------------------------------------------------------------
  static function setContext(unit context)
    if (not getIsReady())
      return
    let temp = new LinkedList<unit>()
    temp.add(context)
    g_inspectorFrame.setContexts(temp)
    destroy temp

  // --------------------------------------------------------------------------
  static function setContexts(LinkedList<unit> contexts)
    if (not getIsReady())
      return
    g_inspectorFrame.setContexts(contexts)

  // --------------------------------------------------------------------------
  static function rebuild()
    if (not getIsReady())
      return
    g_inspectorFrame.rebuild()

  // --------------------------------------------------------------------------
  static function refresh()
    if (not getIsReady())
      return
    g_inspectorFrame.refresh()

  // --------------------------------------------------------------------------
  static function getIsVisible() returns bool
    return g_inspectorFrame != null ? g_inspectorFrame.getIsVisible() : false

  // --------------------------------------------------------------------------
  static function show()
    if (not getIsReady())
      return
    g_inspectorFrame.show()

  // --------------------------------------------------------------------------
  static function hide()
    if (not getIsReady())
      return
    g_inspectorFrame.hide()

  // --------------------------------------------------------------------------
  static function initialize(player _player)
    if (g_inspectorFrame != null)
      return
    
    g_inspectorFrame = new InspectorFrame()
    ..setPlayer(_player)
    ..initialize()
    ..hide()

    let frame = g_inspectorFrame.getFrameHandle()
    frame.setAbsPoint(FRAMEPOINT_TOPRIGHT, 0.8, 0.54)
    frame.setSize(0.25, 0.34)

    doPeriodically(1.0) (CallbackPeriodic cb) ->
      Inspector.rebuild()

    doPeriodically(0.1) (CallbackPeriodic cb) ->
      Inspector.refresh()

// ============================================================================
init

  if (not loadTOCFile("Inspector.toc"))
    Log.warn("Failed to load Inspector.toc")