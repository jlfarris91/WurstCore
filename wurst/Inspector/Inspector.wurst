package Inspector
import Inspection
import LinkedList
import ClosureTimers
import Frame
import StackPanelLayout
import PropertyEditors
import Vector
import Range
import HashList
import HashMap

constant real INSPECTOR_WIDTH = 0.25
constant real INSPECTOR_HEIGHT = 0.34
constant real INSPECTOR_HEADER_HEIGHT = 0.03
constant real INSPECTOR_ROW_CONTAINER_MARGIN = 0.01
constant real INSPECTOR_ROW_CONTAINER_HEIGHT = INSPECTOR_HEIGHT - INSPECTOR_HEADER_HEIGHT - INSPECTOR_ROW_CONTAINER_MARGIN*2
constant real INSPECTOR_ROW_WIDTH = 0.25 - INSPECTOR_ROW_CONTAINER_MARGIN * 2
constant real INSPECTOR_ROW_HEIGHT = 0.022

InspectorFrame g_inspectorFrame

// ============================================================================
public abstract class InspectorRow extends Frame

  // --------------------------------------------------------------------------
  construct (string framename, framehandle owner)
    super(framename, owner)

  // --------------------------------------------------------------------------
  function refresh()

// ============================================================================
public interface IPropertyEditorFactory
  function createEditor(IPropertyDescriptor descriptor) returns PropertyEditor

// ============================================================================
public class InspectorEditorRow extends InspectorRow
  private IPropertyDescriptor m_descriptor
  private IPropertyEditorFactory m_editorFactory
  private IterableMap<string, PropertyEditor> m_editors
  private framehandle m_rowText
  private framehandle m_propertyEditorFrame
  private PropertyEditor m_activeEditor
  private LinkedList<int> m_contexts

  // --------------------------------------------------------------------------
  construct(IPropertyEditorFactory editorFactory)
    super("InspectorRowTemplate", GAME_UI)
    m_editorFactory = editorFactory
    m_editors = new IterableMap<string, PropertyEditor>()

  // --------------------------------------------------------------------------
  ondestroy
    for key in m_editors
      destroy m_editors.get(key)
    destroy m_editors

  // --------------------------------------------------------------------------
  function setDescriptor(IPropertyDescriptor descriptor)
    if (m_descriptor == descriptor)
      return

    m_descriptor = descriptor

    if (m_descriptor == null)
      m_rowText.setText("")
      deactivateActiveEditor()
      return

    m_rowText.setText(m_descriptor.getName())

    let editor = getOrAddEditor(descriptor)
    if (m_activeEditor == editor)
      m_activeEditor.setDescriptorAndContexts(descriptor, m_contexts)
    else
      activateEditor(editor)
  
  // --------------------------------------------------------------------------
  function setContexts(LinkedList<int> contexts)
    if (m_contexts != contexts)
      m_contexts = contexts
      if (m_activeEditor != null)
        m_activeEditor.setContexts(m_contexts)

  // --------------------------------------------------------------------------
  function setDescriptorAndContexts(IPropertyDescriptor descriptor, LinkedList<int> contexts)
    m_contexts = contexts
    setDescriptor(descriptor)

  // --------------------------------------------------------------------------
  function getDescriptor() returns IPropertyDescriptor
    return m_descriptor

  // --------------------------------------------------------------------------
  function getEditor(string editorType) returns PropertyEditor
    return m_editors.get(editorType)

  // --------------------------------------------------------------------------
  function addEditor(string editorType, PropertyEditor editor)
    m_editors.put(editorType, editor)
  
  // --------------------------------------------------------------------------
  override function refresh()
    for key in m_editors
      m_editors.get(key).refresh()

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()
    m_rowText = getFrame("InspectorRowText")
    m_propertyEditorFrame = getFrame("InspectorEditorFrame")

  // --------------------------------------------------------------------------
  private function getOrAddEditor(IPropertyDescriptor descriptor) returns PropertyEditor
    let editorType = descriptor.getEditorType()
    var editor = getEditor(editorType)
    if (editor == null)
      editor = m_editorFactory.createEditor(descriptor)
      editor.getFrameHandle()
        ..clearAllPoints()
        ..setAllPoints(m_propertyEditorFrame)
        ..setParent(m_propertyEditorFrame)
      addEditor(editorType, editor)
    return editor

  // --------------------------------------------------------------------------
  private function activateEditor(PropertyEditor editor) returns bool
    if (m_activeEditor != editor)
      deactivateActiveEditor()
      m_activeEditor = editor
      m_activeEditor..setDescriptorAndContexts(m_descriptor, m_contexts)..show()
      return true
    return false

  // --------------------------------------------------------------------------
  private function deactivateActiveEditor()
    if (m_activeEditor != null)
      m_activeEditor..hide()..setDescriptorAndContexts(null, null)
      m_activeEditor = null

// ============================================================================
public class InspectorCategoryRow extends InspectorRow
  private string m_category
  private framehandle m_rowText

  // --------------------------------------------------------------------------
  construct(string category)
    super("InspectorCategoryRowTemplate", GAME_UI)
    m_category = category

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()

    m_rowText = getFrame("InspectorCategoryRowText")
    m_rowText.setText(m_category)

// ============================================================================
public class PropertyEditorFactory implements IPropertyEditorFactory
  override function createEditor(IPropertyDescriptor descriptor) returns PropertyEditor
    switch (descriptor.getEditorType())
      case "int"
        return new IntEditor()..initialize()..hide()
      case "real"
        return new RealEditor()..initialize()..hide()
      case "string"
        return new StringEditor()..initialize()..hide()
    return null

// ============================================================================
public class InspectorFrame extends Frame
  private LinkedList<int> m_contexts
  private framehandle m_rowsContainer
  private framehandle m_titleFrame
  private framehandle m_rowsContainerScrollBar

  private int m_numRows
  private Vector<InspectorRow> m_rows

  private IPropertyEditorFactory m_propertyEditorFactory

  private HashList<IPropertyDescriptor> m_descriptors
  private rangeInt m_windowRange
  private Vector<IPropertyDescriptor> m_descriptorWindow

  // --------------------------------------------------------------------------
  construct()
    super("InspectorTemplate", GAME_UI)
    m_propertyEditorFactory = new PropertyEditorFactory()
    m_descriptors = new HashList<IPropertyDescriptor>()
    m_descriptorWindow = new Vector<IPropertyDescriptor>()
    m_rows = new Vector<InspectorRow>()

  // --------------------------------------------------------------------------
  ondestroy
    destroyInspectorRows()
    destroy m_propertyEditorFactory
    destroy m_descriptors
    destroy m_descriptorWindow
    destroy m_contexts

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()

    m_rowsContainer = getFrame("InspectorRowsContainer")
    m_rowsContainerScrollBar = getFrame("InspectorRowsContainerScrollBar")
    
    m_titleFrame = getFrame("InspectorTitle")
    ..setText("Inspector")

    rebuild()

  // --------------------------------------------------------------------------
  function setContexts(LinkedList<unit> contexts)
    if (m_contexts != null)
      destroy m_contexts
    m_contexts = new LinkedList<int>()
    for contextUnit in contexts
      m_contexts.add(unitToIndex(contextUnit))
    rebuild()

  // --------------------------------------------------------------------------
  function rebuild()
    buildInspectorRows()
    updatePropertyDescriptors()
    updateWindow()
    updateRows()

  // --------------------------------------------------------------------------
  function refresh()
    for row in m_rows
      row.refresh()
  
  // --------------------------------------------------------------------------
  private function destroyInspectorRows()
    if (m_rows == null)
      return
    for row in m_rows
      destroy row
    m_rows.clear()

  // --------------------------------------------------------------------------
  private function updatePropertyDescriptors()
    m_descriptors.clear()
    if (m_contexts != null)
      let propertyDescriptors = new PropertyDescriptorCollection(m_descriptors)
      let descriptor = new UnitObjectDescriptor()
      for context in m_contexts
        descriptor.getPropertyDescriptors(context, propertyDescriptors)
      destroy descriptor

  // --------------------------------------------------------------------------
  private function updateWindow()
    let descriptorsCount = m_descriptors.size()
  
    m_descriptorWindow.clear()
    m_descriptorWindow.resize(m_numRows)
    
    m_windowRange.min = max(min(m_windowRange.min, descriptorsCount - m_numRows), 0)
    m_windowRange.max = m_windowRange.min + m_numRows

    Log.info("Inspector", "updateWindow", "", "windowRange = " + m_windowRange.min.toString() + ", " + m_windowRange.max.toString() + " -> " + m_windowRange.getLength().toString())

    for i = 0 to m_windowRange.getLength() - 1
      let descIdx = m_windowRange.min + i
      if (descIdx >= descriptorsCount)
        break
      let descriptor = m_descriptors.get(descIdx)
      if (i < m_descriptorWindow.getCount())
        m_descriptorWindow.setItem(i, descriptor)
      else
        m_descriptorWindow.add(descriptor)
      Log.info("Inspector", "updateWindow", "", "window[{0}] -> {1} = {2}".format(i.toString(), descIdx.toString(), descriptor.getName()))

  // --------------------------------------------------------------------------
  private function updateRows()
    for i = 0 to m_descriptorWindow.getCount() - 1
      let descriptor = m_descriptorWindow.getItem(i)
      let row = i < m_rows.getCount() ? m_rows.getItem(i) : addEditorRow()
      (row castTo InspectorEditorRow)..setDescriptorAndContexts(descriptor, m_contexts)

  // --------------------------------------------------------------------------
  private function buildInspectorRows()

    if (m_contexts == null)
      return

    let numRows = getMaxNumberOfRows(INSPECTOR_ROW_HEIGHT, INSPECTOR_ROW_CONTAINER_HEIGHT)
    let spacing = getSpacing(INSPECTOR_ROW_HEIGHT, INSPECTOR_ROW_CONTAINER_HEIGHT)

    if (numRows == m_numRows)
      return
    
    destroyInspectorRows()

    m_numRows = numRows
    m_rows.resize(numRows)

    for i = 0 to m_numRows
      addEditorRow()

    let layout = new StackPanelLayout()
    layout.setOrientation(LayoutOrientation.DOWN)
    layout.setMargin(vec2(0.01, 0.01))
    layout.setSpacing(vec2(0.0, spacing))
    layout.layoutBegin()

    for row in m_rows
      layout.layoutNextFrame(row.getFrameHandle(), m_rowsContainer)

    destroy layout

  // --------------------------------------------------------------------------
  private static function getMaxNumberOfRows(real rowHeight, real totalHeight) returns int
    return (totalHeight / rowHeight).floor()

  // --------------------------------------------------------------------------
  private static function getSpacing(real rowHeight, real totalHeight) returns real
    let rowsAbs = totalHeight / rowHeight
    let rowsFloor = rowsAbs.floor()
    return ((rowsAbs - rowsFloor) * rowHeight) / (rowsFloor - 1)

  // --------------------------------------------------------------------------
  private function addEditorRow() returns InspectorEditorRow

    let row = new InspectorEditorRow(m_propertyEditorFactory)
    ..initialize()
    ..setParent(m_rowsContainer)
    ..show()

    row.getFrameHandle().setWidth(INSPECTOR_ROW_WIDTH)
    row.getFrameHandle().setHeight(INSPECTOR_ROW_HEIGHT)

    m_rows.add(row)
    return row

  // --------------------------------------------------------------------------
  // private function addCategoryRow(string category) returns InspectorCategoryRow
  //   let row = new InspectorCategoryRow(category)
  //   ..initialize()
  //   ..setParent(m_listBoxFrame)
  //   m_rows.add(row)
  //   return row

// ============================================================================
public class Inspector

  // --------------------------------------------------------------------------
  static function getIsReady() returns bool
    return g_inspectorFrame != null

  // --------------------------------------------------------------------------
  static function setContext(unit context)
    if (not getIsReady())
      return
    let temp = new LinkedList<unit>()
    temp.add(context)
    g_inspectorFrame.setContexts(temp)
    destroy temp

  // --------------------------------------------------------------------------
  static function setContexts(LinkedList<unit> contexts)
    if (not getIsReady())
      return
    g_inspectorFrame.setContexts(contexts)

  // --------------------------------------------------------------------------
  static function rebuild()
    if (not getIsReady())
      return
    g_inspectorFrame.rebuild()

  // --------------------------------------------------------------------------
  static function refresh()
    if (not getIsReady())
      return
    g_inspectorFrame.refresh()

  // --------------------------------------------------------------------------
  static function getIsVisible() returns bool
    return g_inspectorFrame != null ? g_inspectorFrame.getIsVisible() : false

  // --------------------------------------------------------------------------
  static function show()
    if (not getIsReady())
      return
    g_inspectorFrame.show()

  // --------------------------------------------------------------------------
  static function hide()
    if (not getIsReady())
      return
    g_inspectorFrame.hide()

  // --------------------------------------------------------------------------
  static function initialize(player _player)
    if (g_inspectorFrame != null)
      return
    
    g_inspectorFrame = new InspectorFrame()
    ..setPlayer(_player)
    ..initialize()
    ..hide()

    let frame = g_inspectorFrame.getFrameHandle()
    frame.setAbsPoint(FRAMEPOINT_TOPRIGHT, 0.8, 0.54)
    frame.setSize(INSPECTOR_WIDTH, INSPECTOR_HEIGHT)

    doPeriodically(1.0) (CallbackPeriodic cb) ->
      Inspector.rebuild()

    doPeriodically(0.1) (CallbackPeriodic cb) ->
      Inspector.refresh()

// ============================================================================
init

  if (not loadTOCFile("Inspector.toc"))
    Log.warn("Failed to load Inspector.toc")