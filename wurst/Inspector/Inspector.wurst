package Inspector
import Inspection
import LinkedList
import Frame
import PropertyEditors
import Vector
import Object
import ListBox
import Layout
import Observable
import ContentPresenter
import Events
import StringExtensions
import Execute
import Panel

constant vec2 INSPECTOR_POS = vec2(0.8, 0.54)
constant vec2 INSPECTOR_SIZE = vec2(0.25, 0.34)

InspectorFrame g_inspectorFrame

// ============================================================================
public interface IPropertyEditorFactory
  function createEditor(IPropertyDescriptor descriptor) returns PropertyEditor

// ============================================================================
class InspectorCategoryRowVM

  /////////////////////////////////////////////////////////////////////////////
  static class META
    static constant string CATEGORY_NAME = "category"
    static constant string EXPANDED_NAME = "expanded"
    protected static function registerMetadata(MetaRegistrar registrar)
      registrar.registerClass(InspectorCategoryRowVM.typeId)
        ..registerDestructor((object object) -> destroy object.cast<InspectorCategoryRowVM>(InspectorCategoryRowVM.typeId))
        ..registerProperty(META.CATEGORY_NAME, typeId_string,
            obj -> obj.cast<InspectorCategoryRowVM>(InspectorCategoryRowVM.typeId).getCategory().toObject(),
            (obj, val) -> obj.cast<InspectorCategoryRowVM>(InspectorCategoryRowVM.typeId).setCategory(val.castToString()))
        ..registerProperty(META.EXPANDED_NAME, typeId_bool,
            obj -> obj.cast<InspectorCategoryRowVM>(InspectorCategoryRowVM.typeId).getExpanded().toObject(),
            (obj, val) -> obj.cast<InspectorCategoryRowVM>(InspectorCategoryRowVM.typeId).setExpanded(val.castToBool()))
  /////////////////////////////////////////////////////////////////////////////

  use Observable

  private string m_category
  private bool m_expanded

  // --------------------------------------------------------------------------
  function getCategory() returns string
    return m_category

  // --------------------------------------------------------------------------
  function setCategory(string value)
    if (m_category != value)
      m_category = value
      raisePropertyChangedEvent(META.CATEGORY_NAME)

  // --------------------------------------------------------------------------
  function getExpanded() returns bool
    return m_expanded

  // --------------------------------------------------------------------------
  function setExpanded(bool value)
    if (m_expanded != value)
      m_expanded = value
      raisePropertyChangedEvent(META.EXPANDED_NAME)

// ============================================================================
class InspectorEditorRow extends Panel
  private IPropertyDescriptor m_cachedPropertyDescriptor
  private _handle m_propertyChangedEventHandler
  private real m_headerContentWidth = 0.1
  private Frame m_headerFrame
  private ContentPresenter m_editorPresenterFrame

  // --------------------------------------------------------------------------
  construct()
    super("RE")

    m_headerFrame = new Frame(createFrame("TEXT", "", getFrameHandle(), "InspectorEditorRowHeaderTextTemplate", 0))
    ..setWidth(m_headerContentWidth)

    let editorTemplateSelector = new DataTypeTemplateSelector()
    ..registerFrameTemplate(typeId_bool, () -> begin 
        let editor = new BoolEditor()..setHeight(0.02)
        createFrame("DebugOutlineWhite")..setAllPoints(editor.getFrameHandle())
        return editor
      end)
    ..registerFrameTemplate(typeId_int, () -> begin 
        let editor = new IntEditor()..setHeight(0.02)
        createFrame("DebugOutlineWhite")..setAllPoints(editor.getFrameHandle())
        return editor
      end)
    ..registerFrameTemplate(typeId_real, () -> begin 
        let editor = new RealEditor()..setHeight(0.02)
        createFrame("DebugOutlineWhite")..setAllPoints(editor.getFrameHandle())
        return editor
      end)
    ..registerFrameTemplate(typeId_string, () -> begin 
        let editor = new StringEditor()..setHeight(0.02)
        createFrame("DebugOutlineWhite")..setAllPoints(editor.getFrameHandle())
        return editor
      end)

    IFrameTemplateSelector editorTypeTemplateSelector = (int typeid) ->
      let vm = getDataContext().as<PropertyEditorVM>(PropertyEditorVM.typeId)
      let pd = vm != null ? vm.getPropertyDescriptor() : null
      return editorTemplateSelector.getFrameTemplate(pd != null ? pd.getEditorType().getTypeId() : 0)

    m_editorPresenterFrame = new ContentPresenter("RECP")
    ..setFrameTemplateSelector(editorTypeTemplateSelector)
    createFrame("DebugOutlineBlue_Thick")..setAllPoints(m_editorPresenterFrame.getFrameHandle())

    m_headerFrame.getFrameHandle()
    ..clearAllPoints()
    ..setPoint(FRAMEPOINT_TOPLEFT, getFrameHandle(), FRAMEPOINT_TOPLEFT)

    m_editorPresenterFrame.getFrameHandle()
    ..clearAllPoints()
    ..setPoint(FRAMEPOINT_TOPLEFT, m_headerFrame.getFrameHandle(), FRAMEPOINT_TOPRIGHT)
    ..setPoint(FRAMEPOINT_BOTTOMRIGHT, getFrameHandle(), FRAMEPOINT_BOTTOMRIGHT)

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_headerFrame
    destroy m_editorPresenterFrame

  // --------------------------------------------------------------------------
  function getDescriptor() returns IPropertyDescriptor
    return m_cachedPropertyDescriptor

  // --------------------------------------------------------------------------
  function getHeaderContentWidth() returns real
    return m_headerContentWidth

  // --------------------------------------------------------------------------
  function setHeaderContentWidth(real value)
    if (m_headerContentWidth != value)
      m_headerContentWidth = value
      m_headerFrame.setWidth(value)

  // --------------------------------------------------------------------------
  override protected function onDataContextChanged(object oldValue, object newValue)

    if (oldValue != NULL)
      oldValue.castAssert(PropertyEditorVM.typeId)

    if (newValue != NULL)
      newValue.castAssert(PropertyEditorVM.typeId)

    if (m_propertyChangedEventHandler != INVALID_HANDLE)
      let oldContext = oldValue.as<PropertyEditorVM>(PropertyEditorVM.typeId)
      if (oldContext != null)
        oldContext.unregisterOnPropertyChanged(m_propertyChangedEventHandler)
        m_propertyChangedEventHandler = INVALID_HANDLE

    let newContext = newValue.as<PropertyEditorVM>(PropertyEditorVM.typeId)
    if (newContext != null)
      m_propertyChangedEventHandler = newContext.onPropertyChanged() (PropertyEditorVM sender, string propertyName) ->
        onDataContextPropertyChanged(propertyName)

    m_editorPresenterFrame.setDataContext(getDataContext())
    updateHeader()

  // --------------------------------------------------------------------------
  override protected function measureOverride(vec2 availableSize) returns vec2
    var childConstraint = availableSize
    m_headerFrame.measure(childConstraint)
    childConstraint.x -= m_headerFrame.getMeasuredWidth()    
    m_editorPresenterFrame.measure(childConstraint)
    return vec2(
      m_headerFrame.getMeasuredWidth() + m_editorPresenterFrame.getMeasuredWidth(),
      max(m_headerFrame.getMeasuredHeight(), m_editorPresenterFrame.getMeasuredHeight()))

  // --------------------------------------------------------------------------
  override protected function arrangeOverride(vec2 arrangeSize) returns vec2
    var childConstraint = arrangeSize
    childConstraint.x = m_headerContentWidth
    m_headerFrame.arrange(childConstraint)
    childConstraint.x = arrangeSize.x - m_headerFrame.getWidth()
    m_editorPresenterFrame.arrange(childConstraint)
    return arrangeSize

  // --------------------------------------------------------------------------
  private function onDataContextPropertyChanged(string _propertyName)
    updateHeader()

  // --------------------------------------------------------------------------
  private function updateHeader()
    let vm = getDataContext().as<PropertyEditorVM>(PropertyEditorVM.typeId)
    let pd = vm != null ? vm.getPropertyDescriptor() : null
    
    if (m_headerFrame != null)
      m_headerFrame.setText(pd != null ? pd.getName() : "")

// ============================================================================
class InspectorCategoryRow extends Frame
  private _handle m_propertyChangedEventHandler
  private framehandle m_headerTextFrame

  // --------------------------------------------------------------------------
  construct()
    super(createFrame("FRAME", "RC", GAME_UI, "InspectorCategoryRowTemplate", 0))
    m_headerTextFrame = getFrame("InspectorCategoryRowText")

  // --------------------------------------------------------------------------
  override protected function onDataContextChanged(object oldValue, object newValue)

    if (m_propertyChangedEventHandler != INVALID_HANDLE)
      let oldContext = oldValue.as<InspectorCategoryRowVM>(InspectorCategoryRowVM.typeId)
      if (oldContext != null)
        oldContext.unregisterOnPropertyChanged(m_propertyChangedEventHandler)
        m_propertyChangedEventHandler = INVALID_HANDLE

    let newContext = newValue.as<InspectorCategoryRowVM>(InspectorCategoryRowVM.typeId)
    if (newContext != null)
      m_propertyChangedEventHandler = newContext.onPropertyChanged() (InspectorCategoryRowVM sender, string propertyName) ->
        onDataContextPropertyChanged(propertyName)

    updateFrame()

  // --------------------------------------------------------------------------
  private function onDataContextPropertyChanged(string _propertyName)
    updateFrame()

  // --------------------------------------------------------------------------
  private function updateFrame()
    let vm = getDataContext().as<InspectorCategoryRowVM>(InspectorCategoryRowVM.typeId)
    if (m_headerTextFrame != null)
      m_headerTextFrame.setText(vm != null ? vm.getCategory() : "")

// ============================================================================
public class InspectorFrame extends Frame
  private ListBox m_listBox = null
  private LinkedList<IInspectorContext> m_contexts = new LinkedList<IInspectorContext>()
  private IInspectorContext m_activeContext = null
  private Vector<object> m_itemsSource
  private _handle m_onObjectsChangedEventHandler

  // --------------------------------------------------------------------------
  construct()
    super(createFrame("FRAME", "INSP", GAME_UI, "InspectorTemplate", 0))

    IFrameTemplate editorRowTemplate = () ->
      let row = new InspectorEditorRow()..setHeight(0.02)
      createFrame("DebugOutlineRed")..setAllPoints(row.getFrameHandle())
      return row

    IFrameTemplate categoryRowTemplate = () ->
      let row = new InspectorCategoryRow()..setHeight(0.02)
      createFrame("DebugOutlineGreen")..setAllPoints(row.getFrameHandle())
      return row

    let frameTemplateSelector = new DataTypeTemplateSelector()
    ..registerFrameTemplate(PropertyEditorVM.typeId, editorRowTemplate)
    ..registerFrameTemplate(InspectorCategoryRowVM.typeId, categoryRowTemplate)

    IFrameTemplate rowTemplate = () -> new ContentPresenter("IFCP")..setFrameTemplateSelector(frameTemplateSelector)..setHeight(0.02)

    m_listBox = new ListBox("LB")
    ..setOrientation(LayoutOrientation.TOPTOBOTTOM)
    ..setItemFrameTemplate(rowTemplate)
    addChild(m_listBox)

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_contexts

  // --------------------------------------------------------------------------
  function registerContext(IInspectorContext context)
    m_contexts.add(context)

  // --------------------------------------------------------------------------
  function setContext(IInspectorContext context)
    if (m_activeContext == context)
      return

    // Log.info("Set context " + context.getName())
    
    if (m_onObjectsChangedEventHandler != INVALID_HANDLE)
      m_activeContext.unregisterOnObjectsChanged(m_onObjectsChangedEventHandler)
      m_onObjectsChangedEventHandler = INVALID_HANDLE

    m_activeContext = context

    if (m_activeContext != null)
      m_onObjectsChangedEventHandler = context.onObjectsChanged() (IInspectorContext arg1) ->
        // Log.info("active context onObjectsChanged")
        updateContext()

    updateContext()

  // --------------------------------------------------------------------------
  private function updateContext()

    execute() () ->
    //{
      let descriptor = m_activeContext.getObjectDescriptor()
      let objects = m_activeContext.getObjects()

      // Log.info("Objects: " + objects.size().toString())

      let propertyDescriptors = new LinkedList<IPropertyDescriptor>()
      let collection = new PropertyDescriptorCollection(propertyDescriptors)

      for object in objects
        descriptor.getPropertyDescriptors(object, collection)

      destroy collection

      // Log.info("Property descriptors: " + propertyDescriptors.size().toString())

      execute() () ->
        propertyDescriptors.sortWith((o1, o2) -> sortPropertyDescriptors(o1, o2))

      let itemsSource = new Vector<object>(propertyDescriptors.size())

      var currentCategory = ""
      // var i = 0
      for pd in propertyDescriptors
        let pdCat = pd.getCategory()
        if (pdCat != currentCategory)
          itemsSource.add(toObject(new InspectorCategoryRowVM()..setCategory(pdCat), InspectorCategoryRowVM.typeId))
          currentCategory = pdCat
        itemsSource.add(toObject(new PropertyEditorVM()..setPropertyDescriptor(pd)..setObjects(objects), PropertyEditorVM.typeId))
        // Log.info(i.toString() + ": " + pd.getName())
        // i++

      destroy propertyDescriptors

      execute() () ->
        m_listBox.setItemsSource(itemsSource)

      if (m_itemsSource != null)
        while (m_itemsSource.isEmpty() == false)
          let itm = m_itemsSource.pop()
          if (itm != NULL)
            // Log.info("Destroying " + m_itemsSource.size().toString() + ": " + itm.toString() + " " + itm.toDebugString())
            itm.destr()
          // else
            // Log.info("Destroying " + m_itemsSource.size().toString() + ": item was null")
        destroy m_itemsSource
      
      m_itemsSource = itemsSource
    //}

  // --------------------------------------------------------------------------
  private function sortPropertyDescriptors(IPropertyDescriptor o1, IPropertyDescriptor o2) returns int
    let cat1 = o1.getCategory()
    let cat2 = o2.getCategory()
    if (cat1 != cat2)
      return cat1.compare(cat2)
    let order1 = o1.getSortOrder()
    let order2 = o2.getSortOrder()
    if (order1 != order2)
      return order1 - order2
    return o1.getName().compare(o2.getName())

// ============================================================================
public class Inspector

  // --------------------------------------------------------------------------
  static function getIsReady() returns bool
    return g_inspectorFrame != null

  // --------------------------------------------------------------------------
  static function registerContext(IInspectorContext context)
    g_inspectorFrame.registerContext(context)

  // --------------------------------------------------------------------------
  static function setContext(IInspectorContext context)
    g_inspectorFrame.setContext(context)

  // --------------------------------------------------------------------------
  static function getIsVisible() returns bool
    return g_inspectorFrame != null ? g_inspectorFrame.isVisible() : false

  // --------------------------------------------------------------------------
  static function show()
    if (not getIsReady())
      return
    g_inspectorFrame.show(localPlayer)

  // --------------------------------------------------------------------------
  static function hide()
    if (not getIsReady())
      return
    g_inspectorFrame.hide()

  // --------------------------------------------------------------------------
  static function initialize()
    if (g_inspectorFrame != null)
      return
    
    g_inspectorFrame = new InspectorFrame()
    ..setAbsArea(FRAMEPOINT_TOPRIGHT, INSPECTOR_POS, INSPECTOR_SIZE)

// ============================================================================
public interface IInspectorContext
  function getName() returns string
  function getObjects() returns Vector<object>
  function getObjectDescriptor() returns IObjectDescriptor
  function onObjectsChanged(Event1Callback<IInspectorContext> callback) returns _handle
  function unregisterOnObjectsChanged(_handle eventHandler)

// ============================================================================
init
  Meta.register("Inspector") (MetaRegistrar registrar) ->
    InspectorCategoryRowVM.META.registerMetadata(registrar)

  if (not loadTOCFile("Inspector.toc"))
    Log.warn("Failed to load Inspector.toc")