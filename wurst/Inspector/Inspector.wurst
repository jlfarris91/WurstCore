package Inspector
import Inspection
import LinkedList
import ClosureTimers
import Frame
import StackLayout
import PropertyEditors
import Vector
import Range
import HashList
import HashMap
import DockLayout
import Layout
import GridLayout

constant vec2 INSPECTOR_POS = vec2(0.55, 0.2)
constant vec2 INSPECTOR_SIZE = vec2(0.25, 0.34)

InspectorFrame g_inspectorFrame

// ============================================================================
public abstract class InspectorRow extends Frame

  // --------------------------------------------------------------------------
  construct (string framename, framehandle owner)
    super(framename, owner)

  // --------------------------------------------------------------------------
  construct (framehandle frame)
    super(frame)

  // --------------------------------------------------------------------------
  function refresh()

// ============================================================================
public interface IPropertyEditorFactory
  function createEditor(IPropertyDescriptor descriptor) returns PropertyEditor

// ============================================================================
public class InspectorEditorRow extends InspectorRow
  private IPropertyDescriptor m_descriptor
  private IPropertyEditorFactory m_editorFactory
  private IterableMap<string, PropertyEditor> m_editors
  private Frame m_headerText
  private PropertyEditor m_activeEditor
  private LinkedList<int> m_contexts

  // --------------------------------------------------------------------------
  construct(IPropertyEditorFactory editorFactory)
    super(createFrame("FRAME", "InspectorRow", GAME_UI, "", 0))
    m_editorFactory = editorFactory
    m_editors = new IterableMap<string, PropertyEditor>()
    //setLayout(new GridLayout()..setColumns(2))

  // --------------------------------------------------------------------------
  ondestroy
    for key in m_editors
      destroy m_editors.get(key)
    destroy m_editors

  // --------------------------------------------------------------------------
  function setContext(IPropertyDescriptor descriptor, LinkedList<int> contexts)
    m_contexts = contexts
    m_descriptor = descriptor

    if (m_descriptor == null)
      m_headerText.setText("")
      deactivateActiveEditor()
      return

    m_headerText.setText(m_descriptor.getName())

    let editor = getOrAddEditor(descriptor)
    if (m_activeEditor == editor)
      m_activeEditor.setContext(descriptor, m_contexts)
    else
      activateEditor(editor)

  // --------------------------------------------------------------------------
  function getDescriptor() returns IPropertyDescriptor
    return m_descriptor

  // --------------------------------------------------------------------------
  function getEditor(string editorType) returns PropertyEditor
    return m_editors.get(editorType)

  // --------------------------------------------------------------------------
  function addEditor(string editorType, PropertyEditor editor)
    // editor.setGridColumn(1)
    addLogicalChild(editor)
    m_editors.put(editorType, editor)
  
  // --------------------------------------------------------------------------
  override function refresh()
    for key in m_editors
      m_editors.get(key).refresh()

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()

    let textFrame = createFrame("TEXT", "HeaderText", GAME_UI, "", 0)
    m_headerText = new Frame(textFrame)
      // ..setGridColumn(0)
    addLogicalChild(m_headerText)

  // --------------------------------------------------------------------------
  private function getOrAddEditor(IPropertyDescriptor descriptor) returns PropertyEditor
    let editorType = descriptor.getEditorType()
    var editor = getEditor(editorType)
    if (editor == null)
      editor = m_editorFactory.createEditor(descriptor)
      addEditor(editorType, editor)
    return editor

  // --------------------------------------------------------------------------
  private function activateEditor(PropertyEditor editor) returns bool
    if (m_activeEditor != editor)
      deactivateActiveEditor()
      m_activeEditor = editor
      m_activeEditor..setContext(m_descriptor, m_contexts)..show()
      return true
    return false

  // --------------------------------------------------------------------------
  private function deactivateActiveEditor()
    if (m_activeEditor != null)
      m_activeEditor..hide()..setContext(null, null)
      m_activeEditor = null

// ============================================================================
public class InspectorCategoryRow extends InspectorRow
  private string m_category
  private framehandle m_rowText

  // --------------------------------------------------------------------------
  construct(string category)
    super("InspectorCategoryRowTemplate", GAME_UI)
    m_category = category

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()

    m_rowText = getFrame("InspectorCategoryRowText")
    m_rowText.setText(m_category)

// ============================================================================
public class PropertyEditorFactory implements IPropertyEditorFactory
  override function createEditor(IPropertyDescriptor descriptor) returns PropertyEditor
    switch (descriptor.getEditorType())
      case "int"
        return new IntEditor()..initialize()..hide()
      case "real"
        return new RealEditor()..initialize()..hide()
      case "string"
        return new StringEditor()..initialize()..hide()
    return null

// ============================================================================
public class InspectorFrame extends Frame
  private LinkedList<int> m_contexts

  private Frame m_titleText
  private Frame m_titleContainer
  private Frame m_scrollBar
  
  // private StackLayout m_stackPanelLayout
  // private DockLayout m_dockPanelLayout
  private real m_itemHeight = 0.022

  private int m_numRows
  private Vector<InspectorRow> m_rows

  private IPropertyEditorFactory m_propertyEditorFactory

  private HashList<IPropertyDescriptor> m_descriptors
  private rangeInt m_windowRange
  private Vector<IPropertyDescriptor> m_descriptorWindow

  // --------------------------------------------------------------------------
  construct()
    super("InspectorTemplate", GAME_UI)
    m_propertyEditorFactory = new PropertyEditorFactory()
    m_descriptors = new HashList<IPropertyDescriptor>()
    m_descriptorWindow = new Vector<IPropertyDescriptor>()
    m_rows = new Vector<InspectorRow>()
    // m_stackPanelLayout = new StackLayout()
    // m_dockPanelLayout = new DockLayout()

  // --------------------------------------------------------------------------
  ondestroy
    destroyInspectorRows()
    destroy m_propertyEditorFactory
    destroy m_descriptors
    destroy m_descriptorWindow
    destroy m_contexts
    // destroy m_stackPanelLayout
    // destroy m_dockPanelLayout

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()

    let titleFrameHandle = createFrame("FRAME", "TitleFrame", GAME_UI, "", 0)
    m_titleContainer = new Frame(titleFrameHandle)
      ..setHeight(0.03)
      // ..setDock(Dock.TOP)
      // ..setLayout(new GridLayout())
    addLogicalChild(m_titleContainer)

    let titleTextHandle = createFrame("TEXT", "InspectorTitle", GAME_UI, "", 0)
    m_titleText = new Frame(titleTextHandle)
      ..setText("Inspector")
      ..setHeight(0.03)
      ..setTextAlignment(TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_CENTER)
    m_titleContainer.addLogicalChild(m_titleText)

    let scrollBarHandle = createFrame("SCROLLBAR", "ScrollBar", GAME_UI, "BattleNetScrollBarTemplate", 0)
    m_scrollBar = new Frame(scrollBarHandle)
      ..setWidth(0.012)
      // ..setDock(Dock.RIGHT)
      ..show()
    addLogicalChild(m_scrollBar)

    rebuild()

  // --------------------------------------------------------------------------
  function setContexts(LinkedList<unit> contexts)
    if (m_contexts != null)
      destroy m_contexts
    m_contexts = new LinkedList<int>()
    for contextUnit in contexts
      m_contexts.add(unitToIndex(contextUnit))
    rebuild()

  // --------------------------------------------------------------------------
  function rebuild()
    layout()
    updatePropertyDescriptors()
    updateWindow()
    updateRows()

  // --------------------------------------------------------------------------
  function refresh()
    for row in m_rows
      row.refresh()
  
  // --------------------------------------------------------------------------
  private function destroyInspectorRows()
    if (m_rows == null)
      return
    for row in m_rows
      destroy row
    m_rows.clear()

  // --------------------------------------------------------------------------
  private function updatePropertyDescriptors()
    m_descriptors.clear()
    if (m_contexts != null)
      let propertyDescriptors = new PropertyDescriptorCollection(m_descriptors)
      let descriptor = new UnitObjectDescriptor()
      for context in m_contexts
        descriptor.getPropertyDescriptors(context, propertyDescriptors)
      destroy descriptor

  // --------------------------------------------------------------------------
  private function updateWindow()
    let descriptorsCount = m_descriptors.size()
  
    m_descriptorWindow.clear()
    m_descriptorWindow.resize(m_numRows)
    
    m_windowRange.min = max(min(m_windowRange.min, descriptorsCount - m_numRows), 0)
    m_windowRange.max = m_windowRange.min + m_numRows

    // Log.info("Inspector", "updateWindow", "", "windowRange = " + m_windowRange.min.toString() + ", " + m_windowRange.max.toString() + " -> " + m_windowRange.getLength().toString())

    for i = 0 to m_windowRange.getLength() - 1
      let descIdx = m_windowRange.min + i
      if (descIdx >= descriptorsCount)
        break
      let descriptor = m_descriptors.get(descIdx)
      if (i < m_descriptorWindow.getCount())
        m_descriptorWindow.setItem(i, descriptor)
      else
        m_descriptorWindow.add(descriptor)
      // Log.info("Inspector", "updateWindow", "", "window[{0}] -> {1} = {2}".format(i.toString(), descIdx.toString(), descriptor.getName()))

  // --------------------------------------------------------------------------
  private function updateRows()
    for i = 0 to m_descriptorWindow.getCount() - 1
      let descriptor = m_descriptorWindow.getItem(i)
      let row = i < m_rows.getCount() ? m_rows.getItem(i) : addEditorRow()
      (row castTo InspectorEditorRow)..setContext(descriptor, m_contexts)

  // --------------------------------------------------------------------------
  function layout()

    let area = getLocalArea()

    let numRows = getMaxNumberOfRows(m_itemHeight, area.height)
    let spacing = getSpacing(m_itemHeight, area.height)

    if (numRows == m_numRows)
      return
    
    destroyInspectorRows()

    m_numRows = numRows
    m_rows.resize(numRows)

    for i = 0 to m_numRows
      addEditorRow()

    // m_dockPanelLayout.reset(area)
    // m_dockPanelLayout.layoutNextFrame(m_titleContainer)
    // m_dockPanelLayout.layoutNextFrame(m_scrollBar)

    // m_stackPanelLayout.setOrientation(LayoutOrientation.TOPTOBOTTOM)
    // m_stackPanelLayout.setSpacing(vec2(0, spacing))
    // m_stackPanelLayout.reset(m_dockPanelLayout.getRemaining())

    // var j = 0
    // for row in m_rows
    //   row.setHeight(m_itemHeight)
    //   m_stackPanelLayout.layoutNextFrame(row)
    //   Log.info("Row {0} : lpos: {1} size: {2}".format(j.toString(), row.getLocalPos().toString(), row.getSize().toString()))
    //   j++

  // --------------------------------------------------------------------------
  private function addEditorRow() returns InspectorEditorRow
    let row = new InspectorEditorRow(m_propertyEditorFactory)
    ..initialize()
    ..show()
    addLogicalChild(row)
    m_rows.add(row)
    return row

  // --------------------------------------------------------------------------
  // private function addCategoryRow(string category) returns InspectorCategoryRow
  //   let row = new InspectorCategoryRow(category)
  //   ..initialize()
  //   ..setParent(m_listBoxFrame)
  //   m_rows.add(row)
  //   return row

  // --------------------------------------------------------------------------
  private static function getMaxNumberOfRows(real rowHeight, real totalHeight) returns int
    return (totalHeight / rowHeight).floor()

  // --------------------------------------------------------------------------
  private static function getSpacing(real rowHeight, real totalHeight) returns real
    let rowsAbs = totalHeight / rowHeight
    let rowsFloor = rowsAbs.floor()
    return ((rowsAbs - rowsFloor) * rowHeight) / (rowsFloor - 1)

// ============================================================================
public class Inspector

  // --------------------------------------------------------------------------
  static function getIsReady() returns bool
    return g_inspectorFrame != null

  // --------------------------------------------------------------------------
  static function setContext(unit context)
    if (not getIsReady())
      return
    let temp = new LinkedList<unit>()
    temp.add(context)
    g_inspectorFrame.setContexts(temp)
    destroy temp

  // --------------------------------------------------------------------------
  static function setContexts(LinkedList<unit> contexts)
    if (not getIsReady())
      return
    g_inspectorFrame.setContexts(contexts)

  // --------------------------------------------------------------------------
  static function rebuild()
    if (not getIsReady())
      return
    g_inspectorFrame.rebuild()

  // --------------------------------------------------------------------------
  static function refresh()
    if (not getIsReady())
      return
    g_inspectorFrame.refresh()

  // --------------------------------------------------------------------------
  static function getIsVisible() returns bool
    return g_inspectorFrame != null ? g_inspectorFrame.getIsVisible() : false

  // --------------------------------------------------------------------------
  static function show()
    if (not getIsReady())
      return
    g_inspectorFrame.show()

  // --------------------------------------------------------------------------
  static function hide()
    if (not getIsReady())
      return
    g_inspectorFrame.hide()

  // --------------------------------------------------------------------------
  static function initialize(player _player)
    if (g_inspectorFrame != null)
      return
    
    g_inspectorFrame = new InspectorFrame()
    ..setPlayer(_player)
    ..initialize()
    ..setLocalPos(INSPECTOR_POS)
    ..setSize(INSPECTOR_SIZE)
    ..hide()

    doPeriodically(1.0) (CallbackPeriodic cb) ->
      Inspector.rebuild()

    doPeriodically(0.1) (CallbackPeriodic cb) ->
      Inspector.refresh()

// ============================================================================
init

  if (not loadTOCFile("Inspector.toc"))
    Log.warn("Failed to load Inspector.toc")