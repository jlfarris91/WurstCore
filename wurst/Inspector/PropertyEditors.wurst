package PropertyEditors
import Frame
import LinkedList
import InspectionInterfaces
import Union
import ClosureFrames

// ============================================================================
public abstract class PropertyEditor extends Frame
  private LinkedList<int> m_contexts
  private IPropertyDescriptor m_descriptor
  private bool m_isIndeterminate

  // --------------------------------------------------------------------------
  construct(framehandle frame)
    super(frame)

  // --------------------------------------------------------------------------
  function getPropertyDescriptor() returns IPropertyDescriptor
    return m_descriptor

  // --------------------------------------------------------------------------
  function setPropertyDescriptor(IPropertyDescriptor descriptor)
    if (m_descriptor != descriptor)
      m_descriptor = descriptor
      refresh()

  // --------------------------------------------------------------------------
  function setContexts(LinkedList<int> contexts)
    if (m_contexts != contexts)
      m_contexts = contexts
      refresh()

  // --------------------------------------------------------------------------
  function setContext(IPropertyDescriptor descriptor, LinkedList<int> contexts)
    if (m_descriptor == descriptor and m_contexts == contexts)
      return
    m_descriptor = descriptor
    m_contexts = contexts
    refresh()    

  // --------------------------------------------------------------------------
  function getContexts() returns LinkedList<int>
    return m_contexts

  // --------------------------------------------------------------------------
  function refresh()
    skip

  // --------------------------------------------------------------------------
  protected function canGetDescriptorValue(int context, Union value) returns bool
    return m_descriptor != null and m_descriptor.canGetValue(context, value)

  // --------------------------------------------------------------------------
  protected function getDescriptorValue(int context, Union value) returns bool
    return m_descriptor != null and m_descriptor.getValue(context, value)

  // --------------------------------------------------------------------------
  protected function canSetDescriptorValue(int context, Union value) returns bool
    return m_descriptor != null and m_descriptor.canSetValue(context, value)

  // --------------------------------------------------------------------------
  protected function setDescriptorValue(int context, Union value) returns bool
    if (m_descriptor == null)
      return false
    // Log.info("PropertyEditor", "setDescriptorValue", (this castTo int).toString(), "setting descriptor value + " + value.toString() + " for context " + context.toString())
    if (m_descriptor.setValue(context, value))
      // Log.info("PropertyEditor", "setDescriptorValue", (this castTo int).toString(), "successfully set descriptor value " + value.toString() +" for context " + context.toString())
      return true
    // Log.info("PropertyEditor", "setDescriptorValue", (this castTo int).toString(), "failed to set descriptor value + " + value.toString() + " for context " + context.toString())
    return false

  // --------------------------------------------------------------------------
  function getIsIndeterminate() returns bool
    return m_isIndeterminate

  // --------------------------------------------------------------------------
  protected function setIsIndeterminate(bool value)
    m_isIndeterminate = value

// // ============================================================================
// public interface IPropertyInfo
//   function getValue(int source, Union union)
//   function setValue(int source, Union union)

// // ============================================================================
// public class PropertyInfo implements IPropertyInfo
//   private Action2<int, Union> m_getter
//   private Action2<int, Union> m_setter

//   // --------------------------------------------------------------------------
//   construct(Action2<int, Union> getter, Action2<int, Union> setter)
//     m_getter = getter
//     m_setter = setter

//   // --------------------------------------------------------------------------
//   function getValue(int source, Union union)
//     m_getter.call(source, union)

//   // --------------------------------------------------------------------------
//   function setValue(int source, Union union)
//     m_setter.call(source, union)

// // ============================================================================
// public class Binding<TSource, TTarget, TValue>
  
//   private TSource m_source
//   private TValue m_sourceValue
//   private PropertyInfo m_sourceProperty

//   private TTarget m_target  
//   private TValue m_targetValue
//   private PropertyInfo m_targetProperty

//   // --------------------------------------------------------------------------
//   construct (PropertyInfo sourceProperty, PropertyInfo targetProperty)
//     m_sourceProperty = sourceProperty
//     m_targetProperty = targetProperty

//   // --------------------------------------------------------------------------
//   function getTarget() returns TTarget
//     return m_target

//   // --------------------------------------------------------------------------
//   function setTarget(TTarget target)
//     m_target = target

//   // --------------------------------------------------------------------------
//   function getSource() returns TSource
//     return m_source

//   // --------------------------------------------------------------------------
//   function setSource(TSource source)
//     m_source = source

// ============================================================================
public class IntEditor extends PropertyEditor
  private framehandle m_editBox
  private int m_value

  // --------------------------------------------------------------------------
  construct()
    super(createFrame("FRAME", "IntEditor", GAME_UI, "IntEditorTemplate", 0))
    
    m_editBox = createFrame(
      "GLUEEDITBOX",
      "IntEditorTextBox",
      GAME_UI,
      "InspectorEditBoxTemplate", 0)
    ..onEditboxEnter(() -> onEditboxEnter())
    ..setText("<MISSING>")
    ..setLevel(999)
    ..setAllPoints(getFrameHandle())
    ..show()

  // --------------------------------------------------------------------------
  function getTargetValue() returns int
    return m_value

  // --------------------------------------------------------------------------
  function updateSourceValue(int value)
    if (m_value == value)
      return

    // Log.info("IntEditor", "updateSourceValue", (this castTo int).toString(), "value = " + value.toString())
    m_value = value

    let contexts = getContexts()
    if (contexts == null)
      // Log.info("IntEditor", "updateSourceValue", (this castTo int).toString(), "contexts is null")
      return
    if (contexts.isEmpty())
      // Log.info("IntEditor", "updateSourceValue", (this castTo int).toString(), "contexts is empty")
      return
    let union = Union.fromInt(value)
    for context in contexts
      if (canSetDescriptorValue(context, union))
        setDescriptorValue(context, union)
      else
        // Log.info("IntEditor", "updateSourceValue", (this castTo int).toString(), "cannot set descriptor value")
    destroy union

  // --------------------------------------------------------------------------
  function updateTargetValue(int value)
    if (m_value != value)
      // Log.info("IntEditor", "updateTargetValue", (this castTo int).toString(), "value = " + value.toString())
      m_value = value
      updateEditBoxText()

  // --------------------------------------------------------------------------
  override function refresh()
    let union = new Union()

    var firstValue = 0
    var firstValueReceived = false
    var allValuesMatch = true

    let contexts = getContexts()
    if (contexts != null)
      if (contexts.isEmpty())
        // Log.info("IntEditor", "refresh", (this castTo int).toString(), "contexts is empty")
      for context in contexts
        if (canGetDescriptorValue(context, union) and getDescriptorValue(context, union))
          if (not firstValueReceived)
            firstValue = union.getInt()
            firstValueReceived = true
          else
            if (firstValue != union.getInt())
              allValuesMatch = false
              break
    else
      // Log.info("IntEditor", "refresh", (this castTo int).toString(), "contexts is null")

    setIsIndeterminate(not allValuesMatch)
    updateTargetValue(union.getInt())

    destroy union

  // --------------------------------------------------------------------------
  function onEditboxEnter()
    // Log.info("IntEditor", "onEditboxEnter", (this castTo int).toString(), "value " + m_editBox.getText().toInt().toString())
    updateSourceValue(m_editBox.getText().toInt())
    updateEditBoxText()

  // --------------------------------------------------------------------------
  protected override function setIsIndeterminate(bool value)
    if (getIsIndeterminate() != value)
      updateEditBoxText()

  // --------------------------------------------------------------------------
  function updateEditBoxText()
    m_editBox.setText(getIsIndeterminate() ? "<Multiple>" : m_value.toString())
    // Log.info("edit box -> " + m_editBox.getText())

// ============================================================================
public class StringEditor extends PropertyEditor
  private framehandle m_editBox
  private string m_value

  // --------------------------------------------------------------------------
  construct()
    super(createFrame("FRAME", "StringEditor", GAME_UI, "StringEditorTemplate", 0))

    m_editBox = createFrame(
      "GLUEEDITBOX",
      "StringEditorTextBox",
      GAME_UI,
      "InspectorEditBoxTemplate", 0)
    ..setText("<MISSING>")
    ..setLevel(999)
    ..setAllPoints(getFrameHandle())
    ..show()
    m_editBox.onEditboxEnter(() -> onEditboxEnter())

  // --------------------------------------------------------------------------
  function getTargetValue() returns string
    return m_value

  // --------------------------------------------------------------------------
  function updateSourceValue(string value)
    if (m_value == value)
      return

    m_value = value

    let contexts = getContexts()
    if (contexts != null)
      return
    let union = Union.fromString(value)
    for context in contexts
      if (canSetDescriptorValue(context, union))
        setDescriptorValue(context, union)
    destroy union

  // --------------------------------------------------------------------------
  function updateTargetValue(string value)
    if (m_value != value)
      m_value = value
      updateEditBoxText()

  // --------------------------------------------------------------------------
  override function refresh()
    let union = new Union()

    var firstValue = ""
    var firstValueReceived = false
    var allValuesMatch = true

    let contexts = getContexts()    
    if (contexts != null)
      for context in contexts
        if (canGetDescriptorValue(context, union) and getDescriptorValue(context, union))
          if (not firstValueReceived)
            firstValue = union.getString()
            firstValueReceived = true
          else
            if (firstValue != union.getString())
              allValuesMatch = false
              break

    setIsIndeterminate(not allValuesMatch)

    let newValue = union.getString()
    if (m_value != newValue)
      m_value = newValue
      updateEditBoxText()
      
    destroy union

  // --------------------------------------------------------------------------
  function onEditboxEnter()
    updateSourceValue(m_editBox.getText())
    updateEditBoxText()

  // --------------------------------------------------------------------------
  protected override function setIsIndeterminate(bool value)
    if (getIsIndeterminate() != value)
      updateEditBoxText()

  // --------------------------------------------------------------------------
  function updateEditBoxText()
    m_editBox.setText(getIsIndeterminate() ? "<Multiple>" : m_value)

// ============================================================================
public class RealEditor extends PropertyEditor
  private framehandle m_editBox
  private real m_value

  // --------------------------------------------------------------------------
  construct()
    super(createFrame("FRAME", "RealEditor", GAME_UI, "RealEditorTemplate", 0))
    
    m_editBox = createFrame(
      "GLUEEDITBOX",
      "RealEditorTextBox",
      GAME_UI,
      "InspectorEditBoxTemplate", 0)
    ..setText("<MISSING>")
    ..setLevel(999)
    ..setAllPoints(getFrameHandle())
    ..show()
    m_editBox.onEditboxEnter(() -> onEditboxEnter())

  // --------------------------------------------------------------------------
  function getTargetValue() returns real
    return m_value

  // --------------------------------------------------------------------------
  function updateSourceValue(real value)
    if (m_value == value)
      return

    m_value = value

    let contexts = getContexts()
    if (contexts != null)
      return
    let union = Union.fromReal(value)
    for context in contexts
      if (canSetDescriptorValue(context, union))
        setDescriptorValue(context, union)
    destroy union

  // --------------------------------------------------------------------------
  function updateTargetValue(real value)
    if (m_value != value)
      m_value = value
      updateEditBoxText()

  // --------------------------------------------------------------------------
  override function refresh()
    let union = new Union()

    var firstValue = 0.0
    var firstValueReceived = false
    var allValuesMatch = true

    let contexts = getContexts()    
    if (contexts != null)
      for context in contexts
        if (canGetDescriptorValue(context, union) and getDescriptorValue(context, union))
          if (not firstValueReceived)
            firstValue = union.getReal()
            firstValueReceived = true
          else
            if (firstValue != union.getReal())
              allValuesMatch = false
              break

    setIsIndeterminate(not allValuesMatch)

    let newValue = union.getReal()
    if (m_value != newValue)
      m_value = newValue
      updateEditBoxText()
      
    destroy union

  // --------------------------------------------------------------------------
  function onEditboxEnter()
    updateSourceValue(m_editBox.getText().toReal())
    updateEditBoxText()

  // --------------------------------------------------------------------------
  protected override function setIsIndeterminate(bool value)
    if (getIsIndeterminate() != value)
      updateEditBoxText()

  // --------------------------------------------------------------------------
  function updateEditBoxText()
    m_editBox.setText(getIsIndeterminate() ? "<Multiple>" : m_value.toString())