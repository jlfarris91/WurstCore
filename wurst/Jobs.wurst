package Jobs
import LinkedList
import RealTime
import Trace
import ClosureTimers
import Action
import CancellationToken
import Events
import Func
import ErrorHandling
import RefObject
import HashList
import Vector

@configurable constant bool enableLogging = false
@configurable constant int MAX_PROCESS_PER_TICK = 64

constant int DEFAULT_MAX_WORK_PER_TICK = 8 // 1 per player?
constant real DEFAULT_PROCESS_INTERVAL = 0.1

HashList<Thread> g_allThreads = new HashList<Thread>()
HashList<Thread> g_runningThreads = new HashList<Thread>()

// ============================================================================
public class Thread

  private int m_id
  private string m_name
  private CallbackPeriodic m_processQueueCallback = null
  private bool m_enabled = false
  private int m_jobSubWorkCompletedCount = 0
  private int m_jobsCompletedCount = 0
  private int m_jobsProcessedCount = 0
  private int m_jobsTimeoutCount = 0
  private int m_jobsCanceledCount = 0
  private int m_maxWorkPerTick = DEFAULT_MAX_WORK_PER_TICK
  private real m_tickInterval = DEFAULT_PROCESS_INTERVAL
  private Thread m_dependsOnThread = null

  private Vector<Job> m_readQueue = new Vector<Job>(16)
  private Vector<Job> m_writeQueue = new Vector<Job>(16)
  private int m_readPosition = 0

  static Thread defaultQueue = new Thread("default")..setEnabled(true)
  
  private static int s_threadIdGen = 0
  private static int s_currTime = 0

  // --------------------------------------------------------------------------
  construct(string name)
    m_name = name

    s_threadIdGen++
    m_id = s_threadIdGen

    g_allThreads.add(this)

  // --------------------------------------------------------------------------
  ondestroy

    g_allThreads.remove(this)
    g_runningThreads.remove(this)

    destroy m_writeQueue
    m_writeQueue = null

    destroy m_readQueue
    m_readQueue = null

  // --------------------------------------------------------------------------
  static function getStaticThreadIdGen() returns int
    return s_threadIdGen

  // --------------------------------------------------------------------------
  static function getAllThreads() returns HashList<Thread>
    return g_allThreads

  // --------------------------------------------------------------------------
  static function getRunningThreads() returns HashList<Thread>
    return g_runningThreads
  
  // --------------------------------------------------------------------------
  function getName() returns string
    return m_name

  // --------------------------------------------------------------------------
  function getEnabled() returns bool
    return m_enabled

  // --------------------------------------------------------------------------
  function setEnabled(bool enabled)
    if (m_enabled != enabled)
      m_enabled = enabled
      if (not enabled)
        stopProcessing()

  // --------------------------------------------------------------------------
  function getTickInterval() returns real
    return m_tickInterval

  // --------------------------------------------------------------------------
  function setTickInterval(real value)
    m_tickInterval = value
    if (m_processQueueCallback != null)
      stopProcessing()
      startProcessing()

  // --------------------------------------------------------------------------
  function getMaxWorkPerTick() returns int
    return m_maxWorkPerTick

  // --------------------------------------------------------------------------
  function setMaxWorkPerTick(int value)
    m_maxWorkPerTick = value

  // --------------------------------------------------------------------------
  function setDependsOnThread(Thread otherThread)
    m_dependsOnThread = otherThread

  // --------------------------------------------------------------------------
  function getDependentThread() returns Thread
    return m_dependsOnThread

  // --------------------------------------------------------------------------
  function enqueue(Job job)
    if (job == null)
      error("Job is null!")

    let existingThread = job.getThread()
    if (existingThread != null)
      error("Job is already in queue for thread " + existingThread.getName())

    log("Enqueued job " + job.getId())

    job.acquire()
    m_writeQueue.add(job)
    job.setExecutingThread(this)
    startProcessing()

  // --------------------------------------------------------------------------
  function enqueue(CancellationToken ct, Job job)
    job.setCancellationToken(ct)
    enqueue(job)

  // --------------------------------------------------------------------------
  private function startProcessing()
    if (m_processQueueCallback == null and m_enabled)
      m_processQueueCallback = doPeriodically(m_tickInterval, cb -> processReadQueue())
      g_runningThreads.add(this)
      log("Started processing queue")
    
  // --------------------------------------------------------------------------
  private function stopProcessing()
    if (m_processQueueCallback != null)
      destroy m_processQueueCallback
      m_processQueueCallback = null
      g_runningThreads.remove(this)
      log("Stopped processing queue")

  // --------------------------------------------------------------------------
  function remove(Job job) returns bool
    let removed = m_readQueue.emplaceRemove(job) or m_writeQueue.emplaceRemove(job)
    if (removed)
      job.release()
      log("Removed job " + job.getId())
    if (getRemainingWorkCount() == 0)
      stopProcessing()
    return removed

  // --------------------------------------------------------------------------
  function getRemainingWorkCount() returns int
    return max(m_readQueue.size() - m_readPosition, 0) + m_writeQueue.size()

  // --------------------------------------------------------------------------
  function getTotalSubWorkCompletedCount() returns int
    return m_jobSubWorkCompletedCount

  // --------------------------------------------------------------------------
  function getCompletedJobsCount() returns int
    return m_jobsCompletedCount

  // --------------------------------------------------------------------------
  function getProcessedCount() returns int
    return m_jobsProcessedCount

  // --------------------------------------------------------------------------
  function getCanceledWorkCount() returns int
    return m_jobsCanceledCount

  // --------------------------------------------------------------------------
  function getTimedOutWorkCount() returns int
    return m_jobsTimeoutCount

  // --------------------------------------------------------------------------
  /**Do NOT modify this vector. May contain null entries.*/
  function getReadQueue() returns Vector<Job>
    return m_readQueue

  // --------------------------------------------------------------------------
  /**Do NOT modify this vector. May contain null entries.*/
  function getWriteQueue() returns Vector<Job>
    return m_writeQueue

  // --------------------------------------------------------------------------
  protected function processReadQueue()

    if (getRemainingWorkCount() == 0)
      stopProcessing()
      return

    // First time through the function after starting to process the read queue
    // the read queue will be empty and if we get here then we know that the
    // write queue is not empty, so do the initial swap.
    swapQueuesIfNecessary()

    if (m_dependsOnThread != null and m_dependsOnThread.getRemainingWorkCount() > 0)
      Trace.trace("Work.waitDependency")
      return

    Trace.trace("Work.processQueue")
    
    s_currTime = getRealTimeSeconds()
    
    var workCounter = 0
    var processCounter = 0
    let readQueueSize = m_readQueue.size()

    while (m_readPosition < readQueueSize
           and workCounter < m_maxWorkPerTick
           and processCounter < MAX_PROCESS_PER_TICK)
    //{
      // Removing a job from the read queue replaces the entry with null using
      // Vector.emplaceRemove to avoid costly Vector.remove call.
      // So, job can be null here and that's okay.
      let job = m_readQueue.get(m_readPosition)
      m_readQueue.set(m_readPosition, null)
      if (job != null)
        processCounter++
        workCounter += processJob(job)

      m_readPosition++
    //}

    if (getRemainingWorkCount() == 0)
      stopProcessing()

    swapQueuesIfNecessary()
    
    Trace.trace("Work.subWork", workCounter)
    Trace.trace("Work.items", processCounter)

  // --------------------------------------------------------------------------
  private function swapQueuesIfNecessary()

    if (m_readPosition == m_readQueue.size())
    //{
      let tempQueue = m_readQueue
      m_readQueue = m_writeQueue
      m_writeQueue = tempQueue
      
      m_writeQueue.clear()
      m_readPosition = 0
    //}

  // --------------------------------------------------------------------------
  private function processJob(Job job) returns int

    var workCounter = 0

    // Job owner must have completed the job outside of the thread
    if (job.isCompleted())
      job.setExecutingThread(null)
      job.release()
      return workCounter

    if (not job.getIsCancellationRequested() and job.hasNext())
      job.setStatus(JobStatus.RUNNING)
      m_jobsProcessedCount++
      let work = job.next()
      let positiveWork = max(work, 0)
      workCounter += positiveWork
      m_jobSubWorkCompletedCount += positiveWork

    // Job completed itself while working
    if (job.isCompleted())
      m_jobsCompletedCount++
      job.setExecutingThread(null)
      job.release()
      return workCounter

    // Work has been cancelled (check again after work is done above)
    if (job.getIsCancellationRequested())
      m_jobsCanceledCount++
      job.setExecutingThread(null)
      job.cancel()
      job.release()
      return workCounter

    // Work is done, close it out
    if (not job.hasNext())
      m_jobsCompletedCount++
      job.setExecutingThread(null)
      job.succeed()
      job.release()
      return workCounter

    // Work timed out
    if (s_currTime - job.m_startTime > job.m_timeout)
      m_jobsTimeoutCount++
      job.setExecutingThread(null)
      job.fail("Timedout")
      job.release()
      return workCounter

    // Round robin strategy
    // The job still has more work to do so move it to the back of the inactive queue
    job.requeued()
    m_writeQueue.add(job)

    return workCounter

  // --------------------------------------------------------------------------
  private function log(string message)
    if (enableLogging)
      Log.debug("[TH:{0}] ".format(m_name) + message)

// ============================================================================
public enum JobStatus
  WAITING     // In queue, hasn't started yet
  RUNNING     // In queue and has been processed at least once
  SUCCEEDED   // Out of queue, no more work to do
  CANCELED    // Out of queue, canceled by caller
  FAILED      // Out of queue, failed for some job-defined reason

// ============================================================================
public function JobStatus.toString() returns string
  switch (this)
    case WAITING
      return "Waiting"
    case RUNNING
      return "Running"
    case SUCCEEDED
      return "Succeeded"
    case CANCELED
      return "Canceled"
    case FAILED
      return "Failed"
    default
      return "<Unknown>"

// ============================================================================
public abstract class Job

  static constant Job succeeded = new CompletedJob(JobStatus.SUCCEEDED).acquire()

  private string m_id
  private Thread m_executingThread = null
  protected real m_timeout
  protected int m_startTime
  protected CancellationToken m_ct
  private JobStatus m_status = WAITING
  private Event1<Job> m_completedEvent = null
  private bool m_completed = false
  private int m_requeueCount = 0
  private string m_errorMessage = ""

  use RefObject

  // --------------------------------------------------------------------------
  construct (string id)
    m_id = id
    m_timeout = REAL_MAX
    reset()

  // --------------------------------------------------------------------------
  construct (string id, real timeout)
    m_id = id
    m_timeout = timeout
    reset()

  // --------------------------------------------------------------------------
  ondestroy

    if (m_executingThread != null)
      m_executingThread.remove(this)
      m_executingThread = null

    if (m_completedEvent != null)
      destroy m_completedEvent
      m_completedEvent = null

    if (m_ct != null)
      m_ct.release()
      m_ct = null

  // --------------------------------------------------------------------------
  function getId() returns string
    return m_id

  // --------------------------------------------------------------------------
  function isCompleted() returns bool
    return m_completed

  // --------------------------------------------------------------------------
  function getErrorMessage() returns string
    return m_errorMessage

  // --------------------------------------------------------------------------
  protected function getThread() returns Thread
    return m_executingThread

  // --------------------------------------------------------------------------
  protected function setExecutingThread(Thread value)
    if (value != null and m_executingThread != null)
      error("Job cannot be executed on more than one thread at a time!")
    m_executingThread = value
    log("Executing thread: " + (value == null ? "none" : value.getName()))

  // --------------------------------------------------------------------------
  function onCompleted() returns IEvent1<Job>
    if (m_completedEvent == null)
      m_completedEvent = new Event1<Job>()
    return m_completedEvent

  // --------------------------------------------------------------------------
  function setCancellationToken(CancellationToken ct)
    if (m_ct != null)
      m_ct.release()
    m_ct = (ct != null) ? ct.acquire() : null

  // --------------------------------------------------------------------------
  function getCancellationToken() returns CancellationToken
    return m_ct

  // --------------------------------------------------------------------------
  function getIsCancellationRequested() returns bool
    return m_ct != null and m_ct.isCanceled()

  // --------------------------------------------------------------------------
  function getStatus() returns JobStatus
    return m_status

  // --------------------------------------------------------------------------
  protected function setStatus(JobStatus value)
    m_status = value

  // --------------------------------------------------------------------------
  protected function requeued()
    m_requeueCount++

  // --------------------------------------------------------------------------
  function getRequeueCount() returns int
    return m_requeueCount

  // --------------------------------------------------------------------------
  abstract function next() returns int

  // --------------------------------------------------------------------------
  abstract function hasNext() returns bool

  // --------------------------------------------------------------------------
  function getDebuggerStateString() returns string
    return m_id

  // --------------------------------------------------------------------------
  protected function complete()
    if (m_completed)
      return

    m_completed = true

    log("Completed " + m_status.toString())

    completeInternal()

    if (m_completedEvent != null)
      m_completedEvent.call(this)

  // --------------------------------------------------------------------------
  function succeed()
    m_errorMessage = ""
    setStatus(JobStatus.SUCCEEDED)
    complete()

  // --------------------------------------------------------------------------
  function fail(string message)
    m_errorMessage = message
    setStatus(JobStatus.FAILED)
    complete()

  // --------------------------------------------------------------------------
  function cancel()
    m_errorMessage = "Canceled"
    setStatus(JobStatus.CANCELED)
    complete()

  // ----------------------------------------------------------------------------
  function reset()
    m_completed = false
    m_errorMessage = ""
    m_requeueCount = 0
    m_startTime = getRealTimeSeconds()
    setStatus(getThread() != null ? JobStatus.RUNNING : JobStatus.WAITING)

  // --------------------------------------------------------------------------
  protected function completeInternal()
    skip

  // --------------------------------------------------------------------------
  protected function log(string message)
    if (enableLogging)
      Log.debug("[JB:{0}] ".format(m_id) + message)

// ============================================================================
class CompletedJob extends Job

  // --------------------------------------------------------------------------
  construct(JobStatus status)
    super(status.toString())
    setStatus(status)
    complete()

  // --------------------------------------------------------------------------
  ondestroy
    error("This should not be destroyed!")

  // --------------------------------------------------------------------------
  override function next() returns int
    return 0

  // --------------------------------------------------------------------------
  override function hasNext() returns bool
    return false

  // --------------------------------------------------------------------------
  override function getDebuggerStateString() returns string
    return "Completed"

// ============================================================================
public class ActionJob extends Job
  private Action m_action
  private int m_counter

  // --------------------------------------------------------------------------
  construct(Action action)
    super("Action")
    m_action = action.acquire()
    m_counter = 1

  // --------------------------------------------------------------------------
  construct(string id, Action action)
    super(id)
    m_action = action.acquire()
    m_counter = 1

  // --------------------------------------------------------------------------
  construct(Action action, int timesToCall)
    super("Actionx" + timesToCall.toString())
    m_action = action.acquire()
    m_counter = timesToCall

  // --------------------------------------------------------------------------
  construct(string id, Action action, int timesToCall)
    super(id)
    m_action = action.acquire()
    m_counter = timesToCall

  // --------------------------------------------------------------------------
  ondestroy
    m_action.release()
    m_action = null

  // --------------------------------------------------------------------------
  override function next() returns int
    m_action.call()
    m_counter--
    return 1

  // --------------------------------------------------------------------------
  override function hasNext() returns bool
    return m_counter > 0

// ============================================================================
public function Thread.invoke(Action action) returns ActionJob
  let job = new ActionJob(action)
  this.enqueue(job)
  return job

// ============================================================================
public function Thread.invoke(string id, Action action) returns ActionJob
  let job = new ActionJob(id, action)
  this.enqueue(job)
  return job

// ============================================================================
public function Thread.invoke(CancellationToken ct, Action action) returns ActionJob
  let job = new ActionJob(action)..setCancellationToken(ct)
  this.enqueue(job)
  return job

// ============================================================================
public function Thread.invoke(string id, CancellationToken ct, Action action) returns ActionJob
  let job = new ActionJob(id, action)..setCancellationToken(ct)
  this.enqueue(job)
  return job

// ============================================================================
public class Action1Job<TArg1> extends Job
  private Action1<TArg1> m_action
  private TArg1 m_arg1
  private int m_index
  private int m_count

  // --------------------------------------------------------------------------
  construct(Action1<TArg1> action, TArg1 arg1)
    super("Action1")
    m_action = action.acquire()
    m_arg1 = arg1
    m_count = 1

  // --------------------------------------------------------------------------
  construct(string id, Action1<TArg1> action, TArg1 arg1)
    super(id)
    m_action = action.acquire()
    m_arg1 = arg1
    m_count = 1

  // --------------------------------------------------------------------------
  construct(Action1<TArg1> action, TArg1 arg1, int timesToCall)
    super("Action1x" + timesToCall.toString())
    m_action = action.acquire()
    m_arg1 = arg1
    m_count = timesToCall

  // --------------------------------------------------------------------------
  construct(string id, Action1<TArg1> action, TArg1 arg1, int timesToCall)
    super(id)
    m_action = action.acquire()
    m_arg1 = arg1
    m_count = timesToCall

  // --------------------------------------------------------------------------
  ondestroy
    m_action.release()
    m_action = null

  // --------------------------------------------------------------------------
  override function next() returns int
    m_action.call(m_arg1)
    m_index++
    return 1

  // --------------------------------------------------------------------------
  override function hasNext() returns bool
    return m_index < m_count

  // --------------------------------------------------------------------------
  override function getDebuggerStateString() returns string
    return m_index.toString() + "/" + m_count.toString()

// ============================================================================
public function Thread.invoke<TArg1>(Action1<TArg1> action, TArg1 arg1) returns Action1Job<TArg1>
  let actionJob = new Action1Job<TArg1>(action, arg1)
  this.enqueue(actionJob)
  return actionJob

// ============================================================================
public function Thread.invoke<TArg1>(string id, Action1<TArg1> action, TArg1 arg1) returns Action1Job<TArg1>
  let actionJob = new Action1Job<TArg1>(id, action, arg1)
  this.enqueue(actionJob)
  return actionJob

// ============================================================================
public function Thread.invoke<TArg1>(CancellationToken ct, Action1<TArg1> action, TArg1 arg1) returns Action1Job<TArg1>
  let actionJob = new Action1Job<TArg1>(action, arg1)..setCancellationToken(ct)
  this.enqueue(actionJob)
  return actionJob

// ============================================================================
public function Thread.invoke<TArg1>(string id, CancellationToken ct, Action1<TArg1> action, TArg1 arg1) returns Action1Job<TArg1>
  let actionJob = new Action1Job<TArg1>(id, action, arg1)..setCancellationToken(ct)
  this.enqueue(actionJob)
  return actionJob

// ============================================================================
public class RepeatJob extends Job
  private Action1<int> m_action
  private int m_index
  private int m_count

  // --------------------------------------------------------------------------
  construct(int count, Action1<int> action)
    super("Repeatx" + count.toString())
    m_action = action.acquire()
    m_count = count
    m_index = 0

  // --------------------------------------------------------------------------
  construct(string id, int count, Action1<int> action)
    super(id)
    m_action = action.acquire()
    m_count = count
    m_index = 0

  // --------------------------------------------------------------------------
  ondestroy
    m_action.release()
    m_action = null

  // --------------------------------------------------------------------------
  override function next() returns int
    m_action.call(m_index)
    m_index++
    return 1

  // --------------------------------------------------------------------------
  override function hasNext() returns bool
    return m_index < m_count

  // --------------------------------------------------------------------------
  override function getDebuggerStateString() returns string
    return m_index.toString() + "/" + m_count.toString()

// ============================================================================
public function Thread.repeat(int count, Action1<int> action) returns RepeatJob
  let job = new RepeatJob(count, action)
  this.enqueue(job)
  return job

// ============================================================================
public function Thread.repeat(string id, int count, Action1<int> action) returns RepeatJob
  let job = new RepeatJob(id, count, action)
  this.enqueue(job)
  return job

// ============================================================================
public function Thread.repeat(CancellationToken ct, int count, Action1<int> action) returns RepeatJob
  let job = new RepeatJob(count, action)..setCancellationToken(ct)
  this.enqueue(job)
  return job

// ============================================================================
public function Thread.repeat(string id, CancellationToken ct, int count, Action1<int> action) returns RepeatJob
  let job = new RepeatJob(id, count, action)..setCancellationToken(ct)
  this.enqueue(job)
  return job

// ============================================================================
public class FuncJob<TResult> extends Job
  private Func<TResult> m_func
  private TResult m_result
  private bool m_called
  private Event1<TResult> m_resultEvent

  // --------------------------------------------------------------------------
  construct(Func<TResult> func)
    super("Func")
    m_func = func.acquire()

  // --------------------------------------------------------------------------
  construct(string id, Func<TResult> func)
    super(id)
    m_func = func.acquire()

  // --------------------------------------------------------------------------
  ondestroy
    m_func.release()
    m_func = null

    if (m_resultEvent != null)
      destroy m_resultEvent
      m_resultEvent = null

  // --------------------------------------------------------------------------
  function getResult() returns TResult
    return m_result

  // --------------------------------------------------------------------------
  function onResult() returns IEvent1<TResult>
    if (m_resultEvent == null)
      m_resultEvent = new Event1<TResult>()
    return m_resultEvent

  // --------------------------------------------------------------------------
  override protected function completeInternal()
    if (m_resultEvent != null)
      m_resultEvent.call(m_result)

  // --------------------------------------------------------------------------
  override function next() returns int
    m_result = m_func.call()
    m_called = true
    return 1

  // --------------------------------------------------------------------------
  override function hasNext() returns bool
    return not m_called

// ============================================================================
public function Thread.invokeFunc<TResult>(Func<TResult> func) returns FuncJob<TResult>
  let job = new FuncJob(func)
  this.enqueue(job)
  return job

// ============================================================================
public function Thread.invokeFunc<TResult>(string id, Func<TResult> func) returns FuncJob<TResult>
  let job = new FuncJob(id, func)
  this.enqueue(job)
  return job

// ============================================================================
public function Thread.invokeFunc<TResult>(CancellationToken ct, Func<TResult> func) returns FuncJob<TResult>
  let job = new FuncJob(func)..setCancellationToken(ct)
  this.enqueue(job)
  return job

// ============================================================================
public function Thread.invokeFunc<TResult>(string id, CancellationToken ct, Func<TResult> func) returns FuncJob<TResult>
  let job = new FuncJob(id, func)..setCancellationToken(ct)
  this.enqueue(job)
  return job

// ============================================================================
public class WhileJob extends Job
  private Action1<int> m_action
  private Func<bool> m_condition
  private int m_index

  // --------------------------------------------------------------------------
  construct(Action1<int> action, Func<bool> condition)
    super("While")
    m_action = action.acquire()
    m_condition = condition.acquire()
    m_index = 0

  // --------------------------------------------------------------------------
  construct(string id, Action1<int> action, Func<bool> condition)
    super(id)
    m_action = action.acquire()
    m_condition = condition.acquire()
    m_index = 0

  // --------------------------------------------------------------------------
  ondestroy
    m_action.release()
    m_action = null

    m_condition.release()
    m_condition = null

  // --------------------------------------------------------------------------
  override function next() returns int
    m_action.call(m_index)
    m_index++
    return 1

  // --------------------------------------------------------------------------
  override function hasNext() returns bool
    return m_condition.call()

// ============================================================================
public function Thread.repeatWhile(Action1<int> action, Func<bool> condition) returns WhileJob
  let job = new WhileJob(action, condition)
  this.enqueue(job)
  return job

// ============================================================================
public function Thread.repeatWhile(string id, Action1<int> action, Func<bool> condition) returns WhileJob
  let job = new WhileJob(id, action, condition)
  this.enqueue(job)
  return job

// ============================================================================
public function Thread.repeatWhile(CancellationToken ct, Action1<int> action, Func<bool> condition) returns WhileJob
  let job = new WhileJob(action, condition)..setCancellationToken(ct)
  this.enqueue(job)
  return job

// ============================================================================
public function Thread.repeatWhile(string id, CancellationToken ct, Action1<int> action, Func<bool> condition) returns WhileJob
  let job = new WhileJob(id, action, condition)..setCancellationToken(ct)
  this.enqueue(job)
  return job

// ============================================================================
public abstract class JobGroup extends Job
  private LinkedList<Job> m_jobs = new LinkedList<Job>()
  private LinkedList<_handle> m_callbacks = new LinkedList<_handle>()

  // --------------------------------------------------------------------------
  construct(string id)
    super(id)

  // --------------------------------------------------------------------------
  ondestroy

    while m_jobs.isEmpty() == false
      let job = m_jobs.get(0)
      job.onCompleted().unregister(m_callbacks.get(0))
      m_jobs.removeAt(0)
      m_callbacks.removeAt(0)
      job.release()

    destroy m_jobs
    m_jobs = null

    destroy m_callbacks
    m_callbacks = null

  // --------------------------------------------------------------------------
  function addJob(Job job)
    job.acquire()
    m_jobs.add(job)
    let callback = job.onCompleted().register() (Job childJob) ->
      onChildJobCompleted(childJob)
    m_callbacks.add(callback)

  // --------------------------------------------------------------------------
  function removeJob(Job job)
    let index = m_jobs.indexOf(job)
    if (index == -1)
      return

    m_jobs.removeAt(index)
    let callback = m_callbacks.get(index)
    job.onCompleted().unregister(callback)
    m_callbacks.removeAt(index)
    job.release()

  // --------------------------------------------------------------------------
  function getJobCount() returns int
    return m_jobs.size()

  // --------------------------------------------------------------------------
  protected function onChildJobCompleted(Job _childJob)
    skip

// ============================================================================
public class WhenAllJob extends JobGroup
  private int m_jobsCompleted = 0

  // --------------------------------------------------------------------------
  construct()
    super("WhenAll")

  // --------------------------------------------------------------------------
  construct(string id)
    super(id)

  // --------------------------------------------------------------------------
  override function next() returns int
    return 0 // did no work, just waiting on jobs

  // --------------------------------------------------------------------------
  override function hasNext() returns bool
    return m_jobsCompleted < getJobCount()

  // --------------------------------------------------------------------------
  override function getDebuggerStateString() returns string
    return m_jobsCompleted.toString() + "/" + getJobCount().toString()

  // --------------------------------------------------------------------------
  override protected function onChildJobCompleted(Job childJob)
    m_jobsCompleted++

// ============================================================================
public class WhenAnyJob extends JobGroup
  private int m_jobsCompleted = 0
  private JobStatus m_filter

  // --------------------------------------------------------------------------
  construct()
    super("WhenAny")
    m_filter = JobStatus.SUCCEEDED

  // --------------------------------------------------------------------------
  construct(string id)
    super(id)
    m_filter = JobStatus.SUCCEEDED

  // --------------------------------------------------------------------------
  construct(JobStatus filter)
    super("WhenAny" + filter.toString())
    m_filter = filter

  // --------------------------------------------------------------------------
  construct(string id, JobStatus filter)
    super(id)
    m_filter = filter

  // --------------------------------------------------------------------------
  override function next() returns int
    return 0 // did no work, just waiting on jobs

  // --------------------------------------------------------------------------
  override function hasNext() returns bool
    return m_jobsCompleted < 1

  // --------------------------------------------------------------------------
  override protected function onChildJobCompleted(Job childJob)
    if (childJob.getStatus() == m_filter)
      m_jobsCompleted++

// ============================================================================
class TestJob extends Job

  int nextValue = 0
  bool hasNextValue = true

  // --------------------------------------------------------------------------
  construct()
    super("TestJob")

  // --------------------------------------------------------------------------
  construct(string id)
    super(id)

  // --------------------------------------------------------------------------
  override function next() returns int
    return nextValue

  // --------------------------------------------------------------------------
  override function hasNext() returns bool
    return hasNextValue

// ============================================================================
@test function thread_enqueue_adds_jobs_to_write_queue()

  let thread = new Thread("TestThread")

  Job array[3] jobs

  for i = 0 to 2
    jobs[i] = new TestJob("TestJob" + i.toString())
    thread.enqueue(jobs[i])

  thread.getReadQueue().isEmpty().assertTrue()
  thread.getWriteQueue().size().assertEquals(3)

  for i = 0 to 2
    thread.getWriteQueue().indexOf(jobs[i]).assertEquals(i)

// ============================================================================
@test function thread_processReadQueue_swaps_read_write_queues_when_read_queue_is_empty()

  let thread = new Thread("TestThread")
  ..setMaxWorkPerTick(1)

  Job array[3] jobs

  for i = 0 to 2
    jobs[i] = new TestJob("TestJob" + i.toString())
    thread.enqueue(jobs[i])

  let writeQueue1 = thread.getWriteQueue()
  let readQueue1 = thread.getReadQueue()

  // Process the queue once
  thread.processReadQueue()

  let writeQueue2 = thread.getWriteQueue()
  let readQueue2 = thread.getReadQueue()

  // Should have swapped queues since the read queue was empty
  assertTrue(writeQueue2 == readQueue1)
  assertTrue(readQueue2 == writeQueue1)

// ============================================================================
@test function thread_processReadQueue_requeues_job_when_hasNext_is_true()

  let thread = new Thread("TestThread")
  ..setMaxWorkPerTick(1)

  let job = new TestJob()
  job.hasNextValue = true

  thread.enqueue(job)

  // Process the queue once
  thread.processReadQueue()

  // Should have been automatically requeued
  thread.getWriteQueue().contains(job).assertTrue()

// ============================================================================
@test function asdf()

  let thread = new Thread("TestThread")
  ..setMaxWorkPerTick(1)

  let job = new TestJob()

  job.nextValue = 1
  job.hasNextValue = true

  // Writes to the write queue
  thread.enqueue(job)

  let writeQueue1 = thread.getWriteQueue()
  let readQueue1 = thread.getReadQueue()

  writeQueue1.size().assertEquals(1)
  thread.getRemainingWorkCount().assertEquals(1)

  // Process our job once
  thread.processReadQueue()

  let writeQueue2 = thread.getWriteQueue()
  let readQueue2 = thread.getReadQueue()

  // Should have swapped queues to process read queue
  assertTrue(writeQueue2 == readQueue1)
  assertTrue(readQueue2 == writeQueue1)

  // We should have processed our one job once
  thread.getRemainingWorkCount().assertEquals(1)

  // Our job should have been requeued since hasNextValue was true
  writeQueue2.contains(job).assertTrue()