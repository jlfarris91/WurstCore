package HeroAge
import HashMap
import UnitIndexer
import GroupUtils

HashMap<unit, int> g_heroCountAtIndex = new HashMap<unit, int>()
conditionfunc g_enumUnitIsHero = Condition(function enumUnitIsHero)

// ============================================================================
@configurable public function shouldCountHeroForHeroAge(unit _hero) returns bool
  return IsHeroUnitId(_hero.getTypeId())

// ============================================================================
public function unit.getHeroAge() returns int
  return IsHeroUnitId(this.getTypeId()) ? g_heroCountAtIndex.get(this) : 0

// ============================================================================
function player.countNumberOfHeroes() returns int
  let temp = getGroup()
  temp.enumUnitsOfPlayer(this, g_enumUnitIsHero)
  let result = temp.size()
  temp.release()
  return result

// ============================================================================
function enumUnitIsHero() returns bool
  return shouldCountHeroForHeroAge(GetFilterUnit())

// ============================================================================
init
  onUnitIndex() () ->
    let indexingUnit = getIndexingUnit()
    if (shouldCountHeroForHeroAge(indexingUnit))
      g_heroCountAtIndex.put(indexingUnit, indexingUnit.getOwner().countNumberOfHeroes())

  onUnitDeindex() () ->
    let indexingUnit = getIndexingUnit()
    if (shouldCountHeroForHeroAge(indexingUnit))
      g_heroCountAtIndex.remove(indexingUnit)