package Union
import ErrorHandling
import ObjectIds

// ============================================================================
public enum UnionType
  String
  Real
  Int
  Bool
  FourCC

// ============================================================================
public class Union
  private UnionType m_type
  private string m_value

  // --------------------------------------------------------------------------
  construct()
    m_type = UnionType.String
    m_value = ""

  // --------------------------------------------------------------------------
  construct(UnionType unionType, string value)
    m_type = unionType
    m_value = value

  // --------------------------------------------------------------------------
  function getType() returns UnionType
    return m_type
    
  // --------------------------------------------------------------------------
  function getString() returns string
    if (getType() != UnionType.String)
      error("Expected union to be type String")
    return m_value

  // --------------------------------------------------------------------------
  function setString(string value) returns bool
    if (m_type == UnionType.String and m_value == value)
      return false
    m_type = UnionType.String
    m_value = value
    return true

  // --------------------------------------------------------------------------
  function getReal() returns real
    if (getType() != UnionType.Real)
      error("Expected union to be type Real")
    return m_value.toReal()

  // --------------------------------------------------------------------------
  function setReal(real value) returns bool
    let newValueStr = value.toString()
    if (m_type == UnionType.Real and m_value == newValueStr)
      return false
    m_type = UnionType.Real
    m_value = newValueStr
    return true
    
  // --------------------------------------------------------------------------
  function getInt() returns int
    if (getType() != UnionType.Int)
      error("Expected union to be type Int")
    return m_value.toInt()

  // --------------------------------------------------------------------------
  function setInt(int value) returns bool
    let newValueStr = value.toString()
    if (m_type == UnionType.Int and m_value == newValueStr)
      return false
    m_type = UnionType.Int
    m_value = newValueStr
    return true
    
  // --------------------------------------------------------------------------
  function getBool() returns bool
    if (getType() != UnionType.Bool)
      error("Expected union to be type Bool")
    return m_value.toBool()

  // --------------------------------------------------------------------------
  function setBool(bool value) returns bool
    let newValueStr = value.toString()
    if (m_type == UnionType.Bool and m_value == newValueStr) 
      return false
    m_type = UnionType.Bool
    m_value = newValueStr
    return true

  // --------------------------------------------------------------------------
  function setRawCode(int id) returns bool
    let newValueStr = id.toString()
    if (m_type == UnionType.FourCC and m_value == newValueStr)
      return false
    m_type = UnionType.FourCC
    m_value = id.toRawCode()
    return true

  // --------------------------------------------------------------------------
  function getRawCode() returns int
    if (getType() != UnionType.FourCC)
      error("Expected union to be type FourCC")
    return m_value.fromRawCode()    

  // --------------------------------------------------------------------------
  function setFourCC(string fourCC) returns bool
    if (m_type == UnionType.FourCC and m_value == fourCC)
      return false
    if (fourCC.length() != 4)
      error("FourCC value must be 4 characters long")
    m_type = UnionType.FourCC
    m_value = fourCC
    return true

  // --------------------------------------------------------------------------
  function getFourCC() returns string
    if (getType() != UnionType.FourCC)
      error("Expected union to be type FourCC")
    return m_value

  // --------------------------------------------------------------------------
  function toString() returns string
    return m_value

  // --------------------------------------------------------------------------
  function equals(Union other) returns bool
    return m_value == other.m_value

  // --------------------------------------------------------------------------
  function clone() returns Union
    let clone = new Union()
    switch (m_type)
      case UnionType.String
        clone.setString(getString())
      case UnionType.Real
        clone.setReal(getReal())
      case UnionType.Int
        clone.setInt(getInt())
      case UnionType.Bool
        clone.setBool(getBool())
      case UnionType.FourCC
        clone.setFourCC(getFourCC())
    return clone

  // --------------------------------------------------------------------------
  static function fromString(string value) returns Union
    return new Union(UnionType.String, value)

  // --------------------------------------------------------------------------
  static function fromInt(int value) returns Union
    return new Union(UnionType.Int, value.toString())

  // --------------------------------------------------------------------------
  static function fromReal(real value) returns Union
    return new Union(UnionType.Real, value.toString())

  // --------------------------------------------------------------------------
  static function fromBool(bool value) returns Union
    return new Union(UnionType.Bool, value.toString())