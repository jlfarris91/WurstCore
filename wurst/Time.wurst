package Time
import Math
import HashMap

@configurable public constant real TIME_OF_DAY = 6.0
@configurable public constant real TIME_OF_NIGHT = 18.0
@configurable public constant real TIME_SECONDS_PER_DAY = 480.0

public constant TICKS_PER_MINUTE = 1
public constant TICKS_PER_HOUR = 60
public constant TICKS_PER_DAY = 1440

public constant time DAY_TIME = makeTime(0, TIME_OF_DAY)
public constant time NIGHT_TIME = makeTime(0, TIME_OF_NIGHT)
public constant timespan DAY_LENGTH = makeTimespan(0, 12, 0)
public constant timespan NIGHT_LENGTH = makeTimespan(0, 12, 0)

public constant time TIME_GAME_START = time(0)

int g_day
HashMap<real, trigger> g_timeOfDayTriggerMap = new HashMap<real, trigger>()

// ============================================================================
public class Time
  static time dawn = makeTime(0, 6, 0)
  static time noon = makeTime(0, 12, 0)
  static time dusk = makeTime(0, 18, 0)
  static time midnight = makeTime(0, 24, 0)

// ============================================================================
//
// time
//
// ============================================================================

public tuple time(int ticks)

// ============================================================================
public function makeTime(int ticks) returns time
  return time(max(ticks, 0))

// ============================================================================
public function makeTime(int day, int hour, int minute) returns time
  return makeTime(day * TICKS_PER_DAY + hour * TICKS_PER_HOUR + minute * TICKS_PER_MINUTE)

// ============================================================================
// timeOfDay is expected to be a value between 0.0 and 24.0
public function makeTime(real timeOfDay) returns time
  return makeTime(g_day, timeOfDay)

// ============================================================================
// timeOfDay is expected to be a value between 0.0 and 24.0
public function makeTime(int day, real timeOfDay) returns time
  return makeTime(R2I(day * TICKS_PER_DAY + (timeOfDay / 24.0) * TICKS_PER_DAY))

// ============================================================================
public function time.getDay() returns int
  return max(R2I((I2R(this.ticks) / I2R(TICKS_PER_DAY))), 0)

// ============================================================================
public function time.getHour() returns int
  return max(R2I((I2R(this.ticks) / I2R(TICKS_PER_HOUR))) mod 24, 0)

// ============================================================================
public function time.getMinute() returns int
  return max(R2I((I2R(this.ticks) / I2R(TICKS_PER_MINUTE))) mod 60, 0)

// ============================================================================
public function time.asTimeSpan() returns timespan
  return timespan(this.ticks)

// ============================================================================
// Returns the unclamped time of day in military time.
public function time.getTimeOfDay() returns real
  return I2R(this.getHour()) + I2R(this.getMinute()) / 60.0

// ============================================================================
public function time.op_plus(timespan span) returns time
  return makeTime(this.ticks + span.ticks)

// ============================================================================
public function time.op_minus(time other) returns timespan
  return timespan(this.ticks - other.ticks)

// ============================================================================
public function time.op_minus(timespan span) returns time
  return makeTime(this.ticks - span.ticks)

// ============================================================================
public function time.clamp(time min, time max) returns time
  return makeTime(clamp(this.ticks, min.ticks, max.ticks))

// ============================================================================
public function time.parameterize(time start, time _end) returns real
  return I2R((this - start).ticks) / I2R((_end - start).ticks)

// ============================================================================
public function time.isBetween(time start, time _end) returns bool
  return this.ticks.isBetween(start.ticks, _end.ticks)

// ============================================================================
public function time.toString() returns string
  let hour = this.getHour()
  let minute = this.getMinute()
  let minuteStr = minute < 10 ? "0" + minute.toString() : minute.toString()
  return "{0} {1}:{2} {3}".format(this.getDay().toString(), hour.toString(), minuteStr, hour < 12 ? "AM" : "PM")

// ============================================================================
public function time.assertEquals(time expected)
  if this != expected
    testFail("Expected <" + expected.toString() + ">, Actual <" + this.toString() + ">")

// ============================================================================
public function getGameTime() returns time
  return makeTime(GetTimeOfDay())

// ============================================================================
//
// timespan
//
// ============================================================================

public tuple timespan(int ticks)

// ============================================================================
public function makeTimespan(int days, int hours, int minutes) returns timespan
  return timespan(days * TICKS_PER_DAY + hours * TICKS_PER_HOUR + minutes * TICKS_PER_MINUTE)

// ============================================================================
public function makeTimespan(real timeOfDay) returns timespan
  return timespan(R2I((timeOfDay / 24.0) * TICKS_PER_DAY))

// ============================================================================
public function timespan.getDays() returns int
  return R2I((I2R(this.ticks) / I2R(TICKS_PER_DAY)))

// ============================================================================
public function timespan.getHours() returns int
  return R2I((I2R(this.ticks) / I2R(TICKS_PER_HOUR))) mod 24

// ============================================================================
public function timespan.getMinutes() returns int
  return R2I((I2R(this.ticks) / I2R(TICKS_PER_MINUTE))) mod 60

// ============================================================================
// Gets the total elapsed time in days.
public function timespan.getTotalDays() returns real
  return I2R(this.ticks) / I2R(TICKS_PER_DAY)

// ============================================================================
// Gets the total elapsed time in hours.
public function timespan.getTotalHours() returns real
  return I2R(this.ticks) / I2R(TICKS_PER_HOUR)

// ============================================================================
// Gets the total elapsed time in minutes.
public function timespan.getTotalMinutes() returns real
  return I2R(this.ticks) / I2R(TICKS_PER_MINUTE)

// ============================================================================
public function timespan.op_plus(timespan other) returns timespan
  return timespan(this.ticks + other.ticks)

// ============================================================================
public function timespan.op_minus(timespan other) returns timespan
  return timespan(this.ticks - other.ticks)

// ============================================================================
public function timespan.op_mult(real value) returns timespan
  return timespan(R2I(this.ticks * value))

// ============================================================================
public function timespan.op_divReal(timespan other) returns real
  return this.ticks / other.ticks

// ============================================================================
public function timespan.clamp(timespan min, timespan max) returns timespan
  return timespan(clamp(this.ticks, min.ticks, max.ticks))

// ============================================================================
public function timespan.toString() returns string
  let days = this.getDays()
  let hours = this.getHours()
  let hoursStr = hours < 10 ? "0" + hours.toString() : hours.toString()
  let minutes = this.getMinutes()
  let minutesStr = minutes < 10 ? "0" + minutes.toString() : minutes.toString()
  let hoursMinutesStr = "{0}:{1}".format(hoursStr, minutesStr)
  return (days != 0) ? "{0}.{1}".format(days.toString(), hoursMinutesStr) : hoursMinutesStr

// ============================================================================
public function timespan.assertEquals(timespan expected)
  if this != expected
    testFail("Expected <" + expected.toString() + ">, Actual <" + this.toString() + ">")

// ============================================================================
public function timespan.toRealWorldSeconds() returns real
  return this.getTotalDays() * (TIME_SECONDS_PER_DAY / GetTimeOfDayScale())

// ============================================================================
public function timespan.toRealWorldTimeString() returns string
  let realWorldSecondsTotal = this.toRealWorldSeconds()
  let realWorldMinutes = (realWorldSecondsTotal / 60.0).floor()
  let realWorldMinutesStr = realWorldMinutes < 10 ? "0" + realWorldMinutes.toString() : realWorldMinutes.toString()
  let realWorldSeconds = realWorldSecondsTotal.floor() mod 60
  let realWorldSecondsStr = realWorldSeconds < 10 ? "0" + realWorldSeconds.toString() : realWorldSeconds.toString()
  return "{0}:{1}".format(realWorldMinutesStr, realWorldSecondsStr)

// ============================================================================
public function getElapsedGameTime() returns timespan
  return getGameTime().asTimeSpan()

// ============================================================================
//
// Utility Methods
//
// ============================================================================

// ============================================================================
public function getDay() returns int
  return g_day

// ============================================================================
public function setDay(int day)
  g_day = day

// ============================================================================
public function isDay() returns bool
  let currentTime = GetTimeOfDay()
  return currentTime >= TIME_OF_DAY and currentTime < TIME_OF_NIGHT

// ============================================================================
public function isNight() returns bool
  let currentTime = GetTimeOfDay()
  return currentTime >= TIME_OF_NIGHT or currentTime < TIME_OF_DAY

// ============================================================================
public function registerDayEvent(code callback)
  registerTimeOfDayEvent(TIME_OF_DAY, callback)

// ============================================================================
public function registerNightEvent(code callback)
  registerTimeOfDayEvent(TIME_OF_NIGHT, callback)

// ============================================================================
public function registerTimeOfDayEvent(real timeOfDay, code callback)
  registerTimeOfDayEvent(timeOfDay, Filter(callback))

// ============================================================================
public function registerTimeOfDayEvent(real timeOfDay, filterfunc callback)
  var t = g_timeOfDayTriggerMap.get(timeOfDay)
  if (t == null)
    t = CreateTrigger()
    t.registerGameStateEvent(GAME_STATE_TIME_OF_DAY, EQUAL, timeOfDay)
    g_timeOfDayTriggerMap.put(timeOfDay, t)
  t.addCondition(callback)

// ============================================================================
function onNewDay()
  setDay(getDay() + 1)

// ============================================================================
init
  registerTimeOfDayEvent(0.0, function onNewDay)
  Log.info("night length: " + NIGHT_LENGTH.toString())

// ============================================================================
//
// Tests
//
// ============================================================================

// ============================================================================
@test function makeTime()
  makeTime(0, 0, 0).assertEquals(makeTime(0, 0, 0))
  makeTime(1, 2, 3).assertEquals(makeTime(1, 2, 3))

  // Minute overrun
  makeTime(1, 0, 1440).assertEquals(makeTime(2, 0, 0))
  makeTime(1, 0, -1440).assertEquals(makeTime(0, 0, 0))
  makeTime(1, 0, 60).assertEquals(makeTime(1, 1, 0))
  makeTime(1, 0, 61).assertEquals(makeTime(1, 1, 1))
  makeTime(1, 0, 120).assertEquals(makeTime(1, 2, 0))
  makeTime(1, 0, 121).assertEquals(makeTime(1, 2, 1))
  
  // Hour overrun
  makeTime(1, 24, 0).assertEquals(makeTime(2, 0, 0))
  makeTime(1, 25, 0).assertEquals(makeTime(2, 1, 0))
  makeTime(1, 48, 0).assertEquals(makeTime(3, 0, 0))
  makeTime(1, 49, 0).assertEquals(makeTime(3, 1, 0))

  // (1, 23, 60) -> (1, 24, 0) -> (2, 0, 0)
  makeTime(1, 23, 60).assertEquals(makeTime(2, 0, 0))

  // (1, 24, 60) -> (1, 25, 0) -> (2, 1, 0)
  makeTime(1, 24, 60).assertEquals(makeTime(2, 1, 0))

  // (1, 48, 120) -> (1, 50, 0) -> (3, 2, 0)
  makeTime(1, 48, 120).assertEquals(makeTime(3, 2, 0))

  makeTime(0, 0.0).assertEquals(makeTime(0,0,0))
  makeTime(0, 12.0).assertEquals(makeTime(0,12,0))
  makeTime(0, 24.0).assertEquals(makeTime(1,0,0))

  makeTime(1, 0.0).assertEquals(makeTime(1,0,0))
  makeTime(1, 12.0).assertEquals(makeTime(1,12,0))
  makeTime(1, 24.0).assertEquals(makeTime(2,0,0))

// ============================================================================
@test function timeGetTimeOfDay()
  makeTime(0, 0, 0).getTimeOfDay().assertEquals(0.0)
  makeTime(0, 12, 0).getTimeOfDay().assertEquals(12.0)
  makeTime(0, 24, 0).getTimeOfDay().assertEquals(0.0)
  makeTime(1, 0, 0).getTimeOfDay().assertEquals(0.0)
  makeTime(1, 12, 0).getTimeOfDay().assertEquals(12.0)
  makeTime(1, 24, 0).getTimeOfDay().assertEquals(0.0)

// ============================================================================
@test function timeGetDay()
  makeTime(1, 2, 3).getDay().assertEquals(1)
  makeTime(-1, 0, 0).getDay().assertEquals(0)

// ============================================================================
@test function timeGetHour()
  makeTime(1, 2, 3).getHour().assertEquals(2)
  makeTime(0, -1, 0).getHour().assertEquals(0)

// ============================================================================
@test function timeGetMinute()
  makeTime(1, 2, 3).getMinute().assertEquals(3)
  makeTime(0, 0, -1).getMinute().assertEquals(0)

// ============================================================================
@test function makeTimespan()
  makeTimespan(0, 0, 0).assertEquals(makeTimespan(0, 0, 0))
  makeTimespan(1, 2, 3).assertEquals(makeTimespan(1, 2, 3))

  // Minute positive overrun
  makeTimespan(1, 0, 1440).assertEquals(makeTimespan(2, 0, 0))
  makeTimespan(1, 0, 60).assertEquals(makeTimespan(1, 1, 0))
  makeTimespan(1, 0, 61).assertEquals(makeTimespan(1, 1, 1))
  makeTimespan(1, 0, 120).assertEquals(makeTimespan(1, 2, 0))
  makeTimespan(1, 0, 121).assertEquals(makeTimespan(1, 2, 1))

  // Minute negative overrun
  makeTimespan(1, 0, -1440).assertEquals(makeTimespan(0, 0, 0))
  makeTimespan(1, 0, -60).assertEquals(makeTimespan(1, -1, 0))
  makeTimespan(1, 0, -61).assertEquals(makeTimespan(1, -1, -1))
  makeTimespan(1, 0, -120).assertEquals(makeTimespan(1, -2, 0))
  makeTimespan(1, 0, -121).assertEquals(makeTimespan(1, -2, -1))
  
  // Hour positive overrun
  makeTimespan(0, 24, 0).assertEquals(makeTimespan(1, 0, 0))
  makeTimespan(1, 24, 0).assertEquals(makeTimespan(2, 0, 0))
  makeTimespan(1, 25, 0).assertEquals(makeTimespan(2, 1, 0))
  makeTimespan(0, 48, 0).assertEquals(makeTimespan(2, 0, 0))
  makeTimespan(1, 48, 0).assertEquals(makeTimespan(3, 0, 0))
  makeTimespan(1, 49, 0).assertEquals(makeTimespan(3, 1, 0))
  
  // Hour negative overrun
  makeTimespan(0, -24, 0).assertEquals(makeTimespan(-1, 0, 0))
  makeTimespan(1, -24, 0).assertEquals(makeTimespan(0, 0, 0))
  makeTimespan(1, -25, 0).assertEquals(makeTimespan(0, -1, 0))
  makeTimespan(0, -48, 0).assertEquals(makeTimespan(-2, 0, 0))
  makeTimespan(1, -48, 0).assertEquals(makeTimespan(-1, 0, 0))
  makeTimespan(1, -49, 0).assertEquals(makeTimespan(-1, -1, 0))

  // (1, 23, 60) -> (1, 24, 0) -> (2, 0, 0)
  makeTimespan(1, 23, 60).assertEquals(makeTimespan(2, 0, 0))
  makeTimespan(1, -23, -60).assertEquals(makeTimespan(0, 0, 0))

  // (1, 24, 60) -> (1, 25, 0) -> (2, 1, 0)
  makeTimespan(1, 24, 60).assertEquals(makeTimespan(2, 1, 0))

  // (1, -24, -60) -> (1, -25, 0) -> (0, -1, 0)
  makeTimespan(1, -24, -60).assertEquals(makeTimespan(0, -1, 0))

  // (1, 48, 120) -> (1, 50, 0) -> (3, 2, 0)
  makeTimespan(1, 48, 120).assertEquals(makeTimespan(3, 2, 0))

  // (1, -48, -120) -> (1, -50, 0) -> (-1, -2, 0)
  makeTimespan(1, -48, -120).assertEquals(makeTimespan(-1, -2, 0))  

// ============================================================================
@test function timespanGetDays()
  makeTimespan(1, 2, 3).getDays().assertEquals(1)
  makeTimespan(-1, 0, 0).getDays().assertEquals(-1)

// ============================================================================
@test function timespanGetHours()
  makeTimespan(1, 2, 3).getHours().assertEquals(2)
  makeTimespan(0, -1, 0).getHours().assertEquals(23)

// ============================================================================
@test function timespanGetMinutes()
  makeTimespan(1, 2, 3).getMinutes().assertEquals(3)
  makeTimespan(0, 0, -1).getMinutes().assertEquals(59)

// ============================================================================
@test function timespanGetTotalDays()
  makeTimespan(1, 0, 0).getTotalDays().assertEquals(1)
  makeTimespan(0, 24, 0).getTotalDays().assertEquals(1)
  makeTimespan(0, 0, 1440).getTotalDays().assertEquals(1)

// ============================================================================
@test function timespanGetTotalHours()
  makeTimespan(1, 0, 0).getTotalHours().assertEquals(24)
  makeTimespan(0, 24, 0).getTotalHours().assertEquals(24)
  makeTimespan(0, 0, 1440).getTotalHours().assertEquals(24)

// ============================================================================
@test function timespanGetTotalMinutes()
  makeTimespan(1, 0, 0).getTotalMinutes().assertEquals(1440)
  makeTimespan(0, 24, 0).getTotalMinutes().assertEquals(1440)
  makeTimespan(0, 0, 1440).getTotalMinutes().assertEquals(1440)

// ============================================================================
@test function timeOpPlus()
  (makeTime(1, 2, 3) + makeTimespan(1, 2, 3)).assertEquals(makeTime(2, 4, 6))
  (makeTime(1, 12, 0) + makeTimespan(1, 12, 0)).assertEquals(makeTime(3, 0, 0))
  (makeTime(1, 23, 0) + makeTimespan(1, 0, 60)).assertEquals(makeTime(3, 0, 0))
  (makeTime(1, 23, 0) + makeTimespan(1, 1, 0)).assertEquals(makeTime(3, 0, 0))
  (makeTime(1, 2, 3) + makeTimespan(1, 48, 120)).assertEquals(makeTime(4, 4, 3))
  (makeTime(0, 18, 0) + makeTimespan(0, 12, 0)).assertEquals(makeTime(1, 6, 0))

// ============================================================================
@test function timeOpMinusTime()
  (makeTime(1, 2, 3) - makeTime(1, 2, 3)).assertEquals(makeTimespan(0, 0, 0))
  (makeTime(1, 0, 0) - makeTime(1, 0, 0)).assertEquals(makeTimespan(0, 0, 0))
  (makeTime(1, 12, 0) - makeTime(1, 12, 0)).assertEquals(makeTimespan(0, 0, 0))
  (makeTime(1, 24, 0) - makeTime(1, 24, 0)).assertEquals(makeTimespan(0, 0, 0))
  (makeTime(1, 0, 0) - makeTime(0, 24, 0)).assertEquals(makeTimespan(0, 0, 0))

  (makeTime(1, 6, 0) - makeTime(0, 18, 0)).assertEquals(makeTimespan(0, 12, 0))
  (makeTime(0, 18, 0) - makeTime(1, 6, 0)).assertEquals(makeTimespan(0, -12, 0))
  (makeTime(1, 18, 0) - makeTime(0, 6, 0)).assertEquals(makeTimespan(1, 12, 0))
  (makeTime(0, 6, 0) - makeTime(1, 18, 0)).assertEquals(makeTimespan(-1, -12, 0))

// ============================================================================
@test function timeOpMinusTimespan()
  (makeTime(1, 2, 3) - makeTimespan(1, 2, 3)).assertEquals(makeTime(0, 0, 0))
  (makeTime(1, 12, 0) - makeTimespan(1, 12, 0)).assertEquals(makeTime(0, 0, 0))
  (makeTime(1, 24, 0) - makeTimespan(1, 0, 1440)).assertEquals(makeTime(0, 0, 0))
  (makeTime(1, 6, 0) - makeTimespan(0, 18, 0)).assertEquals(makeTime(0, 12, 0))
  (makeTime(1, 18, 0) - makeTimespan(0, 6, 0)).assertEquals(makeTime(1, 12, 0))
  (makeTime(1, 0, 0) - makeTimespan(0, 24, 0)).assertEquals(makeTime(0, 0, 0))
  (makeTime(1, 0, 0) - makeTimespan(2, 0, 0)).assertEquals(makeTime(-1, 0, 0))

// ============================================================================
@test function timespanOpDivReal()
  (makeTimespan(0, 0, 0) / makeTimespan(2, 4, 6)).assertEquals(0.0)
  (makeTimespan(1, 2, 3) / makeTimespan(2, 4, 6)).assertEquals(0.5)
  (makeTimespan(2, 4, 6) / makeTimespan(2, 4, 6)).assertEquals(1.0)

// ============================================================================
@test function timeClamp()
  makeTime(1, 2, 3).clamp(makeTime(0, 0, 0), makeTime(1, 0, 0)).assertEquals(makeTime(1,0,0))
  makeTime(0, -2, 0).clamp(makeTime(0, 0, 0), makeTime(1, 0, 0)).assertEquals(makeTime(0,0,0))

// ============================================================================
@test function timespanClamp()
  makeTimespan(1, 2, 3).clamp(makeTimespan(0, 0, 0), makeTimespan(1, 0, 0)).assertEquals(makeTimespan(1,0,0))
  makeTimespan(0, -2, 0).clamp(makeTimespan(0, 0, 0), makeTimespan(1, 0, 0)).assertEquals(makeTimespan(0,0,0))

// ============================================================================
@test function timeParameterize()
  makeTime(0, 0, 0).parameterize(makeTime(0, 0, 0), makeTime(1, 0, 0)).assertEquals(0.0)
  makeTime(0, 12, 0).parameterize(makeTime(0, 0, 0), makeTime(1, 0, 0)).assertEquals(0.5)
  makeTime(1, 0, 0).parameterize(makeTime(0, 0, 0), makeTime(1, 0, 0)).assertEquals(1.0)