package EnumerableHashMap
import initlater Enumerable
import HashMap
import KeyValuePair
import HashList
import Func

// ============================================================================
/** Warning: KeyValuePair instances returned by this enumerable are not cleaned up! */
public function IterableMap<TKey, TValue>.asEnumerable<TKey, TValue>() returns IEnumerable<KeyValuePair<TKey, TValue>>
  return new IterableMapEnumerableAdapter(this, true)

// ============================================================================
/** Warning: KeyValuePair instances returned by this enumerable are not cleaned up! */
public function IterableMap<TKey, TValue>.asEnumerable<TKey, TValue>(bool owner) returns IEnumerable<KeyValuePair<TKey, TValue>>
  return new IterableMapEnumerableAdapter(this, owner)

// ============================================================================
/** Returns an enumerable sequences of objects that represent the keys of the  */
public function IterableMap<TKey, TValue>.keys<TKey, TValue>() returns IEnumerable<TKey>
  return new IterableMapKeyEnumerableAdapter(this, true)

// ============================================================================
public function IterableMap<TKey, TValue>.keys<TKey, TValue>(bool owner) returns IEnumerable<TKey>
  return new IterableMapKeyEnumerableAdapter(this, owner)

// ============================================================================
public function IterableMap<TKey, TValue>.values<TKey, TValue>() returns IEnumerable<TValue>
  return new IterableMapValueEnumerableAdapter(this, true)

// ============================================================================
public function IterableMap<TKey, TValue>.values<TKey, TValue>(bool owner) returns IEnumerable<TValue>
  return new IterableMapValueEnumerableAdapter(this, owner)

// ============================================================================
public function IEnumerable<TSource>.toHashMap<TSource, TKey>(Func1<TSource, TKey> keySelector) returns HashMap<TKey, TSource>
  let iter = this.iterator()
  let result = new HashMap<TKey, TSource>()
  while iter.hasNext()
    let value = iter.next()
    let key = keySelector.call(value)
    result.put(key, value)
  destroy iter
  return result

// ============================================================================
public function IEnumerable<TSource>.toHashMap<TSource, TKey, TValue>(Func1<TSource, TKey> keySelector, Func1<TSource, TValue> valueSelector) returns HashMap<TKey, TValue>
  let iter = this.iterator()
  let result = new HashMap<TKey, TValue>()
  while iter.hasNext()
    let element = iter.next()
    let key = keySelector.call(element)
    let value = valueSelector.call(element)
    result.put(key, value)
  destroy iter
  return result

// ============================================================================
class IterableMapEnumerableAdapter<TKey, TValue> implements IEnumerable<KeyValuePair<TKey, TValue>>
  private IterableMap<TKey, TValue> _map
  private bool _ownsMap

  // --------------------------------------------------------------------------
  construct(IterableMap<TKey, TValue> map, bool ownsList)
    _map = map
    _ownsMap = ownsList

  ondestroy
    if (_ownsMap)
      destroy _map
    _map = null

  // --------------------------------------------------------------------------
  override function iterator() returns IEnumerator<KeyValuePair<TKey, TValue>>
    return new IterableMapEnumeratorAdapter<TKey, TValue>(_map)

// ============================================================================
class IterableMapEnumeratorAdapter<TKey, TValue> implements IEnumerator<KeyValuePair<TKey, TValue>>
  private IterableMap<TKey, TValue> _map
  private HLIterator<TKey> _iterator

  // --------------------------------------------------------------------------
  construct(IterableMap<TKey, TValue> map)
    _map = map
    _iterator = map.iterator()

  // --------------------------------------------------------------------------
  ondestroy
    destroy _iterator
    _iterator = null

  // --------------------------------------------------------------------------
  override function hasNext() returns bool
    return _iterator.hasNext()

  // --------------------------------------------------------------------------
  override function next() returns KeyValuePair<TKey, TValue>
    let key = _iterator.next()
    let value = _map.get(key)
    return new KeyValuePair<TKey, TValue>(key, value)

  // --------------------------------------------------------------------------
  override function close()
    destroy this

// ============================================================================
class IterableMapKeyEnumerableAdapter<TKey, TValue> implements IEnumerable<TKey>
  private IterableMap<TKey, TValue> _map
  private bool _ownsMap

  // --------------------------------------------------------------------------
  construct(IterableMap<TKey, TValue> map, bool ownsList)
    _map = map
    _ownsMap = ownsList

  ondestroy
    if (_ownsMap)
      destroy _map
    _map = null

  // --------------------------------------------------------------------------
  override function iterator() returns IEnumerator<TKey>
    return new IterableMapKeyEnumeratorAdapter<TKey>(_map.iterator())

// ============================================================================
class IterableMapKeyEnumeratorAdapter<TKey> implements IEnumerator<TKey>
  private HLIterator<TKey> _iterator

  // --------------------------------------------------------------------------
  construct(HLIterator<TKey> iterator)
    _iterator = iterator

  // --------------------------------------------------------------------------
  ondestroy
    destroy _iterator
    _iterator = null

  // --------------------------------------------------------------------------
  override function hasNext() returns bool
    return _iterator.hasNext()

  // --------------------------------------------------------------------------
  override function next() returns TKey
    return _iterator.next()

  // --------------------------------------------------------------------------
  override function close()
    destroy this

// ============================================================================
class IterableMapValueEnumerableAdapter<TKey, TValue> implements IEnumerable<TValue>
  private IterableMap<TKey, TValue> _map
  private bool _ownsMap

  // --------------------------------------------------------------------------
  construct(IterableMap<TKey, TValue> map, bool ownsList)
    _map = map
    _ownsMap = ownsList

  ondestroy
    if (_ownsMap)
      destroy _map
    _map = null

  // --------------------------------------------------------------------------
  override function iterator() returns IEnumerator<TValue>
    return new IterableMapValueEnumeratorAdapter<TKey, TValue>(_map)

// ============================================================================
class IterableMapValueEnumeratorAdapter<TKey, TValue> implements IEnumerator<TValue>
  private IterableMap<TKey, TValue> _map
  private HLIterator<TKey> _iterator

  // --------------------------------------------------------------------------
  construct(IterableMap<TKey, TValue> map)
    _map = map
    _iterator = map.iterator()

  // --------------------------------------------------------------------------
  ondestroy
    destroy _iterator
    _iterator = null

  // --------------------------------------------------------------------------
  override function hasNext() returns bool
    return _iterator.hasNext()

  // --------------------------------------------------------------------------
  override function next() returns TValue
    let key = _iterator.next()
    return _map.get(key)

  // --------------------------------------------------------------------------
  override function close()
    destroy this