package SmartValue
import LinkedList
import ClosureTimers
import Events
import Dispatcher
import ErrorHandling

// ============================================================================
public enum AffectorType
  BASE
  SCALE
  ABSOLUTE

// ============================================================================
public class SmartValueAffector
  AffectorType m_type
  real m_value
  CallbackSingle m_callback = null
  real m_duration = 0.0

  // --------------------------------------------------------------------------
  construct (SmartValue owner, AffectorType _type, real value, real duration)
    m_type = _type
    m_value = value
    m_duration = duration
    if (duration > 0.0)
      m_callback = doAfter(duration) () ->
        m_callback = null // destroyed by internal timer cleanup
        owner.remove(_handle(this castTo int))

  // --------------------------------------------------------------------------
  ondestroy
    if (m_callback != null)
      destroy m_callback

  // --------------------------------------------------------------------------
  function getValue() returns real
    return m_value

  // --------------------------------------------------------------------------
  function getType() returns AffectorType
    return m_type
  
  // --------------------------------------------------------------------------
  function getDurationSeconds() returns real
    return m_duration

  // --------------------------------------------------------------------------
  function getRemainingSeconds() returns real
    return m_callback.getRemainingSeconds()

// ============================================================================
public abstract class SmartValueBase

// ============================================================================
public class SmartValue
  private real m_base
  protected LinkedList<SmartValueAffector> m_affectors = null
  protected Event m_valueChangedEvent = null
  private SmartValue m_source = null
  private IDispatcher m_dispatcher = null
  private _handle m_onValueChangedCallbackHandle = INVALID_HANDLE

  // --------------------------------------------------------------------------
  construct ()
    m_base = 0.0

  // --------------------------------------------------------------------------
  construct (real initialBaseValue)
    m_base = initialBaseValue

  // --------------------------------------------------------------------------
  ondestroy
    detach()
    clearAffectors()

    if (m_valueChangedEvent != null)
      destroy m_valueChangedEvent
      m_valueChangedEvent = null

  // --------------------------------------------------------------------------
  function getSource() returns SmartValue
    return m_source

  // --------------------------------------------------------------------------
  function getValue() returns real

    if (m_affectors == null or m_affectors.isEmpty())
      return m_base

    var value = m_base
    var scale = 1.0
    var absolute = 0.0

    for affector in m_affectors
      switch (affector.m_type)
        case BASE
          value = affector.m_value
        case SCALE
          scale *= affector.m_value
        case ABSOLUTE
          absolute += affector.m_value
        
    return value * scale + absolute

  // --------------------------------------------------------------------------
  function getIntValue() returns int
    return getValue().toInt()

  // --------------------------------------------------------------------------
  function getBase() returns real
    return m_base

  // --------------------------------------------------------------------------
  function getIntBase() returns int
    return getBase().toInt()

  // --------------------------------------------------------------------------
  function getAffectors() returns LinkedList<SmartValueAffector>
    return m_affectors

  // --------------------------------------------------------------------------
  function setBase(real value)
    if (m_base != value)
      m_base = value
      raiseValueChangedEvent()

  // --------------------------------------------------------------------------
  function setBase(int value)
    setBase(value.toReal())

  // --------------------------------------------------------------------------
  function affectBase(real value) returns _handle
    return affect(AffectorType.BASE, value)

  // --------------------------------------------------------------------------
  function affectBase(real value, real duration) returns _handle
    return affect(AffectorType.BASE, value, duration)

  // --------------------------------------------------------------------------
  function affectScale(real value) returns _handle
    return affect(AffectorType.SCALE, value)

  // --------------------------------------------------------------------------
  function affectScale(real value, real duration) returns _handle
    return affect(AffectorType.SCALE, value, duration)

  // --------------------------------------------------------------------------
  function affectAdd(real value) returns _handle
    return affect(AffectorType.ABSOLUTE, value)

  // --------------------------------------------------------------------------
  function affectAdd(real value, real duration) returns _handle
    return affect(AffectorType.ABSOLUTE, value, duration)

  // --------------------------------------------------------------------------
  function affectSub(real value) returns _handle
    return affect(AffectorType.ABSOLUTE, -value)

  // --------------------------------------------------------------------------
  function affectSub(real value, real duration) returns _handle
    return affect(AffectorType.ABSOLUTE, -value, duration)

  // --------------------------------------------------------------------------
  function affect(AffectorType _type, real value) returns _handle
    return affect(_type, value, 0.0)
  
  // --------------------------------------------------------------------------
  function affect(AffectorType _type, real value, real duration) returns _handle
    let affector = new SmartValueAffector(this, _type, value, duration)
    let h = _handle(affector castTo int)
    if (m_affectors == null)
      m_affectors = new LinkedList<SmartValueAffector>()
    m_affectors.add(affector)
    raiseValueChangedEvent()
    return h

  // --------------------------------------------------------------------------
  function remove(_handle h) returns bool
    if (m_affectors == null)
      return false
    let iterator = m_affectors.iterator()
    while iterator.hasNext()
      let affector = iterator.next()
      if ((affector castTo int) == h.id)
        iterator.remove()
        destroy affector
        raiseValueChangedEvent()
        iterator.close()
        return true
    iterator.close()
    return false

  // --------------------------------------------------------------------------
  function clearAffectors()
    if (m_affectors != null)
      while (m_affectors.isEmpty() == false)
        destroy m_affectors.pop()
      destroy m_affectors
      m_affectors = null
    raiseValueChangedEvent()

  // --------------------------------------------------------------------------
  function attach(IDispatcher dispatcher) returns SmartValue
    let smartValue = new SmartValue()
    smartValue.attach(this, dispatcher)
    return smartValue

  // --------------------------------------------------------------------------
  function attach(SmartValue source, IDispatcher dispatcher)
    
    if (m_source == source and m_dispatcher == dispatcher)
      return
      
    if (source == null)
      argumentNullError("source")

    if (dispatcher == null)
      argumentNullError("dispatcher")

    detach()

    m_source = source
    m_dispatcher = dispatcher

    attach()

  // --------------------------------------------------------------------------
  private function attach()
    setBase(m_source.getValue())
    m_onValueChangedCallbackHandle = m_source.onValueChanged().registerDispatched(m_dispatcher) () ->
      setBase(m_source.getValue())

  // --------------------------------------------------------------------------
  function detach()
    if (m_source != null and m_onValueChangedCallbackHandle != INVALID_HANDLE)
      m_source.onValueChanged().unregister(m_onValueChangedCallbackHandle)
      m_onValueChangedCallbackHandle = INVALID_HANDLE

  // --------------------------------------------------------------------------
  function onValueChanged() returns IEvent
    if (m_valueChangedEvent == null)
      m_valueChangedEvent = new Event()
    return m_valueChangedEvent

  // --------------------------------------------------------------------------
  protected function raiseValueChangedEvent()
    if (m_valueChangedEvent != null)
      m_valueChangedEvent.call()