package ChatCommands
import HashMap
import IterableMapExtensions
import LinkedList
import LinkedListExtensions
import StringBuilder
import Union
import ErrorHandling
import StringUtils
import TriggerExtensions
import PriorityList
import DisplayTextToPlayer
import StringComparison
import ColorUtility
import Vector

public constant string COMMAND_PREFIX = "-"
public constant string COMMAND_HELP_STR = "help"
public constant string COMMAND_LAST = "last"
public constant int COMMAND_HELP_PRIORITY = -999

PriorityList<ChatCommandHandler> g_commandHandlers
trigger g_chatCommandTrigger
ChatCommand g_chatCommand
player g_chatCommandPlayer
ChatCommandHandler g_chatCommandHandler

CommandContext g_currentContext
LinkedList<CommandContext> g_contextStack = new LinkedList<CommandContext>()

CommandContext g_globalContext
LinkedList<CommandContext> g_globalContextStack = new LinkedList<CommandContext>()

chatCommand g_lastChatCommand

// ============================================================================
@configurable public function chatCommandPrintToPlayer(player printTo, string msg)
  displayMessageToPlayer(printTo, msg)

// ============================================================================
public function getChatCommand() returns ChatCommand
  return g_chatCommand

// ============================================================================
public function getChatCommandHandler() returns ChatCommandHandler
  return g_chatCommandHandler

// ============================================================================
public function getChatCommandPlayer() returns player
  return g_chatCommandPlayer

// ============================================================================
public function getChatCommandContext() returns CommandContext
  return g_contextStack.peek()

// ============================================================================
public function pushChatCommandContext(CommandContext context) returns CommandContext
  g_contextStack.push(context)
  return context

// ============================================================================
public function popChatCommandContext() returns CommandContext
  return g_contextStack.pop()

// ============================================================================
public function getGlobalChatCommandContext() returns CommandContext
  return g_globalContextStack.peek()

// ============================================================================
public function pushGlobalChatCommandContext(CommandContext context) returns CommandContext
  g_globalContextStack.push(context)
  return context

// ============================================================================
public function popGlobalChatCommandContext() returns CommandContext
  return g_globalContextStack.pop()

// ============================================================================
public interface IChatCommandHandler
  function handleChatCommand(player p, string command, LinkedList<string> commandArgs) returns bool

// ============================================================================
public tuple chatCommand(string command, LinkedList<string> args)

// ============================================================================
public function chatCommand.toString() returns string
  return "-{0} {1}".format(this.command, this.args.joinBy(" "))

// ============================================================================
public class CommandContext
  private string m_command
  private LinkedList<string> m_args
  private IterableMap<string, Union> m_variables = new IterableMap<string, Union>()

  // --------------------------------------------------------------------------
  construct(chatCommand cmd)
    m_command = cmd.command
    m_args = cmd.args.copy()

  // --------------------------------------------------------------------------
  construct(CommandContext other)
    m_command = other.m_command
    m_args = other.m_args.copy()

    for key in other.m_variables
      m_variables.put(key, other.m_variables.get(key).clone())

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_args
    m_args = null

    for key in m_variables
      destroy m_variables.get(key)
    destroy m_variables
    m_variables = null
  
  // --------------------------------------------------------------------------
  function getCommand() returns chatCommand
    return chatCommand(m_command, m_args)

  // --------------------------------------------------------------------------
  function clone() returns CommandContext
    return new CommandContext(this)

  // --------------------------------------------------------------------------
  function setBool(string id, bool value)
    getOrCreateVariable(id).setBool(value)

  // --------------------------------------------------------------------------
  function setReal(string id, real value)
    getOrCreateVariable(id).setReal(value)

  // --------------------------------------------------------------------------
  function setInt(string id, int value)
    getOrCreateVariable(id).setInt(value)

  // --------------------------------------------------------------------------
  function setString(string id, string value)
    getOrCreateVariable(id).setString(value)
  
  // --------------------------------------------------------------------------
  function getVariable(string id) returns Union
    return m_variables.get(id)

  // --------------------------------------------------------------------------
  function getBool(string id, bool defaultValue) returns bool
    let variable = getVariable(id)
    return variable == null ? variable.getBool() : defaultValue

  // --------------------------------------------------------------------------
  function getReal(string id, real defaultValue) returns real
    let variable = getVariable(id)
    return variable == null ? variable.getReal() : defaultValue

  // --------------------------------------------------------------------------
  function getInt(string id, int defaultValue) returns int
    let variable = getVariable(id)
    return variable == null ? variable.getInt() : defaultValue

  // --------------------------------------------------------------------------
  function getString(string id, string defaultValue) returns string
    let variable = getVariable(id)
    return variable == null ? variable.getString() : defaultValue
  
  // --------------------------------------------------------------------------
  private function getOrCreateVariable(string id) returns Union
    var union = getVariable(id)
    if (union == null)
      union = new Union()
      m_variables.put(id, union)
    return union

// ============================================================================
public function CommandContext.getUnit(string id) returns unit
  return unitFromIndex(this.getInt(id, -1))

// ============================================================================
public function CommandContext.setUnit(string id, unit _unit)
  this.setInt(id, unitToIndex(_unit))

// ============================================================================
public function CommandContext.getUnits(string id) returns LinkedList<unit>
  let unitCount = this.getInt("__{0}\\UNITCOUNT".format(id), -1)
  if (unitCount == -1)
    return null
  let units = new LinkedList<unit>()
  for i = 0 to unitCount - 1
    let unitHandleId = this.getInt("__{0}\\UNIT{1}".format(id, i.toString()), -1)
    if (unitHandleId != -1)
      let u = unitFromIndex(unitHandleId)
      if (u != null)
        units.add(u)
  return units

// ============================================================================
public function CommandContext.setUnits(string id, LinkedList<unit> units)
  this.setInt("__{0}\\UNITCOUNT".format(id), units.size())
  var i = 0
  for _unit in units
    this.setInt("__{0}\\UNIT{1}".format(id, i.toString()), unitToIndex(_unit))
    i++

// ============================================================================
public class ChatCommandHandler implements IChatCommandHandler
  private string m_name
  private IterableMap<string, trigger> m_commandTriggerMap
  private IterableMap<string, ChatCommandDefinition> m_commandDefinitionMap
  private IterableMap<string, string> m_aliasMap
  private quest m_quest

  // --------------------------------------------------------------------------
  construct(string name, quest _quest)
    m_name = name
    m_quest = _quest
    m_commandTriggerMap = new IterableMap<string, trigger>()
    m_commandDefinitionMap = new IterableMap<string, ChatCommandDefinition>()
    m_aliasMap = new IterableMap<string, string>()

  // --------------------------------------------------------------------------
  ondestroy

    for key in m_commandTriggerMap
      m_commandTriggerMap.get(key).destr()

    destroy m_commandTriggerMap
    m_commandTriggerMap = null

    for key in m_commandDefinitionMap
      destroy m_commandDefinitionMap.get(key)

    destroy m_commandDefinitionMap
    m_commandDefinitionMap = null

    destroy m_aliasMap
    m_aliasMap = null

  // --------------------------------------------------------------------------
  function getName() returns string
    return m_name

  // --------------------------------------------------------------------------
  function addHandler(string command, trigger handler)
    m_commandTriggerMap.put(command, handler)

  // --------------------------------------------------------------------------
  function getHandler(string command) returns trigger
    return m_commandTriggerMap.get(command)
  
  // --------------------------------------------------------------------------
  function registerCommandDefinition(string command, code handler) returns ChatCommandDefinition
    let commandDefinition = new ChatCommandDefinition(command, this)
    registerCommandDefinition(commandDefinition, handler)
    return commandDefinition
  
  // --------------------------------------------------------------------------
  function registerCommandDefinition(ChatCommandDefinition commandDefinition, code handler)
    m_commandDefinitionMap.put(commandDefinition.getCommand(), commandDefinition)
    registerHandlerAction(commandDefinition.getCommand(), handler)

  // --------------------------------------------------------------------------
  function registerCommandAlias(string command, string alias)
    m_aliasMap.put(alias, command)

  // --------------------------------------------------------------------------
  function addQuestItems()
    for key in m_commandDefinitionMap
      addQuestItem(m_commandDefinitionMap.get(key))

  // --------------------------------------------------------------------------
  function addQuestItem(ChatCommandDefinition commandDefinition)
    if (m_quest == null)
      return

    let commandQuestItem = QuestCreateItem(m_quest)
    QuestItemSetDescription(commandQuestItem, commandDefinition.getHelpString())

    let commandDescriptionQuestItem = QuestCreateItem(m_quest)
    QuestItemSetDescription(commandDescriptionQuestItem, commandDefinition.getDescription())

    let aliases = commandDefinition.getAliases()
    if (aliases != null)
      let aliasesSB = new StringBuilder()
      aliasesSB.append("Aliases:")
      for alias in aliases
        aliasesSB.append(" " + alias.colorize(Colors.gold))
      let commandAliasesQuestItem = QuestCreateItem(m_quest)
      QuestItemSetDescription(commandAliasesQuestItem, aliasesSB.toStringAndDestroy())

    // Spacer
    QuestCreateItem(m_quest)

  // --------------------------------------------------------------------------
  function getCommandDefinition(string command) returns ChatCommandDefinition
    if (m_commandDefinitionMap.has(command))
      return m_commandDefinitionMap.get(command)
    if (m_aliasMap.has(command))
      return getCommandDefinition(m_aliasMap.get(command))
    return null

  // --------------------------------------------------------------------------
  function registerHandlerAction(string command, code action)
    var handler = getCommandHandler(command)
    if (handler == null)
      handler = CreateTrigger()
      addHandler(command, handler)
    handler.addCondition(Filter(action))

  // --------------------------------------------------------------------------
  function getCommandHandler(string command) returns trigger
    let def = getCommandDefinition(command)
    if (def == null)
      error("No command definition registered for command '{0}'".format(command))
      return null
    return m_commandTriggerMap.get(def.getCommand())

  // --------------------------------------------------------------------------
  function getCommandDefinitions() returns LinkedList<ChatCommandDefinition>
    return m_commandDefinitionMap.getValues()

  // --------------------------------------------------------------------------
  override function handleChatCommand(player p, string command, LinkedList<string> commandArgs) returns bool
    
    let commandDef = getCommandDefinition(command)
    if (commandDef == null)
      return false

    let handler = getCommandHandler(command)
    if (handler == null)
      return false
      
    let parseResult = commandDef.tryParse(commandArgs)
    if (not parseResult.succeeded)
      error("Error parsing command: " + parseResult.errorMsg)
      return true

    g_chatCommandPlayer = p
    g_chatCommand = parseResult.command

    handler.evaluate()

    destroy g_chatCommand
    g_chatCommand = null

    g_chatCommandPlayer = null

    return commandDef.getDoesHandleCommand()

// ============================================================================
public tuple ChatCommandResult(bool succeeded, ChatCommand command, string errorMsg)

// ============================================================================
public class ChatCommandDefinition
  private string m_command
  private LinkedList<ChatCommandArgument> m_arguments
  private bool m_doesHandleCommand
  private string m_description
  private Vector<string> m_aliases
  private ChatCommandHandler m_handler

  // --------------------------------------------------------------------------
  construct(string command, ChatCommandHandler handler)
    m_command = command
    m_arguments = new LinkedList<ChatCommandArgument>()
    m_doesHandleCommand = true
    m_handler = handler

  // --------------------------------------------------------------------------
  ondestroy

    for arg in m_arguments
      destroy arg

    destroy m_arguments
    m_arguments = null

  // --------------------------------------------------------------------------
  function getCommand() returns string
    return m_command

  // --------------------------------------------------------------------------
  function addArgument(ChatCommandArgument argument)

    if (not argument.getIsOptional() and not m_arguments.isEmpty() and m_arguments.getLast().getIsOptional())
      error("Optional arguments can only appear at the end of the argument list following all required arguments")
      return

    m_arguments.add(argument)

  // --------------------------------------------------------------------------
  function getArgument(int index) returns ChatCommandArgument
    return m_arguments.get(index)

  // --------------------------------------------------------------------------
  function getArgumentCount() returns int
    return m_arguments.size()

  // --------------------------------------------------------------------------
  function getDoesHandleCommand() returns bool
    return m_doesHandleCommand

  // --------------------------------------------------------------------------
  function setDoesHandleCommand(bool value)
    m_doesHandleCommand = value

  // --------------------------------------------------------------------------
  function getDescription() returns string
    return m_description

  // --------------------------------------------------------------------------
  function setDescription(string description)
    m_description = description

  // --------------------------------------------------------------------------
  function addAlias(string alias)
    if (m_aliases == null)
      m_aliases = new Vector<string>()
    m_aliases.add(alias)
    m_handler.registerCommandAlias(getCommand(), alias)

  // --------------------------------------------------------------------------
  function getAliases() returns Vector<string>
    return m_aliases

  // --------------------------------------------------------------------------
  function getHelpString() returns string
    let sb = new StringBuilder()

    sb.append(m_command.colorize(Colors.gold))

    for arg in m_arguments
      sb.append(" ")
      sb.append(arg.getHelpString())

    return sb.toStringAndDestroy()

  // --------------------------------------------------------------------------
  function tryParse(LinkedList<string> commandArgs) returns ChatCommandResult

    let argumentValueMap = new IterableMap<ChatCommandArgument, Union>()

    var result = ChatCommandResult(true, null, "")

    let numberOfArguments = m_arguments.size()

    for i = 0 to commandArgs.size() - 1
      let argStr = commandArgs.get(i)

      if (i >= numberOfArguments)
        result.errorMsg = "Unexpected number of arguments: expected {0} but received {1}".format(numberOfArguments.toString(), commandArgs.size().toString())
        result.succeeded = false
        break
      else
        let arg = getArgument(i)
        if (arg != null)
          let parseResult = arg.tryParse(argStr)
          if (parseResult.succeeded)
            argumentValueMap.put(arg, parseResult.union)
          else
            result.errorMsg = "Failed to parse argument {0}: {1}".format(i.toString(), parseResult.errorMsg)
            result.succeeded = false
            break
        else
          result.errorMsg = "Found no argument at index " + i.toString()
          result.succeeded = false
          break

    if (result.succeeded)
      result.command = new ChatCommand(this, argumentValueMap)

    return result

// ============================================================================
public function ChatCommandDefinition.addStringArgument(string name, bool optional) returns ChatCommandDefinition
  this.addArgument(new ChatCommandArgument(name, ChatCommandArgumentType.STRING, optional))
  return this

// ============================================================================
public function ChatCommandDefinition.addStringArgument(string name, bool optional, string description) returns ChatCommandDefinition
  this.addArgument(new ChatCommandArgument(name, ChatCommandArgumentType.STRING, optional)..setDescription(description))
  return this

// ============================================================================
public function ChatCommandDefinition.addIntegerArgument(string name, bool optional) returns ChatCommandDefinition
  this.addArgument(new ChatCommandArgument(name, ChatCommandArgumentType.INT, optional))
  return this

// ============================================================================
public function ChatCommandDefinition.addIntegerArgument(string name, bool optional, string description) returns ChatCommandDefinition
  this.addArgument(new ChatCommandArgument(name, ChatCommandArgumentType.INT, optional)..setDescription(description))
  return this

// ============================================================================
public function ChatCommandDefinition.addRealArgument(string name, bool optional) returns ChatCommandDefinition
  this.addArgument(new ChatCommandArgument(name, ChatCommandArgumentType.REAL, optional))
  return this

// ============================================================================
public function ChatCommandDefinition.addRealArgument(string name, bool optional, string description) returns ChatCommandDefinition
  this.addArgument(new ChatCommandArgument(name, ChatCommandArgumentType.REAL, optional)..setDescription(description))
  return this

// ============================================================================
public function ChatCommandDefinition.addBoolArgument(string name, bool optional) returns ChatCommandDefinition
  this.addArgument(new ChatCommandArgument(name, ChatCommandArgumentType.BOOL, optional))
  return this

// ============================================================================
public function ChatCommandDefinition.addBoolArgument(string name, bool optional, string description) returns ChatCommandDefinition
  this.addArgument(new ChatCommandArgument(name, ChatCommandArgumentType.BOOL, optional)..setDescription(description))
  return this

// ============================================================================
public function ChatCommandDefinition.addFourCCArgument(string name, bool optional) returns ChatCommandDefinition
  this.addArgument(new ChatCommandArgument(name, ChatCommandArgumentType.FOURCC, optional))
  return this

// ============================================================================
public function ChatCommandDefinition.addFourCCArgument(string name, bool optional, string description) returns ChatCommandDefinition
  this.addArgument(new ChatCommandArgument(name, ChatCommandArgumentType.FOURCC, optional)..setDescription(description))
  return this

// ============================================================================
public enum ChatCommandArgumentType
  STRING
  INT
  REAL
  BOOL
  FOURCC

// ============================================================================
public function ChatCommandArgumentType.toString() returns string
  switch (this)
    case STRING
      return "String"
    case INT
      return "Integer"
    case REAL
      return "Real"
    case BOOL
      return "Boolean"
    case FOURCC
      return "FourCC"

// ============================================================================
public class ChatCommandArgument
  private string m_name
  private ChatCommandArgumentType m_argType
  private bool m_isOptional
  private LinkedList<Union> m_options
  private string m_description

  // --------------------------------------------------------------------------
  construct(string name, ChatCommandArgumentType argType, bool isOptional)
    m_name = name
    m_argType = argType
    m_isOptional = isOptional
    m_options = new LinkedList<Union>()

  // --------------------------------------------------------------------------
  ondestroy
    for u in m_options
      destroy u
    destroy m_options
    m_options = null

  // --------------------------------------------------------------------------
  function getName() returns string
    return m_name

  // --------------------------------------------------------------------------
  function getArgumentType() returns ChatCommandArgumentType
    return m_argType

  // --------------------------------------------------------------------------
  function getIsOptional() returns bool
    return m_isOptional

  // --------------------------------------------------------------------------
  function getOptions() returns LinkedList<Union>
    return m_options

  // --------------------------------------------------------------------------
  function setStringOptions(vararg string options)
    m_options.clear()
    for option in options
      m_options.add(Union.fromString(option))

  // --------------------------------------------------------------------------
  function setIntOptions(vararg int options)
    m_options.clear()
    for option in options
      m_options.add(Union.fromInt(option))

  // --------------------------------------------------------------------------
  function setRealOptions(vararg real options)
    m_options.clear()
    for option in options
      m_options.add(Union.fromReal(option))

  // --------------------------------------------------------------------------
  function getDescription() returns string
    return m_description

  // --------------------------------------------------------------------------
  function setDescription(string description)
    m_description = description

  // --------------------------------------------------------------------------
  function getHelpString() returns string
    let sb = new StringBuilder()

    sb.append(m_isOptional ? "(" : "[")

    if (not m_options.isEmpty())
      sb.append(getOptionsString())
    else
      sb.append(m_name)

    sb.append(m_isOptional ? ")" : "]")

    return sb.toStringAndDestroy()

  // --------------------------------------------------------------------------
  function getOptionsString() returns string
    let sb = new StringBuilder()
    let size = m_options.size()
    var i = 0
    for option in m_options
      sb.append("'{0}'".format(option.toString()))
      i++
      if (i != size)
        sb.append(", ")
    return sb.toStringAndDestroy()

  // --------------------------------------------------------------------------
  function tryParse(string argumentString) returns UnionResult

    var result = UnionResult(true, null, "")

    switch (m_argType)
      case ChatCommandArgumentType.STRING
        result.union = new Union(UnionType.String, argumentString)
      case ChatCommandArgumentType.INT
        result.union = new Union(UnionType.Int, argumentString)
      case ChatCommandArgumentType.REAL
        result.union = new Union(UnionType.Real, argumentString)
      case ChatCommandArgumentType.BOOL
        result.union = new Union(UnionType.Bool, argumentString)
      case ChatCommandArgumentType.FOURCC
        if (argumentString.length() != 4)
          result.succeeded = false
          result.errorMsg = "FOURCC argument must be a 4 character length string"
        else
          result.union = new Union(UnionType.FourCC, argumentString)

    result.succeeded = result.union != null

    if (result.union != null and not m_options.isEmpty())
      var foundMatchingOption = false
      for option in m_options
        if (option.equals(result.union))
          foundMatchingOption = true
          break
      if (not foundMatchingOption)
        result.succeeded = false
        result.errorMsg = "'{0} is not a valid option for argument".format(argumentString)

    return result

// ============================================================================
public tuple UnionResult(bool succeeded, Union union, string errorMsg)

// ============================================================================
public class ChatCommand
  private ChatCommandDefinition m_definition
  private IterableMap<ChatCommandArgument, Union> m_argumentValues

  // --------------------------------------------------------------------------
  construct(ChatCommandDefinition definition, IterableMap<ChatCommandArgument, Union> arguments)
    m_definition = definition
    m_argumentValues = arguments

  // --------------------------------------------------------------------------
  ondestroy
    for arg in m_argumentValues
      destroy m_argumentValues.get(arg)
    destroy m_argumentValues
    m_argumentValues = null

  // --------------------------------------------------------------------------
  function getArgumentName(int index) returns string
    let arg = m_definition.getArgument(index)
    return arg != null ? arg.getName() : null

  // --------------------------------------------------------------------------
  function getArgument(int index) returns Union
    let arg = m_definition.getArgument(index)
    return arg != null ? getArgument(arg) : null

  // --------------------------------------------------------------------------
  function getArgument(ChatCommandArgument arg) returns Union
    return m_argumentValues.get(arg)

  // --------------------------------------------------------------------------
  function getArgumentCount() returns int
    return m_argumentValues.size()

// ============================================================================
public function registerChatCommandHandler(ChatCommandHandler handler, int priority)
  g_commandHandlers.add(handler, priority)

// ============================================================================
public function parseChatCommand(string commandString) returns chatCommand

  var commandLine = commandString

  if (commandLine.startsWith("-"))
    commandLine = commandLine.substring(1, commandLine.length())

  let commandArgs = commandLine.split(" ")
  if (commandArgs.isEmpty())
    destroy commandArgs
    return chatCommand(null, null)

  // The command is always the first arg
  let command = commandArgs.getFirst()
  commandArgs.removeAt(0)

  return chatCommand(command, commandArgs)

// ============================================================================
public function executeChatCommand(player sender, chatCommand command) returns bool

  if (command.command == null)
    error("Argument command.command cannot be null")

  if (command.args == null)
    error("Argument command.commandArgs cannot be null")

  let context = new CommandContext(command)
  pushChatCommandContext(context)

  var handled = false
  for chatCommandHandler in g_commandHandlers
    handled = chatCommandHandler.handleChatCommand(sender, command.command, command.args)
    if (handled)
      break

  popChatCommandContext()
  destroy context

  if (not handled)
    return false

  return true

// ============================================================================
function parsePlayerChatString()
  let p = GetTriggerPlayer()
  let commandLine = GetEventPlayerChatString()
  
  var cmd = parseChatCommand(commandLine)
  if (cmd.command == null)
    return

  let replayingLastCommand = cmd.command == COMMAND_LAST
  
  if (replayingLastCommand)
    cmd = g_lastChatCommand

  if (not executeChatCommand(p, cmd))
    printPartialMatchingCommands(cmd.command, p)
  
  else if (not replayingLastCommand)
  //{
    if (g_lastChatCommand.args != null)
      destroy g_lastChatCommand.args

    g_lastChatCommand = cmd
  //}

// ============================================================================
public class ChatCommandDefinitionComparator implements Comparator<ChatCommandDefinition>
  override function compare(ChatCommandDefinition def1, ChatCommandDefinition def2) returns int
    return stringCompare(def1.getCommand(), def2.getCommand())

// ============================================================================
public function getPartialMatchingCommands(string partialCommandName) returns LinkedList<ChatCommandDefinition>
  let matchingCommandDefs = new LinkedList<ChatCommandDefinition>()
  for commandHandler in g_commandHandlers
    let commandDefs = commandHandler.getCommandDefinitions()
    for commandDef in commandDefs
      if (commandDef != null and commandDef.getCommand().contains(partialCommandName))
        matchingCommandDefs.add(commandDef)
    destroy commandDefs
  return matchingCommandDefs

// ============================================================================
public function printPartialMatchingCommands(string command, player p)
  let matchingCommandDefs = getPartialMatchingCommands(command)
    
  let comparator = new ChatCommandDefinitionComparator()
  matchingCommandDefs.sortWith(comparator)
  destroy comparator
  
  for commandDef in matchingCommandDefs
    chatCommandPrintToPlayer(p, commandDef.getHelpString())

  destroy matchingCommandDefs

// ============================================================================
function printDetailedHelp(player p, ChatCommandDefinition commandDef)
  let sb = new StringBuilder()
  
  let commandDefDesc = commandDef.getDescription()
  if (commandDefDesc != null)
    chatCommandPrintToPlayer(p, commandDefDesc)
  
  for i = 0 to commandDef.getArgumentCount()
    sb.reset()
    sb.append(" - ")
    let commandArg = commandDef.getArgument(i)
    if (commandArg != null)

      sb.append(commandArg.getName().colorize(COLOR_GOLD))

      sb.append(" ({0})".format(commandArg.getArgumentType().toString()))
      
      if (commandArg.getIsOptional())
        sb.append(" (OPTIONAL)")

      let options = commandArg.getOptions()
      if (not options.isEmpty())
        sb.append(" " + commandArg.getOptionsString())

      sb.append(": ")

      let commandArgDesc = commandArg.getDescription()
      if (commandArgDesc != null)
        sb.append(commandArgDesc)
      else
        sb.append("<No Description>")

    chatCommandPrintToPlayer(p, sb.toString())
  
  destroy sb

// ============================================================================
public function printHelp()

  let chatCommand = getChatCommand()
  let chatPlayer = getChatCommandPlayer()

  LinkedList<ChatCommandDefinition> matchingCommandDefs

  // Show help for a specific command
  let commandNameArg = chatCommand.getArgument(0)
  if (commandNameArg != null)
    let partialCommandName = commandNameArg.getString()
    matchingCommandDefs = getPartialMatchingCommands(partialCommandName)
    if (matchingCommandDefs.isEmpty())
      error("No commands found matching partial name '{0}'".format(partialCommandName))
      return

  // Show help for all commands
  else
    matchingCommandDefs = new LinkedList<ChatCommandDefinition>()

    for commandHandler in g_commandHandlers
      let commandDefinitions = commandHandler.getCommandDefinitions()
      for commandDef in commandDefinitions
        matchingCommandDefs.add(commandDef)
      destroy commandDefinitions

  let comparator = new ChatCommandDefinitionComparator()
  matchingCommandDefs.sortWith(comparator)
  destroy comparator

  for commandDef in matchingCommandDefs
    chatCommandPrintToPlayer(chatPlayer, commandDef.getHelpString())

  // Print detailed info if the user wants help with a specific command
  if (matchingCommandDefs.size() == 1)
    let commandDef = matchingCommandDefs.getFirst()
    printDetailedHelp(chatPlayer, commandDef)

  destroy matchingCommandDefs

// ============================================================================
init
  g_commandHandlers = new PriorityList<ChatCommandHandler>()

  g_chatCommandTrigger = CreateTrigger()
  g_chatCommandTrigger.registerAnyPlayerChatEvent(COMMAND_PREFIX, false)
  g_chatCommandTrigger.addAction(function parsePlayerChatString)