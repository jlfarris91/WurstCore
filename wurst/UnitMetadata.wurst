package UnitMetadata
import Composition
import LinkedList
import ErrorHandling
import ClosureEvents
import UnitExtensions
import UnitIndexer
import Preload
import Events
import public Dispatcher

IUnitMetadata array g_unitMetadatas
LinkedList<IUnitMetadataFactory> g_unitMetadataFactories
LinkedList<IUnitComponentGenerator> g_unitComponentGenerators
int array g_ignoreIndexingCounter

@configurable public bool g_enableLogging = false

// ============================================================================
function logDebug(string message)
  if (g_enableLogging)
    Log.debug(message)

// ============================================================================
public interface IUnitMetadata extends IComposite
  function getUnit() returns unit
  function attach(unit u)
  function shouldDestroyWithOwner() returns bool

// ============================================================================
public interface IUnitMetadataFactory
  function createMetadata(unit u) returns UnitMetadata

// ============================================================================
public interface IUnitComponentGenerator
  function generateComponents(IUnitMetadata metadata) returns bool

// ============================================================================
public class UnitComponentCreationContext
  IUnitMetadata owner

// ============================================================================
public abstract class UnitComponent extends Component implements IDispatcher
  private IUnitMetadata m_owner
  private bool m_disableOnDeath = true

  // --------------------------------------------------------------------------
  construct(IUnitMetadata ownerUnit)
    super(ownerUnit)
    m_owner = ownerUnit

  // --------------------------------------------------------------------------
  override function getOwner() returns IUnitMetadata
    return m_owner

  // --------------------------------------------------------------------------
  function getOwnerUnit() returns unit
    return m_owner.getUnit()

  // --------------------------------------------------------------------------
  function getOwnerPlayer() returns player
    return getOwnerUnit().getOwner()

  // --------------------------------------------------------------------------
  function setDisableOnDeath(bool disableOnDeath)
    m_disableOnDeath = disableOnDeath

  // --------------------------------------------------------------------------
  function getDisableOnDeath() returns bool
    return m_disableOnDeath

  // --------------------------------------------------------------------------
  function onOwnerKilled()
    if (m_disableOnDeath)
      disable()

  // --------------------------------------------------------------------------
  function onOwnerRevived()
    enable()

  // --------------------------------------------------------------------------
  function onOwnerUpgraded()
    skip

  // --------------------------------------------------------------------------
  function onUnitChanged(unit _oldUnit, unit _newUnit)
    skip

  // --------------------------------------------------------------------------
  override function getDispatcherContext(bool requireEnabled) returns DispatcherContext
    return new UnitComponentDispatcher(getOwnerUnit(), this.typeId, requireEnabled)

// ============================================================================
class UnitComponentDispatcher extends DispatcherContext
  private unit m_ownerUnit
  private int m_compTypeId
  private bool m_requireEnabled

  // --------------------------------------------------------------------------
  construct(unit ownerUnit, int compTypeId, bool requireEnabled)
    m_ownerUnit = ownerUnit
    m_compTypeId = compTypeId
    m_requireEnabled = requireEnabled

  // --------------------------------------------------------------------------
  override function canDispatch() returns bool
    if (m_ownerUnit != null and m_ownerUnit.isAlive())
      let comp = m_ownerUnit.getComponent(m_compTypeId)
      if (comp != null)
        if (not m_requireEnabled or comp.getEnabled())
          return true
    return false

// ============================================================================
public class UnitMetadata extends Composable implements IUnitMetadata
  protected unit m_unit
  private bool m_shouldDestroyWithOwner = true

  private LinkedList<UnitComponent> m_componentsToEnableOnRevive = null

  // --------------------------------------------------------------------------
  ondestroy
    if (m_unit != null)
      detachAndNullifyUnit()

    if (m_componentsToEnableOnRevive != null)
      destroy m_componentsToEnableOnRevive
      m_componentsToEnableOnRevive = null

  // --------------------------------------------------------------------------
  override function shouldDestroyWithOwner() returns bool
    return m_shouldDestroyWithOwner

  // --------------------------------------------------------------------------
  function setShouldDestroyWithOwner(bool value)
    m_shouldDestroyWithOwner = value

  // --------------------------------------------------------------------------
  @inline
  override function getUnit() returns unit
    return m_unit

  // --------------------------------------------------------------------------
  override function attach(unit unitToAttachTo)
    if (unitToAttachTo == null)
      argumentNullError("unitToAttachTo")

    if (unitToAttachTo == m_unit)
      return
  
    // This unit was not indexed for whatever reason
    let newIndex = unitToAttachTo.getIndex()
    if (newIndex == 0)
      logDebug("Attempting to attach to a deindexed unit : " + unitToAttachTo.getName())
      return

    if (m_unit != null)
      detach()

    // The new unit was indexed so we should assign the metadata
    g_unitMetadatas[newIndex] = this
    setUnit(unitToAttachTo)

    logDebug("[UnitMetadata.attach] Attached to " + unitToAttachTo.getName())

  // --------------------------------------------------------------------------
  private function detach()

    if (m_unit == null)
      return

    let currentIndex = m_unit.getIndex()
    if (currentIndex == 0)
      error("Current unit has no index")
      return

    g_unitMetadatas[currentIndex] = null
    logDebug("[UnitMetadata.detach] Detached from " + m_unit.getName())

  // --------------------------------------------------------------------------
  private function detachAndNullifyUnit()
    detach()
    setUnit(null)

  // --------------------------------------------------------------------------
  function onKilled()
    logDebug("[onUnitKilled] " + m_unit.getName() + " was killed")

    if (m_componentsToEnableOnRevive != null and m_unit.isHero())
      m_componentsToEnableOnRevive = new LinkedList<UnitComponent>()

    for comp in getComponents()
      let unitComp = comp castTo UnitComponent
      unitComp.onOwnerKilled()
      if (m_componentsToEnableOnRevive != null and unitComp.getEnabled())
        m_componentsToEnableOnRevive.add(unitComp)

  // --------------------------------------------------------------------------
  function onRevived()
    logDebug("[onRevived] " + m_unit.getName() + " was revived")

    for comp in getComponents()
      let unitComp = comp castTo UnitComponent
      unitComp.onOwnerRevived()

    if (m_componentsToEnableOnRevive != null)
    //{
      for comp in m_componentsToEnableOnRevive
        comp.enable()

      destroy m_componentsToEnableOnRevive
      m_componentsToEnableOnRevive = null
    //}

  // --------------------------------------------------------------------------
  function onUpgraded()
    logDebug("[onUpgraded] " + m_unit.getName() + " finished upgrading")

    for comp in getComponents()
      let unitComp = comp castTo UnitComponent
      unitComp.onOwnerUpgraded()

  // --------------------------------------------------------------------------
  private function setUnit(unit u)
    let oldUnit = m_unit
    let newUnit = u
    if (oldUnit != newUnit)
      changeUnit(oldUnit, newUnit)

  // --------------------------------------------------------------------------
  private function changeUnit(unit oldUnit, unit newUnit)

    // Disable and then re-enable any components that were enabled and operated
    // under the context of the old unit
    let enabledComponents = new LinkedList<IComponent>()

    for comp in getComponents()
      if (comp.getEnabled())
        enabledComponents.add(comp)
        comp.setEnabled(false)

    m_unit = newUnit
    logDebug("oldUnit: " + unitToIndex(oldUnit).toString() + " newUnit: " + unitToIndex(newUnit).toString())

    for comp in getComponents()
      let unitComp = comp castTo UnitComponent
      if (unitComp != null)
        unitComp.onUnitChanged(oldUnit, newUnit)

    // Now that the backing field for getUnit() has changed, re-enable any
    // components that were enabled with the old unit, also alert them
    if (enabledComponents != null)
    //{
      for comp in enabledComponents
        if (comp != null and newUnit != null)
          comp.setEnabled(true)
      destroy enabledComponents
    //}

  // --------------------------------------------------------------------------
  override function onComponentAdded() returns IEvent2<IComposite, IComponent>
    return super.onComponentAdded()

  // --------------------------------------------------------------------------
  override function onComponentRemoved() returns IEvent2<IComposite, IComponent>
    return super.onComponentRemoved()

  // --------------------------------------------------------------------------
  override function addComponent(IComponent component) returns IComponent
    return addComponent(component, true)

  // --------------------------------------------------------------------------
  override function addComponent(IComponent component, bool startEnabled) returns IComponent
    return super.addComponent(component, startEnabled)

  // --------------------------------------------------------------------------
  override function removeComponent(IComponent component) returns bool
    return super.removeComponent(component)

  // --------------------------------------------------------------------------
  override function getComponent(int componentTypeId) returns IComponent
    return super.getComponent(componentTypeId)

// ============================================================================
public function unit.hasMetadata() returns bool
  return this.getMetadata() != null

// ============================================================================
public function unit.getMetadata() returns IUnitMetadata
  let index = this.getIndex()
  if (index == 0)
    return null
  return g_unitMetadatas[index]

// ============================================================================
public function unit.getMetadataRequired() returns IUnitMetadata
  let index = this.getIndex()
  if (index == 0)
    error("No metadata found for unit " + this.getName())
  return g_unitMetadatas[index]

// ============================================================================
public function unit.getComponent(int componentTypeId) returns IComponent
  let metadata = this.getMetadata()
  if (metadata == null)
    return null
  return metadata.getComponent(componentTypeId)

// ============================================================================
public function registerUnitMetadataFactory(IUnitMetadataFactory factory)
  if (factory == null)
    argumentNullError("factory")
  g_unitMetadataFactories.addAt(factory, 0)

// ============================================================================
public function unregisterUnitMetadataFactory(IUnitMetadataFactory factory)
  if (factory == null)
    argumentNullError("factory")
  g_unitMetadataFactories.remove(factory)

// ============================================================================
public function registerUnitComponentGenerator(IUnitComponentGenerator generator)
  if (generator == null)
    argumentNullError("generator")
  g_unitComponentGenerators.addAt(generator, 0)

// ============================================================================
public function unregisterUnitComponentGenerator(IUnitComponentGenerator generator)
  if (generator == null)
    argumentNullError("generator")
  g_unitComponentGenerators.remove(generator)

// ============================================================================
public function constructUnitMetadata(unit u) returns IUnitMetadata
  if (u == null)
    argumentNullError("u")

  UnitMetadata metadata = null

  for factory in g_unitMetadataFactories
    metadata = factory.createMetadata(u)
    if (metadata != null)
      break

  if (metadata == null)
    metadata = new UnitMetadata()

  metadata.attach(u)

  generateComponentsForMetadata(metadata)

  return metadata

// ============================================================================
function generateComponentsForMetadata(IUnitMetadata metadata)

  if (metadata.getUnit() == null)
    error("Metadata must be attached to a unit before generating components")

  for generator in g_unitComponentGenerators
    if (generator.generateComponents(metadata))
      break

// ============================================================================
public function createUnitTLS(player owner, integer unitId, vec2 pos, angle face) returns unit
  return createUnit(owner, unitId, pos, face)

// ============================================================================
public function createUnitTLS(IUnitMetadata metadata, player owner, integer unitId, vec2 pos, angle face) returns unit
  if (metadata == null)
    argumentNullError("metadata")

  startIgnoreIndexing(owner)
  let newUnit = createUnit(owner, unitId, pos, face)
  stopIgnoreIndexing(owner)

  if (newUnit.hasMetadata())
    error("[createUnitTLS] Unit should not have metadata yet")
    return null

  let oldUnit = metadata.getUnit()
  metadata.attach(newUnit)

  logDebug("[createUnitTLS] Reattached metadata from unit " + (oldUnit != null ? oldUnit.getName() : "null") + " to unit " + newUnit.getName())

  return newUnit

// ============================================================================
public function replaceUnitTLS(unit whichUnit, integer newUnitId, integer unitStateMethod) returns unit
  return replaceUnitTLS(whichUnit, newUnitId, unitStateMethod, true)

// ============================================================================
public function replaceUnitTLS(unit whichUnit, integer newUnitId, integer unitStateMethod, bool persistXp) returns unit
  if (whichUnit == null)
    argumentNullError("whichUnit")

  let oldUnitName = whichUnit.getName()
  let existingMetadata = whichUnit.getMetadata()
  let owningPlayer = whichUnit.getOwner()
  let wasSelected = whichUnit.isSelectedByOwner()

  if (existingMetadata != null)
    startIgnoreIndexing(owningPlayer)
  else
    logDebug("[replaceUnitTLS] Replacing unit " + whichUnit.getName() + " with no attached metadata")

  let newUnit = replaceUnitFixed(whichUnit, newUnitId, unitStateMethod, persistXp)

  if (newUnit.hasMetadata())
    error("Unit should not have metadata yet")
  
  if (existingMetadata != null)
    stopIgnoreIndexing(owningPlayer)
    existingMetadata.attach(newUnit)

  if (wasSelected)
    SelectUnitAddForPlayer(newUnit, newUnit.getOwner())

  logDebug("[replaceUnitTLS] Reattached metadata from unit " + oldUnitName + " to unit " + newUnit.getName())
    
  return newUnit

// ============================================================================
public function createMetadataForUnit(unit _unit)
  let index = _unit.getIndex()

  var metadata = g_unitMetadatas[index]
  if (metadata != null)
    logDebug("Metadata already exists for unit {0}".format(_unit.getName()))
    return

  metadata = constructUnitMetadata(_unit)
  g_unitMetadatas[index] = metadata

  logDebug("[createMetadata] Created metadata for unit {0}".format(_unit.getName()))

// ============================================================================
public function destroyMetadataForUnit(unit _unit)
  let metadata = _unit.getMetadata()
  
  if (metadata != null and metadata.shouldDestroyWithOwner())
    destroy metadata
    logDebug("[destroyMetadata] Destroyed metadata for unit {0}".format(_unit.getName()))

  let index = _unit.getIndex()
  g_unitMetadatas[index] = null

// ============================================================================
function onUnitKilled()
  let dyingUnit = GetDyingUnit()
  
  let metadata = dyingUnit.getMetadata() castTo UnitMetadata
  if (metadata == null)
    return

  metadata.onKilled()

// ============================================================================
function onUnitRevived()
  let revivingUnit = GetRevivingUnit()
  
  let metadata = revivingUnit.getMetadata() castTo UnitMetadata
  if (metadata == null)
    return

  metadata.onRevived()

// ============================================================================
function onUnitUpgraded()
  let upgradedUnit = GetTriggerUnit()
  
  let metadata = upgradedUnit.getMetadata() castTo UnitMetadata
  if (metadata == null)
    return

  // New unit type means new components
  generateComponentsForMetadata(metadata)

  metadata.onUpgraded()

// ============================================================================
function onUnitIndexed(unit indexingUnit)

  if (Preload.isPreloading())
    return

  if (isIgnoringIndexing(indexingUnit.getOwner()))
    logDebug("[onUnitIndexed] Ignoring indexed unit {0}".format(indexingUnit.getName()))
    return
  createMetadataForUnit(indexingUnit)

// ============================================================================
function onUnitDeindexed(unit indexingUnit)
  
  if (Preload.isPreloading())
    return

  if (isIgnoringIndexing(indexingUnit.getOwner()))
    logDebug("[onUnitDeindexed] Ignoring deindexed unit {0}".format(indexingUnit.getName()))
    return
  destroyMetadataForUnit(indexingUnit)

// ============================================================================
public function startIgnoreIndexing(player p)
  g_ignoreIndexingCounter[p.getId()]++
  logDebug("Start ignoring indexing " + I2S(g_ignoreIndexingCounter[p.getId()]))

// ============================================================================
public function stopIgnoreIndexing(player p)
  g_ignoreIndexingCounter[p.getId()]--
  logDebug("Stop ignoring indexing " + I2S(g_ignoreIndexingCounter[p.getId()]))

// ============================================================================
public function isIgnoringIndexing(player p) returns bool
  return g_ignoreIndexingCounter[p.getId()] > 0

// ============================================================================
init
  g_unitMetadataFactories = new LinkedList<IUnitMetadataFactory>()
  g_unitComponentGenerators = new LinkedList<IUnitComponentGenerator>()

  for i = 0 to 24
    g_ignoreIndexingCounter[i] = 0

  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onUnitKilled)
  registerPlayerUnitEvent(EVENT_PLAYER_HERO_REVIVE_FINISH, function onUnitRevived)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, function onUnitUpgraded)

  onUnitIndex(() -> onUnitIndexed(getIndexingUnit()))
  onUnitDeindex(() -> onUnitDeindexed(getIndexingUnit()))