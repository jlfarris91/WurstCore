package NativeFrame
import HashMap
import Action
import Vector
import ErrorHandling

HashMap<framehandle, NativeFramePool> g_framehandleToPool

// ============================================================================
public class NativeFrameDefinition
  private string m_name = null
  private string m_typeName = null
  private framehandle m_owner = null
  private int m_priority = -1
  private string m_inherits = null
  private int m_createContext = -1

  // --------------------------------------------------------------------------
  construct (string name)
    m_name = name

  // --------------------------------------------------------------------------
  construct (string name, framehandle owner, int priority, int createContext)
    m_name = name
    m_owner = owner
    m_priority = priority
    m_createContext = createContext

  // --------------------------------------------------------------------------
  construct (string typeName, string name, framehandle owner, string inherits, int createContext)
    m_typeName = typeName
    m_name = name
    m_owner = owner
    m_inherits = inherits
    m_createContext = createContext

  // --------------------------------------------------------------------------
  function buildFrame() returns framehandle
    if (m_typeName != null)
      return createFrame(m_typeName, m_name, m_owner, m_inherits, m_createContext)
    if (m_owner != null)
      return createFrame(m_name, m_owner, m_priority, m_createContext)
    return createFrame(m_name)

// ============================================================================
public interface INativeFrameTemplate
  function createFrame() returns framehandle

// ============================================================================
public class NativeFrameTemplate implements INativeFrameTemplate
  private NativeFrameDefinition m_frameDef
  private Action1<framehandle> m_initializer

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct (NativeFrameDefinition frameDef)
    m_frameDef = frameDef

  // --------------------------------------------------------------------------
  ondestroy
    m_frameDef = null
    if (m_initializer != null)
      m_initializer.release()
      m_initializer = null

  // --------------------------------------------------------------------------
  function getFrameDefinition() returns NativeFrameDefinition
    return m_frameDef
  
  // --------------------------------------------------------------------------
  function setFrameDefinition(NativeFrameDefinition value)
    m_frameDef = value

  // --------------------------------------------------------------------------
  function getInitializer() returns Action1<framehandle>
    return m_initializer
  
  // --------------------------------------------------------------------------
  function setInitializer(Action1<framehandle> value)
    m_initializer = value.acquire()

  // --------------------------------------------------------------------------
  override function createFrame() returns framehandle
    if (m_frameDef == null)
      return null
    let frame = m_frameDef.buildFrame()
    if (m_initializer != null)
      m_initializer.call(frame)
    return frame

// ============================================================================
public interface INativeFrameTemplateSelector
  function getFrameTemplate(int typeid) returns INativeFrameTemplate

// ============================================================================
public class NativeFrameTemplateSelector implements INativeFrameTemplateSelector
  private IterableMap<int, INativeFrameTemplate> m_typeIdToTemplateMap = new IterableMap<int, INativeFrameTemplate>()
  private INativeFrameTemplate m_defaultFrameTemplate

  // --------------------------------------------------------------------------
  function getDefaultFrameTemplate() returns INativeFrameTemplate
    return m_defaultFrameTemplate

  // --------------------------------------------------------------------------
  function setDefaultFrameTemplate(INativeFrameTemplate value)
    m_defaultFrameTemplate = value

  // --------------------------------------------------------------------------
  function registerFrameTemplate(int typeid, INativeFrameTemplate template)
    m_typeIdToTemplateMap.put(typeid, template)
  
  // --------------------------------------------------------------------------
  function unregisterFrameTemplate(int typeid)
    m_typeIdToTemplateMap.remove(typeid)

  // --------------------------------------------------------------------------
  override function getFrameTemplate(int typeid) returns INativeFrameTemplate
    return m_typeIdToTemplateMap.get(typeid)

// ============================================================================
public class NativeFramePool
  private NativeFrameTemplate m_frameTemplate
  private Action1<framehandle> m_initializer
  private Vector<framehandle> m_freeList

  // --------------------------------------------------------------------------
  construct(NativeFrameTemplate frameTemplate, int initialSize)
    m_frameTemplate = frameTemplate
    m_freeList = new Vector<framehandle>(initialSize)

    let ini = m_frameTemplate.getInitializer()
    if (ini != null)
      m_initializer = ini.acquire()

  // --------------------------------------------------------------------------
  ondestroy

    for frame in m_freeList
      frame.hide()
      frame.remove()
    m_freeList.clear()

    if (m_initializer != null)
      m_initializer.release()
      m_initializer = null

    destroy m_frameTemplate

  // --------------------------------------------------------------------------
  function getFramehandle() returns framehandle
    framehandle fh
    if (m_freeList.isEmpty())
      fh = m_frameTemplate.createFrame()
      g_framehandleToPool.put(fh, this)
    else
      fh = m_freeList.pop()
    if (m_initializer != null)
      m_initializer.call(fh)
    return fh

  // --------------------------------------------------------------------------
  function release(framehandle fh)
    if (g_framehandleToPool.get(fh) != this)
      error("framehandle does not belong to pool")
    releaseUnsafe(fh)

  // --------------------------------------------------------------------------
  protected function releaseUnsafe(framehandle fh)
    m_freeList.push(fh)
    fh.setParent(null)
    fh.hide()

// ============================================================================
public function framehandle.release()
  let pool = g_framehandleToPool.get(this)
  if (pool != null)
    pool.releaseUnsafe(this)
  else
    this.remove()

// ============================================================================
init
  g_framehandleToPool = new HashMap<framehandle, NativeFramePool>()