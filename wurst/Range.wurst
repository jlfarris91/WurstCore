package Range
import Math

// ============================================================================
public tuple rangeReal(real min, real max)
public tuple rangeInt(int min, int max)

// ============================================================================
public constant rangeInt INT_RANGE_ZERO = rangeInt(0, 0)
public constant rangeReal REAL_RANGE_ZERO = rangeReal(0.0, 0.0)

// ============================================================================
public function rangeReal.getRandom() returns real
  return GetRandomReal(this.min, this.max)

// ============================================================================
public function rangeInt.getRandom() returns int
  return GetRandomInt(this.min, this.max)

// ============================================================================
public function rangeInt.getCount() returns int
  return this.max - this.min

// ============================================================================
public function rangeReal.getLength() returns real
  return RAbsBJ(this.max - this.min)

// ============================================================================
public function rangeInt.getLength() returns int
  return IAbsBJ(this.max - this.min)

// ============================================================================
public function rangeReal.getMid() returns real
  return (this.min + this.max) / 2.0

// ============================================================================
public function rangeInt.getMid() returns int
  return R2I(I2R(this.min + this.max) / 2.0)

// ============================================================================
public function int.toRange() returns rangeInt
  return rangeInt(this, this)

// ============================================================================
public function real.toRange() returns rangeReal
  return rangeReal(this, this)

// ============================================================================
public function real.inRange(rangeReal range) returns bool
  return this.isBetween(range.min, range.max)

// ============================================================================
public function int.inRange(rangeInt range) returns bool
  return this.isBetween(range.min, range.max)

// ============================================================================
public function rangeReal.grow(real value) returns rangeReal
  return rangeReal(this.min - value, this.max + value)

// ============================================================================
public function rangeInt.grow(int value) returns rangeInt
  return rangeInt(this.min - value, this.max + value)

// ============================================================================
public function rangeReal.toString() returns string
  return "{0}-{1}".format(this.min.toString(), this.max.toString())

// ============================================================================
public function rangeInt.toString() returns string
  return "{0}-{1}".format(this.min.toString(), this.max.toString())

// ============================================================================
public function rangeReal.parameterize(real value) returns real
  return parameterize(this.min, this.max, value)

// ============================================================================
public function rangeReal.parameterize01(real value) returns real
  return parameterize01(this.min, this.max, value)

// ============================================================================
public function rangeInt.parameterize(int value) returns real
  return parameterize(this.min, this.max, value)

// ============================================================================
public function rangeInt.parameterize01(int value) returns real
  return parameterize01(this.min, this.max, value)

// ============================================================================
public function lerp(rangeReal start, rangeReal _end, real t) returns rangeReal
  return rangeReal(lerp(start.min, _end.min, t), lerp(start.max, _end.max, t))  

// ============================================================================
public function lerp(rangeInt start, rangeInt _end, real t) returns rangeInt
  return rangeInt(lerpInt(start.min, _end.min, t), lerpInt(start.max, _end.max, t))

// ============================================================================
public interface RangeRealFunc<T>
  function call() returns rangeReal

// ============================================================================
public interface RangeRealFunc1<T>
  function call(T arg1) returns rangeReal

// ============================================================================
public interface RangeRealAction
  function call(rangeReal arg)

// ============================================================================
public interface RangeRealAction1<T>
  function call(rangeReal arg1, T arg2)

// ============================================================================
public interface RangeIntFunc<T>
  function call() returns rangeInt

// ============================================================================
public interface RangeIntFunc1<T>
  function call(T arg1) returns rangeInt

// ============================================================================
public interface RangeIntAction
  function call(rangeInt arg)

// ============================================================================
public interface RangeIntAction1<T>
  function call(rangeInt arg1, T arg2)

// ============================================================================
public class FunctionalRangeReal
  private RangeRealFunc m_getter
  private RangeRealAction m_setter
  private rangeReal m_value

  // --------------------------------------------------------------------------
  construct(rangeReal value)
    m_value = value

  // --------------------------------------------------------------------------
  construct(RangeRealFunc getter)
    m_getter = getter
    m_setter = null

  // --------------------------------------------------------------------------
  construct(RangeRealFunc getter, RangeRealAction setter)
    m_getter = getter
    m_setter = setter

  // --------------------------------------------------------------------------
  ondestroy
    if (m_getter != null)
      destroy m_getter
      m_getter = null

    if (m_setter != null)
      destroy m_setter
      m_setter = null

  // --------------------------------------------------------------------------
  function getValue() returns rangeReal
    if (m_getter != null)
      m_value = m_getter.call()
    return m_value

  // --------------------------------------------------------------------------
  function setValue(rangeReal value)
    m_value = value
    if (m_setter != null)
      m_setter.call(value)

  // --------------------------------------------------------------------------
  static function fromValue(rangeReal value) returns FunctionalRangeReal
    return new FunctionalRangeReal(value)

  // --------------------------------------------------------------------------
  static function fromFunc(RangeRealFunc func) returns FunctionalRangeReal
    return new FunctionalRangeReal(func, null)

// ============================================================================
public class FunctionalRangeRealT
  private RangeRealFunc1<real> m_getter
  private RangeRealAction1<real> m_setter
  private rangeReal m_value

  // --------------------------------------------------------------------------
  construct(rangeReal value)
    m_value = value

  // --------------------------------------------------------------------------
  construct(RangeRealFunc1<real> getter)
    m_getter = getter
    m_setter = null

  // --------------------------------------------------------------------------
  construct(RangeRealFunc1<real> getter, RangeRealAction1<real> setter)
    m_getter = getter
    m_setter = setter

  // --------------------------------------------------------------------------
  ondestroy
    if (m_getter != null)
      destroy m_getter
      m_getter = null

    if (m_setter != null)
      destroy m_setter
      m_setter = null

  // --------------------------------------------------------------------------
  function getValue(real time) returns rangeReal
    if (m_getter != null)
      m_value = m_getter.call(time)
    return m_value

  // --------------------------------------------------------------------------
  function setValue(real time, rangeReal value)
    m_value = value
    if (m_setter != null)
      m_setter.call(value, time)

  // --------------------------------------------------------------------------
  static function fromValue(rangeReal value) returns FunctionalRangeRealT
    return new FunctionalRangeRealT(value)

  // --------------------------------------------------------------------------
  static function fromFunc(RangeRealFunc1<real> func) returns FunctionalRangeRealT
    return new FunctionalRangeRealT(func, null)

// ============================================================================
public class FunctionalRangeInt
  private RangeIntFunc m_getter
  private RangeIntAction m_setter
  private rangeInt m_value

  // --------------------------------------------------------------------------
  construct(rangeInt value)
    m_value = value

  // --------------------------------------------------------------------------
  construct(RangeIntFunc getter)
    m_getter = getter
    m_setter = null

  // --------------------------------------------------------------------------
  construct(RangeIntFunc getter, RangeIntAction setter)
    m_getter = getter
    m_setter = setter

  // --------------------------------------------------------------------------
  ondestroy
    if (m_getter != null)
      destroy m_getter
      m_getter = null

    if (m_setter != null)
      destroy m_setter
      m_setter = null

  // --------------------------------------------------------------------------
  function getValue() returns rangeInt
    if (m_getter != null)
      m_value = m_getter.call()
    return m_value

  // --------------------------------------------------------------------------
  function setValue(rangeInt value)
    m_value = value
    if (m_setter != null)
      m_setter.call(value)

  // --------------------------------------------------------------------------
  static function fromValue(rangeInt value) returns FunctionalRangeInt
    return new FunctionalRangeInt(value)

  // --------------------------------------------------------------------------
  static function fromFunc(RangeIntFunc func) returns FunctionalRangeInt
    return new FunctionalRangeInt(func, null)

// ============================================================================
public class FunctionalRangeIntT
  private RangeIntFunc1<real> m_getter
  private RangeIntAction1<real> m_setter
  private rangeInt m_value

  // --------------------------------------------------------------------------
  construct(rangeInt value)
    m_value = value

  // --------------------------------------------------------------------------
  construct(RangeIntFunc1<real> getter)
    m_getter = getter
    m_setter = null

  // --------------------------------------------------------------------------
  construct(RangeIntFunc1<real> getter, RangeIntAction1<real> setter)
    m_getter = getter
    m_setter = setter

  // --------------------------------------------------------------------------
  ondestroy
    if (m_getter != null)
      destroy m_getter
      m_getter = null

    if (m_setter != null)
      destroy m_setter
      m_setter = null

  // --------------------------------------------------------------------------
  function getValue(real time) returns rangeInt
    if (m_getter != null)
      m_value = m_getter.call(time)
    return m_value

  // --------------------------------------------------------------------------
  function setValue(real time, rangeInt value)
    m_value = value
    if (m_setter != null)
      m_setter.call(value, time)

  // --------------------------------------------------------------------------
  static function fromValue(rangeInt value) returns FunctionalRangeIntT
    return new FunctionalRangeIntT(value)

  // --------------------------------------------------------------------------
  static function fromFunc(RangeIntFunc1<real> func) returns FunctionalRangeIntT
    return new FunctionalRangeIntT(func, null)