package UnitMetadata
import public Composition
import LinkedList
import ErrorHandling
import ErrorIf
import ClosureEvents
import initlater UnitComponent
import UnitExtensions
import UnitIndexer

IUnitMetadata array g_unitMetadatas
LinkedList<IUnitMetadataFactory> g_unitMetadataFactories
int array g_ignoreIndexingCounter

@configurable public bool g_enableLogging = false

// ============================================================================
function logDebug(string message)
  if (g_enableLogging)
    Log.debug(message)

// ============================================================================
public interface IUnitMetadata extends IComposite
  function getUnit() returns unit
  function attach(unit u)
  function detach()

// ============================================================================
public interface IUnitMetadataFactory
  function createUnit(unit u) returns IUnitMetadata

// ============================================================================
public class UnitMetadata implements IUnitMetadata
  protected unit m_unit
  private CompositionManager m_compositionManager

  // --------------------------------------------------------------------------
  ondestroy
    if (m_compositionManager != null)
      destroy m_compositionManager
      m_compositionManager = null

    m_unit = null

  // --------------------------------------------------------------------------
  @inline
  override function getUnit() returns unit
    return m_unit

  // --------------------------------------------------------------------------
  override function attach(unit unitToAttachTo)
    ErrorIf.argumentIsNull(unitToAttachTo, "unitToAttachTo")

    if (unitToAttachTo == m_unit)
      return
  
    // This unit was not indexed for whatever reason
    let newIndex = unitToAttachTo.getIndex()
    if (newIndex == 0)
      error("Attempting to attach to a deindexed unit")
      return

    // The new unit was indexed so we should assign the metadata
    g_unitMetadatas[newIndex] = this
    setUnit(unitToAttachTo)

    logDebug("[UnitMetadata.attach] Attached to " + unitToAttachTo.getName())

  // --------------------------------------------------------------------------
  override function detach()

    let currentUnit = getUnit()
    if (currentUnit == null)
      error("Metadata has no assigned unit")
      return

    let currentIndex = currentUnit.getIndex()
    if (currentIndex == 0)
      error("Metadata was assigned an unindexed unit")
      return

    g_unitMetadatas[currentIndex] = null
    setUnit(null)

    logDebug("[UnitMetadata.detach] Detached from " + currentUnit.getName())

  // --------------------------------------------------------------------------
  function onKilled()
    if (m_compositionManager != null)
      for comp in m_compositionManager
        let unitComp = comp castTo UnitComponent
        unitComp.onOwnerKilled()

  // --------------------------------------------------------------------------
  protected function onUnitChanged(unit _oldUnit, unit _newUnit)
    skip

  // --------------------------------------------------------------------------
  private function setUnit(unit u)
    let oldUnit = m_unit
    let newUnit = u
    if (oldUnit != newUnit)
      changeUnit(oldUnit, newUnit)

  // --------------------------------------------------------------------------
  private function changeUnit(unit oldUnit, unit newUnit)

    // Disable and then re-enable any components that were enabled and operated
    // under the context of the old unit
    LinkedList<IComponent> enabledComponents = null
    if (m_compositionManager != null)
      enabledComponents = new LinkedList<IComponent>()
      for comp in m_compositionManager
        if (comp.getEnabled())
          enabledComponents.add(comp)
          comp.setEnabled(false)

    m_unit = newUnit
    onUnitChanged(oldUnit, newUnit)

    // Now that the backing field for getUnit() has changed, re-enable any
    // components that were enabled with the old unit, also alert them
    if (enabledComponents != null)
      for comp in enabledComponents
        if (comp != null)
          comp.setEnabled(true)
        let unitComp = comp castTo UnitComponent
        if (unitComp != null)
          unitComp.onUnitChanged(oldUnit, newUnit)

      destroy enabledComponents

  // --------------------------------------------------------------------------
  @inline
  override function addComponent(IComponent component) returns IComponent
    if (m_compositionManager == null)
      m_compositionManager = new CompositionManager()
    return m_compositionManager.addComponent(component)

  // --------------------------------------------------------------------------
  @inline
  override function removeComponent(IComponent component) returns bool
    if (m_compositionManager == null)
      return false
    return m_compositionManager.removeComponent(component)

  // --------------------------------------------------------------------------
  @inline
  override function getComponent(typeInfo componentType) returns IComponent
    return m_compositionManager != null ? m_compositionManager.getComponent(componentType) : null

// ============================================================================
public function unit.hasMetadata() returns bool
  return this.getMetadata() != null

// ============================================================================
public function unit.getMetadata() returns IUnitMetadata
  let index = this.getIndex()
  if (index == 0)
    return null
  return g_unitMetadatas[index]

// ============================================================================
public function unit.getMetadataRequired() returns IUnitMetadata
  let index = this.getIndex()
  if (index == 0)
    error("No metadata found for unit " + this.getName())
  return g_unitMetadatas[index]

// ============================================================================
public function registerUnitMetadataFactory(IUnitMetadataFactory factory)
  ErrorIf.argumentIsNull(factory, "factory")
  g_unitMetadataFactories.addAt(factory, 0)

// ============================================================================
public function unregisterUnitMetadataFactory(IUnitMetadataFactory factory)
  ErrorIf.argumentIsNull(factory, "factory")
  g_unitMetadataFactories.remove(factory)

// ============================================================================
public function constructUnitMetadata(unit u) returns IUnitMetadata
  ErrorIf.argumentIsNull(u, "u")
  IUnitMetadata metadata = null
  for factory in g_unitMetadataFactories
    let uu = factory.createUnit(u)
    if (uu != null)
      metadata = uu
      break
  if (metadata == null)
    metadata = new UnitMetadata()
    logDebug("No unit metadata factory handled unit " + u.getName() + ". defaulting to UnitMetadata")
  metadata.attach(u)
  return metadata

// ============================================================================
public function createUnitTLS(player owner, integer unitId, real x, real y, real face) returns unit
  return CreateUnit(owner, unitId, x, y, face)

// ============================================================================
public function createUnitTLS(player owner, integer unitId, vec2 pos, real face) returns unit
  return CreateUnit(owner, unitId, pos.x, pos.y, face)

// ============================================================================
public function createUnitTLS(IUnitMetadata metadata, player owner, integer unitId, real x, real y, real face) returns unit
  ErrorIf.argumentIsNull(metadata, "metadata")

  let oldUnit = metadata.getUnit()
  metadata.detach()

  startIgnoreIndexing(owner)
  let newUnit = CreateUnit(owner, unitId, x, y, face)
  stopIgnoreIndexing(owner)

  if (newUnit.hasMetadata())
    error("[createUnitTLS] Unit should not have metadata yet")
    return null

  metadata.attach(newUnit)

  logDebug("[createUnitTLS] Reattached metadata from unit " + (oldUnit != null ? oldUnit.getName() : "null") + " to unit " + newUnit.getName())

  return newUnit

// ============================================================================
public function replaceUnitTLS(unit whichUnit, integer newUnitId, integer unitStateMethod) returns unit
  ErrorIf.argumentIsNull(whichUnit, "whichUnit")

  let oldUnitName = whichUnit.getName()
  let existingMetadata = whichUnit.getMetadata()
  let owningPlayer = whichUnit.getOwner()

  if (existingMetadata != null)
    existingMetadata.detach()
    startIgnoreIndexing(owningPlayer)
  else
    logDebug("[replaceUnitTLS] Replacing unit " + whichUnit.getName() + " with no attached metadata")

  let newUnit = replaceUnitFixedTLS(whichUnit, newUnitId, unitStateMethod)

  if (newUnit.hasMetadata())
    error("Unit should not have metadata yet")
  
  if (existingMetadata != null)
    stopIgnoreIndexing(owningPlayer)
    existingMetadata.attach(newUnit)

  logDebug("[replaceUnitTLS] Reattached metadata from unit " + oldUnitName + " to unit " + newUnit.getName())
    
  return newUnit

// ============================================================================
function onUnitKilled()
  let dyingUnit = GetDyingUnit()
  
  let metadata = dyingUnit.getMetadata() castTo UnitMetadata
  if (metadata == null)
    return

  metadata.onKilled()
  logDebug("[onUnitKilled] " + dyingUnit.getName() + " was killed")

// ============================================================================
function onUnitIndexed(unit indexingUnit)
  if (isIgnoringIndexing(indexingUnit.getOwner()))
    logDebug("[onUnitIndexed] Ignoring indexed unit {0}".format(indexingUnit.getName()))
    return

  let index = indexingUnit.getIndex()
  
  var metadata = g_unitMetadatas[index]
  if (metadata != null)
    error("Metadata already exists for unit {0}".format(indexingUnit.getName()))
    return

  metadata = constructUnitMetadata(indexingUnit)
  g_unitMetadatas[index] = metadata

  logDebug("[onUnitIndexed] Created metadata for unit {0}".format(indexingUnit.getName()))

// ============================================================================
function onUnitDeindexed(unit indexingUnit)
  if (isIgnoringIndexing(indexingUnit.getOwner()))
    logDebug("[onUnitDeindexed] Ignoring deindexed unit {0}".format(indexingUnit.getName()))
    return

  let index = indexingUnit.getIndex()
  let metadata = indexingUnit.getMetadata()

  if (metadata != null)
    destroy metadata
    logDebug("[onUnitDeindexed] Destroyed metadata for unit {0}".format(indexingUnit.getName()))

  g_unitMetadatas[index] = null

// ============================================================================
public function startIgnoreIndexing(player p)
  g_ignoreIndexingCounter[p.getId()]++
  logDebug("Start ignoring indexing " + I2S(g_ignoreIndexingCounter[p.getId()]))

// ============================================================================
public function stopIgnoreIndexing(player p)
  g_ignoreIndexingCounter[p.getId()]--
  logDebug("Stop ignoring indexing " + I2S(g_ignoreIndexingCounter[p.getId()]))

// ============================================================================
public function isIgnoringIndexing(player p) returns bool
  return g_ignoreIndexingCounter[p.getId()] > 0

// ============================================================================
init
  g_unitMetadataFactories = new LinkedList<IUnitMetadataFactory>()

  for i = 0 to 24
    g_ignoreIndexingCounter[i] = 0

  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onUnitKilled)

  onUnitIndex(() -> onUnitIndexed(getIndexingUnit()))
  onUnitDeindex(() -> onUnitDeindexed(getIndexingUnit()))
