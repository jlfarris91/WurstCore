package UnitComponent
import public UnitMetadata
import public initlater Component
import Object
import Action
import public Dispatcher

// ============================================================================
public class UnitComponentCreationContext
  IUnitMetadata owner

// ============================================================================
public constant int typeId_UnitComponent = Meta.reserveAbstractClass("UnitComponent.UnitComponent")
public abstract class UnitComponent extends Component implements IDispatcher
  private IUnitMetadata m_owner
  private bool m_disableOnDeath = true

  // --------------------------------------------------------------------------
  construct(IUnitMetadata ownerUnit)
    super(ownerUnit)
    m_owner = ownerUnit

  // --------------------------------------------------------------------------
  override function getOwner() returns IUnitMetadata
    return m_owner

  // --------------------------------------------------------------------------
  function getOwnerUnit() returns unit
    return m_owner.getUnit()

  // --------------------------------------------------------------------------
  function getOwnerPlayer() returns player
    return getOwnerUnit().getOwner()

  // --------------------------------------------------------------------------
  function setDisableOnDeath(bool disableOnDeath)
    m_disableOnDeath = disableOnDeath

  // --------------------------------------------------------------------------
  function getDisableOnDeath() returns bool
    return m_disableOnDeath

  // --------------------------------------------------------------------------
  function onOwnerKilled()
    if (m_disableOnDeath)
      disable()

  // --------------------------------------------------------------------------
  function onUnitChanged(unit _oldUnit, unit _newUnit)
    skip

  // --------------------------------------------------------------------------
  override function getDispatcherContext(bool requireEnabled) returns DispatcherContext
    return new UnitComponentDispatcher(getOwnerUnit(), this.typeId, requireEnabled)

// ============================================================================
class UnitComponentDispatcher extends DispatcherContext
  private unit m_ownerUnit
  private int m_compTypeId
  private bool m_requireEnabled

  // --------------------------------------------------------------------------
  construct(unit ownerUnit, int compTypeId, bool requireEnabled)
    m_ownerUnit = ownerUnit
    m_compTypeId = compTypeId
    m_requireEnabled = requireEnabled

  // --------------------------------------------------------------------------
  override function dispatch(Action work)
    if (m_ownerUnit != null and m_ownerUnit.isAlive())
      let comp = m_ownerUnit.getComponent(m_compTypeId)
      if (comp != null)
        if (not m_requireEnabled or comp.getEnabled())
          work.call()

// ============================================================================
init
  Meta.register("UnitComponent", (registrar) -> registerMetadata(registrar))

///////////////////////////////////////////////////////////////////////////////
function registerMetadata(MetaRegistrar registrar)
  registrar.registerAbstractClass(typeId_UnitComponent, "UnitComponent.UnitComponent")..setBase(typeId_Component)
  ..registerDestructor((object object) -> destroy object.cast<UnitComponent>(typeId_Component))

  registrar.registerClass(UnitComponentCreationContext.typeId)
///////////////////////////////////////////////////////////////////////////////