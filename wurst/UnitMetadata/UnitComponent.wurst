package UnitComponent
import public UnitMetadata
import public initlater Component
import ClosureTimers
import ErrorHandling
import Meta
import Object
import Events

// ============================================================================
public class UnitComponentCreationContext
  IUnitMetadata owner
  /////////////////////////////////////////////////////////////////////////////
  protected static function registerMetadata()
    Meta.registerClass(UnitComponentCreationContext.typeId)
  /////////////////////////////////////////////////////////////////////////////

// ============================================================================
public constant int typeId_UnitComponent = UnitComponent.registerMetadata().getTypeId()
public abstract class UnitComponent extends Component
  private IUnitMetadata m_owner
  private bool m_disableOnDeath = true

  // --------------------------------------------------------------------------
  construct(IUnitMetadata ownerUnit)
    super(ownerUnit)
    m_owner = ownerUnit

  /////////////////////////////////////////////////////////////////////////////
  protected static function registerMetadata() returns Type
    let _type = Meta.registerAbstractClass("UnitComponent.UnitComponent")..setBase(typeId_Component)
    let _typeId = _type.getTypeId()
    _type.registerDestructor((object object) -> destroy object.cast<UnitComponent>(_typeId))
    return _type
  /////////////////////////////////////////////////////////////////////////////

  // --------------------------------------------------------------------------
  override function getOwner() returns IUnitMetadata
    return m_owner

  // --------------------------------------------------------------------------
  function getOwnerUnit() returns unit
    return m_owner.getUnit()

  // --------------------------------------------------------------------------
  function getOwningPlayer() returns player
    return getOwnerUnit().getOwner()

  // --------------------------------------------------------------------------
  function setDisableOnDeath(bool disableOnDeath)
    m_disableOnDeath = disableOnDeath

  // --------------------------------------------------------------------------
  function getDisableOnDeath() returns bool
    return m_disableOnDeath

  // --------------------------------------------------------------------------
  function onOwnerKilled()
    if (m_disableOnDeath)
      disable()

  // --------------------------------------------------------------------------
  function onUnitChanged(unit _oldUnit, unit _newUnit)
    skip

  // --------------------------------------------------------------------------
  protected function dispatch(Action work)
    dispatch(true, work)

  // --------------------------------------------------------------------------
  protected function dispatch(bool requireEnabled, Action work)
    dispatch(getOwnerUnit(), this.typeId, requireEnabled, work)

  // --------------------------------------------------------------------------
  protected static function dispatch(unit ownerUnit, int compTypeId, bool requireEnabled, Action work)
    if (ownerUnit != null and ownerUnit.isAlive())
      let comp = ownerUnit.getComponent(compTypeId)
      if (comp != null)
        if (not requireEnabled or comp.getEnabled())
          work.call()
    /*
        else
          Log.debug("UnitComponent", "dispatch", ownerUnit.getName(), "Component must be enabled")
      else
        Log.debug("UnitComponent", "dispatch", ownerUnit.getName(), "Unit has no component of type " + Meta.typeIdToTypeName(compTypeId))
    else
      Log.debug("UnitComponent", "dispatch", ownerUnit.getName(), "Unit is dead")
    */
    if (work.getDestroyAfterUse())
      destroy work

  // --------------------------------------------------------------------------
  protected function dispatch(real seconds, Action work) returns CallbackSingle
    return dispatch(seconds, true, work)

  // --------------------------------------------------------------------------
  protected function dispatch(real seconds, bool requireEnabled, Action work) returns CallbackSingle
    return dispatch(getOwnerUnit(), this.typeId, seconds, requireEnabled, work)

  // --------------------------------------------------------------------------
  protected static function dispatch(unit ownerUnit, int compTypeId, real seconds, bool requireEnabled, Action work) returns CallbackSingle
    if (ownerUnit == null)
      argumentNullError("ownerUnit")
    if (work == null)
      argumentNullError("work")
    return doAfter(seconds, new DispatchedCallbackSingle(ownerUnit, compTypeId, requireEnabled, work))

// ============================================================================
public function Event.registerDispatched(UnitComponent comp, Action handler) returns _handle
  return this.registerDispatched(comp, true, handler)

// ============================================================================
public function Event.registerDispatched(UnitComponent comp, bool requireEnabled, Action handler) returns _handle
  return this.register(new DispatchedEventCallback(comp.getOwnerUnit(), comp.typeId, requireEnabled, handler))

// ============================================================================
module DispatchedWorkModule
  protected unit m_ownerUnit
  protected int m_compTypeId
  protected bool m_requireEnabled
  protected Action m_work

  // --------------------------------------------------------------------------
  function _construct(unit ownerUnit, int compTypeId, bool requireEnabled, Action work)
    if (ownerUnit == null)
      argumentNullError("ownerUnit")
    if (work == null)
      argumentNullError("work")
    m_ownerUnit = ownerUnit
    m_compTypeId = compTypeId
    m_requireEnabled = requireEnabled
    m_work = work
  
  // --------------------------------------------------------------------------
  ondestroy
    if (m_work != null and m_work.getDestroyAfterUse())
      destroy m_work
    m_work = null

// ============================================================================
class DispatchedCallbackSingle extends CallbackSingle
  use DispatchedWorkModule

  // --------------------------------------------------------------------------
  construct(unit ownerUnit, int compTypeId, bool requireEnabled, Action work)
    _construct(ownerUnit, compTypeId, requireEnabled, work)

  // --------------------------------------------------------------------------
  override function call()
    UnitComponent.dispatch(m_ownerUnit, m_compTypeId, m_requireEnabled, m_work)
    m_work = null

// ============================================================================
class DispatchedEventCallback extends EventCallback
  use DispatchedWorkModule

  // --------------------------------------------------------------------------
  construct(unit ownerUnit, int compTypeId, bool requireEnabled, Action work)
    _construct(ownerUnit, compTypeId, requireEnabled, work)

  // --------------------------------------------------------------------------
  override function call()
    UnitComponent.dispatch(m_ownerUnit, m_compTypeId, m_requireEnabled, m_work)
    m_work = null

// ============================================================================
init
  registerPackageMetadata()

///////////////////////////////////////////////////////////////////////////////
function registerPackageMetadata()
  UnitComponentCreationContext.registerMetadata()
///////////////////////////////////////////////////////////////////////////////