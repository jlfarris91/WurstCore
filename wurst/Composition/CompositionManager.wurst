package CompositionManager
import LinkedList
import HashMap
import IComponent
import IComposite
import Component
import public Type

// ============================================================================
public class CompositionManager implements IComposite
  protected LinkedList<IComponent> _components
  protected HashMap<int, IComponent> _typeToComponentMap

  // --------------------------------------------------------------------------
  construct()
    _components = new LinkedList<IComponent>()
    _typeToComponentMap = new HashMap<int, IComponent>()

  // --------------------------------------------------------------------------
  ondestroy
    for component in _components
      destroy component
      
    destroy _components
    _components = null

    destroy _typeToComponentMap
    _typeToComponentMap = null

  // --------------------------------------------------------------------------
  @inline
  override function addComponent(IComponent component) returns IComponent
    _components.add(component)
    _typeToComponentMap.put(component.typeId, component)
    (component castTo Component).initialize()
    component.setEnabled(true)
    return component

  // --------------------------------------------------------------------------
  @inline
  override function removeComponent(IComponent component) returns bool
    if (not _components.remove(component))
      return false    
    component.setEnabled(false)
    destroy component
    return true

  // --------------------------------------------------------------------------
  @inline
  override function getComponent(Type componentType) returns IComponent
    return _typeToComponentMap.get(componentType.id)

  // --------------------------------------------------------------------------
  function iterator() returns LLIterator<IComponent>
    return _components.iterator()