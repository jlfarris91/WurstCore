package CompositionManager
import LinkedList
import HashMap
import IComponent
import public Type
import ClosureTimers
import ErrorHandling

// ============================================================================
public class CompositionManager
  protected LinkedList<IComponent> _components
  protected HashMap<int, IComponent> _typeToComponentMap

  // --------------------------------------------------------------------------
  construct()
    _components = new LinkedList<IComponent>()
    _typeToComponentMap = new HashMap<int, IComponent>()

  // --------------------------------------------------------------------------
  ondestroy
    for component in _components
      component.setEnabled(false)

    for component in _components
      let compTypeId = component.typeId
      destroy component
      _typeToComponentMap.remove(compTypeId)
      
    destroy _components
    _components = null

    destroy _typeToComponentMap
    _typeToComponentMap = null

  // --------------------------------------------------------------------------
  function addComponent(IComponent component, bool startEnabled) returns IComponent
    if (component == null)
      argumentNullError("component")

    _components.add(component)
    _typeToComponentMap.put(component.typeId, component)
    component.setEnabled(startEnabled)
    return component

  // --------------------------------------------------------------------------
  function removeComponent(IComponent component) returns bool
    if (component == null)
      argumentNullError("component")

    if (not _components.remove(component))
      return false    
    component.setEnabled(false)
    _typeToComponentMap.remove(component.typeId)
    nullTimer(() -> destroy component)
    return true

  // --------------------------------------------------------------------------
  function getComponent(typeInfo componentType) returns IComponent
    return _typeToComponentMap.get(componentType.id)

  // --------------------------------------------------------------------------
  function iterator() returns LLIterator<IComponent>
    return _components.iterator()