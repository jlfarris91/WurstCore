package Composable
import IComposite
import CompositionManager
import IComponent

// ============================================================================
public abstract class Composable implements IComposite
  protected CompositionManager m_compositionManager

  // --------------------------------------------------------------------------
  ondestroy
    if (m_compositionManager != null)
      destroy m_compositionManager
      m_compositionManager = null

  // --------------------------------------------------------------------------
  function getCompositionManager() returns CompositionManager
    return m_compositionManager

  // --------------------------------------------------------------------------
  override function addComponent(IComponent component) returns IComponent
    return addComponent(component, true)

  // --------------------------------------------------------------------------
  override function addComponent(IComponent component, bool startEnabled) returns IComponent
    if (m_compositionManager == null)
      m_compositionManager = new CompositionManager()
    return m_compositionManager.addComponent(component, startEnabled)
   
  // --------------------------------------------------------------------------
  override function removeComponent(IComponent component) returns bool
    if (m_compositionManager == null)
      return false
    return m_compositionManager.removeComponent(component)

  // --------------------------------------------------------------------------
  override function getComponent(int componentTypeId) returns IComponent
    return m_compositionManager != null ? m_compositionManager.getComponent(componentTypeId) : null