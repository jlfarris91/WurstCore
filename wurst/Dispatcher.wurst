package Dispatcher
import Action
import ClosureTimers
import CircularBuffer
import ErrorHandling

public Dispatcher g_dispatcher

@configurable public constant real DISPATCHER_INTERVAL_HIGH = 0.2
@configurable public constant real DISPATCHER_INTERVAL_LOW = 0.5
@configurable public constant real DISPATCHER_INTERVAL_BACKGROUND = 1.0
@configurable public constant int DISPATCHER_MAX_PROCESS = 100
@configurable public constant int DISPATCHER_DEFAULT_BUFFER_CAPACITY = 512

// ============================================================================
public enum DispatchPriority
  HIGH
  LOW
  BACKGROUND  

// ============================================================================
public class GlobalDispatcher

  // --------------------------------------------------------------------------
  static function invoke(DispatchPriority priority, Action action)
    if (g_dispatcher == null)
      g_dispatcher = new Dispatcher()
    g_dispatcher.invoke(priority, action)

  // --------------------------------------------------------------------------
  static function invokeAfter(real seconds, DispatchPriority priority, Action action)
    if (g_dispatcher == null)
      g_dispatcher = new Dispatcher()
    g_dispatcher.invokeAfter(seconds, priority, action)

// ============================================================================
public class Dispatcher
  private CircularBuffer<Action> array[3] m_dispatchQueue
  private int array[3] m_maxProcessCount
  private int array[3] m_totalExecutions
  private int array[3] m_executionInLastSecond
  private int array[3] m_executionsPerSecond
  private CallbackPeriodic m_callbackHigh
  private CallbackPeriodic m_callbackLow
  private CallbackPeriodic m_callbackBackground
  string m_id

  // --------------------------------------------------------------------------
  construct()
    initialize(DISPATCHER_DEFAULT_BUFFER_CAPACITY, DISPATCHER_DEFAULT_BUFFER_CAPACITY, DISPATCHER_DEFAULT_BUFFER_CAPACITY)

  // --------------------------------------------------------------------------
  construct(int highBufferCapacity, int lowBufferCapacity, int backgroundBufferCapacity)
    initialize(highBufferCapacity, lowBufferCapacity, backgroundBufferCapacity)

  // --------------------------------------------------------------------------
  private function initialize(int highBufferCapacity, int lowBufferCapacity, int backgroundBufferCapacity)
    m_dispatchQueue[0] = new CircularBuffer<Action>(highBufferCapacity)
    m_dispatchQueue[1] = new CircularBuffer<Action>(lowBufferCapacity)
    m_dispatchQueue[2] = new CircularBuffer<Action>(backgroundBufferCapacity)

    m_maxProcessCount[0] = DISPATCHER_MAX_PROCESS
    m_maxProcessCount[1] = DISPATCHER_MAX_PROCESS
    m_maxProcessCount[2] = DISPATCHER_MAX_PROCESS

    m_callbackHigh = doPeriodically(DISPATCHER_INTERVAL_HIGH, (CallbackPeriodic cb) -> process(DispatchPriority.HIGH))
    m_callbackLow = doPeriodically(DISPATCHER_INTERVAL_LOW, (CallbackPeriodic cb) -> process(DispatchPriority.LOW))
    m_callbackBackground = doPeriodically(DISPATCHER_INTERVAL_BACKGROUND, (CallbackPeriodic cb) -> process(DispatchPriority.BACKGROUND))

    // update periodically
    doPeriodically(0.1) (CallbackPeriodic cb) ->
      m_executionsPerSecond[0] = m_executionInLastSecond[0]
      m_executionInLastSecond[0] = 0
      m_executionsPerSecond[1] = m_executionInLastSecond[1]
      m_executionInLastSecond[1] = 0
      m_executionsPerSecond[2] = m_executionInLastSecond[2]
      m_executionInLastSecond[2] = 0

  // --------------------------------------------------------------------------
  ondestroy
    if (m_callbackHigh != null)
      destroy m_callbackHigh
    if (m_callbackLow != null)
      destroy m_callbackLow
    if (m_callbackBackground != null)
      destroy m_callbackBackground

  // --------------------------------------------------------------------------
  function getMaxExecutions(DispatchPriority priority) returns int
    return m_maxProcessCount[priority castTo int]

  // --------------------------------------------------------------------------
  function setMaxExecutions(DispatchPriority priority, int value)
    m_maxProcessCount[priority castTo int] = min(DISPATCHER_MAX_PROCESS, value)

  // --------------------------------------------------------------------------
  function setMaxExecutions(int value)
    setMaxExecutions(DispatchPriority.HIGH, value)
    setMaxExecutions(DispatchPriority.LOW, value)
    setMaxExecutions(DispatchPriority.BACKGROUND, value)

  // --------------------------------------------------------------------------
  function invoke(DispatchPriority priority, Action action)
    let queue = m_dispatchQueue[priority castTo int]
    if (queue.isFull())
      error("Dispatcher queue {0} is full".format((priority castTo int).toString()))
    queue.enqueue(action)

  // --------------------------------------------------------------------------
  function invokeAfter(real seconds, DispatchPriority priority, Action action)
    doAfter(seconds) () ->
      invoke(priority, action)

  // --------------------------------------------------------------------------
  function getTotalExecutions(DispatchPriority priority) returns int
    return m_totalExecutions[(priority castTo int)]

  // --------------------------------------------------------------------------
  function getExecutionPerSecond(DispatchPriority priority) returns int
    return m_executionsPerSecond[(priority castTo int)]

  // --------------------------------------------------------------------------
  function getCount(DispatchPriority priority) returns int
    return m_dispatchQueue[priority castTo int].getCount()

  // --------------------------------------------------------------------------
  function getCapacity(DispatchPriority priority) returns int
    return m_dispatchQueue[priority castTo int].getCapacity()

  // --------------------------------------------------------------------------
  protected function process(DispatchPriority priority)
    let queue = m_dispatchQueue[priority castTo int]
    if (queue.isEmpty())
      return

    let maxProcessCount = getMaxExecutions(priority)

    var executionCount = 0
    while (not queue.isEmpty() and executionCount < maxProcessCount)
      let action = queue.dequeue()
      if (action != null)
        action.call()
        executionCount++
        if (action.getDestroyAfterUse())
          destroy action

    m_totalExecutions[priority castTo int] += executionCount
    m_executionInLastSecond[priority castTo int] += executionCount
    
    if (executionCount > 0)
      Log.debug("Dispatcher", "process", m_id, "[Priority {0}] Processed {1} actions ({2}/{3})".format((priority castTo int).toString(), executionCount.toString(), queue.getCount().toString(), queue.getCapacity().toString()))