package FrameLite
import HashMap
import LinkedList
import Layout
import Action
import FramehandleExtensions
import Reflection

@configurable public constant bool FRAME_SECURITY_CHECKS_ENABLED = false

Action1<FrameLite> g_invalidateFrameLayoutOnPropertyChanged = context -> context.invalidateLayout()
LinkedList<ILightweightProperty> g_allLightweightProperties = new LinkedList<ILightweightProperty>()

// ============================================================================
public class FrameLite
  static constant LightweightProperty<IFrameLiteFactory>    frameFactory          = new LightweightProperty<IFrameLiteFactory>(null, null)
  static constant LightweightProperty<Thickness>            margin                = new LightweightProperty<Thickness>(null, g_invalidateFrameLayoutOnPropertyChanged)
  static constant LightweightProperty<Thickness>            padding               = new LightweightProperty<Thickness>(null, g_invalidateFrameLayoutOnPropertyChanged)

  private framehandle m_frameHandle
  private FrameLite m_parent
  private bool m_initialized
  private LinkedList<FrameLite> m_children = new LinkedList<FrameLite>()
  private HorizontalLayoutMode m_horizontalLayoutMode = HorizontalLayoutMode.STRETCH
  private VerticalLayoutMode m_verticalLayoutMode = VerticalLayoutMode.STRETCH

  // --------------------------------------------------------------------------
  construct(framehandle frameHandle)
    m_frameHandle = frameHandle

  // --------------------------------------------------------------------------
  ondestroy
  //{
    if (m_frameHandle != null)
      m_frameHandle.remove()
      m_frameHandle = null

    if (m_parent != null)
      m_parent.m_children.remove(this)
      m_parent = null

    while m_children.isEmpty() == false
      destroy m_children.pop()
    destroy m_children
    m_children = null
  
    m_frameHandle.remove()
    m_frameHandle = null

    for prop in g_allLightweightProperties
      prop.clearValue(this)
  //}

  // --------------------------------------------------------------------------
  function getFrameHandle() returns framehandle
    return m_frameHandle

  // --------------------------------------------------------------------------
  function getParent() returns FrameLite
    return m_parent

  // --------------------------------------------------------------------------
  private function setParent(FrameLite value)
    if (m_parent == value)
      return

    if (m_parent != null)
      m_parent.m_children.remove(this)

    m_parent = value

    if (m_parent != null)
      m_parent.m_children.add(this)
      m_frameHandle.setParent(value.m_frameHandle)

    invalidateLayout()
  
  // --------------------------------------------------------------------------
  function getChildren() returns LinkedList<FrameLite>
    return m_children

  // --------------------------------------------------------------------------
  function addChild(FrameLite childFrame)
    if (childFrame.m_parent != this)
      childFrame.setParent(this)
      invalidateLayout()

  // --------------------------------------------------------------------------
  function removeChild(FrameLite childFrame)
    if (childFrame.m_parent == this)
      childFrame.setParent(null)
      invalidateLayout()

  // --------------------------------------------------------------------------
  function isPanel() returns bool
    return false

  // --------------------------------------------------------------------------
  function getWidth() returns real
    return m_frameHandle.getWidth()
  
  // --------------------------------------------------------------------------
  function setWidth(real value)
    if (m_frameHandle.getWidth() != value)
      m_frameHandle.setWidth(value)
      invalidateLayout()
  
  // --------------------------------------------------------------------------
  function getHeight() returns real
    return m_frameHandle.getHeight()
  
  // --------------------------------------------------------------------------
  function setHeight(real value)
    if (m_frameHandle.getHeight() != value)
      m_frameHandle.setHeight(value)
      invalidateLayout()
  
  // --------------------------------------------------------------------------
  function getSize() returns vec2
    return vec2(m_frameHandle.getWidth(), m_frameHandle.getHeight())
  
  // --------------------------------------------------------------------------
  function setSize(vec2 value)
    if (m_frameHandle.getWidth() != value.x or m_frameHandle.getHeight() != value.y)
      m_frameHandle.setWidth(value.x)
      m_frameHandle.setHeight(value.y)
      invalidateLayout()
      
  // --------------------------------------------------------------------------
  function setAbsArea(rectr area)
    m_frameHandle.setAbsPoint(FRAMEPOINT_CENTER, area.center())
    m_frameHandle.setWidth(area.width)
    m_frameHandle.setHeight(area.height)
    invalidateLayout()

  // --------------------------------------------------------------------------
  function setText(string value)
    m_frameHandle.setText(value)

  // --------------------------------------------------------------------------
  function isVisible() returns bool
    return m_frameHandle.isVisible()

  // --------------------------------------------------------------------------
  function getEnabled() returns bool
    return m_frameHandle.isEnabled()

  // --------------------------------------------------------------------------
  function getFrameFactory() returns IFrameLiteFactory
    return frameFactory.getValue(this)

  // --------------------------------------------------------------------------
  function setFrameFactory(IFrameLiteFactory value)
    frameFactory.setValue(this, value)

  // --------------------------------------------------------------------------
  function getHorizontalLayoutMode() returns HorizontalLayoutMode
    return m_horizontalLayoutMode

  // --------------------------------------------------------------------------
  function setHorizontalLayoutMode(HorizontalLayoutMode value)
    if (m_horizontalLayoutMode != value)
      m_horizontalLayoutMode = value
      invalidateLayout()

  // --------------------------------------------------------------------------
  function getVerticalLayoutMode() returns VerticalLayoutMode    
    return m_verticalLayoutMode

  // --------------------------------------------------------------------------
  function setVerticalLayoutMode(VerticalLayoutMode value)
    if (m_verticalLayoutMode != value)
      m_verticalLayoutMode = value
      invalidateLayout()

  // --------------------------------------------------------------------------
  function getMargin() returns thickness
    let valueObject = margin.getValue(this)
    return valueObject != null ? valueObject.value : ZEROTHICK

  // --------------------------------------------------------------------------
  function setMargin(thickness value)
    var valueObject = margin.getValue(this)
    if (valueObject == null)
      valueObject = new Thickness(value)
      margin.setValue(this, valueObject)
    else if (valueObject.value != value)
      valueObject.value = value
      margin.raisePropertyChanged(this)

  // --------------------------------------------------------------------------
  function getPadding() returns thickness
    let valueObject = padding.getValue(this)
    return valueObject != null ? valueObject.value : ZEROTHICK

  // --------------------------------------------------------------------------
  function setPadding(thickness value)
    var valueObject = padding.getValue(this)
    if (valueObject == null)
      valueObject = new Thickness(value)
      padding.setValue(this, valueObject)
    else if (valueObject.value != value)
      valueObject.value = value
      padding.raisePropertyChanged(this)

  // --------------------------------------------------------------------------
  function initialize()
    if (m_initialized)
      if (FRAME_SECURITY_CHECKS_ENABLED)
        Log.error(typeIdToTypeName(this.typeId), "initialize", "", "Initialize called more than once")
      return
    initializeFrame()
    m_initialized = true

  // --------------------------------------------------------------------------
  function initialize(rectr area)
    initialize()
    setAbsArea(area)

  // --------------------------------------------------------------------------
  protected function initializeFrame()
    skip

  // --------------------------------------------------------------------------
  function show()
    m_frameHandle.show()
  
  // --------------------------------------------------------------------------
  function show(player thisPlayer)
    m_frameHandle.show(thisPlayer)

  // --------------------------------------------------------------------------
  function hide()
    m_frameHandle.hide()

  // --------------------------------------------------------------------------
  function hide(player thisPlayer)
    m_frameHandle.hide(thisPlayer)

  // --------------------------------------------------------------------------
  function clearFocus()
    m_frameHandle.clearFocus()

  // --------------------------------------------------------------------------
  function invalidateLayout()
    if (m_initialized == false)
      return
    
    if (m_parent != null)
      m_parent.invalidateLayout()

    layout()

  // --------------------------------------------------------------------------
  protected function layout()
    if (m_parent != null and not m_parent.isPanel())
      layoutFrame(m_parent, this, m_parent.getPadding())
      
  // --------------------------------------------------------------------------
  static function layoutFrame(FrameLite parentFrame, FrameLite childFrame, thickness padding)

    let parentHandle = parentFrame.getFrameHandle()
    let childHandle = childFrame.getFrameHandle()

    childHandle.clearAllPoints()

    let horizontalLayoutMode = childFrame.getHorizontalLayoutMode()
    let verticalLayoutMode = childFrame.getVerticalLayoutMode()
    let margin = childFrame.getMargin() + padding

    if (horizontalLayoutMode == STRETCH and verticalLayoutMode == STRETCH)
    //{
      childHandle.setPoint(FRAMEPOINT_BOTTOMLEFT, parentHandle, FRAMEPOINT_BOTTOMLEFT, margin.bottomLeft() * LayoutScalars.bottomLeft)
      childHandle.setPoint(FRAMEPOINT_TOPRIGHT, parentHandle, FRAMEPOINT_TOPRIGHT, margin.topRight() * LayoutScalars.topRight)
    //}
    else if (horizontalLayoutMode == CENTER and verticalLayoutMode == CENTER)
    //{
      childHandle.setPoint(FRAMEPOINT_CENTER, parentHandle, FRAMEPOINT_CENTER, ZERO2)
    //}
    else if (horizontalLayoutMode == LEFT)
    //{
      if (verticalLayoutMode == BOTTOM or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_BOTTOMLEFT, parentHandle, FRAMEPOINT_BOTTOMLEFT, margin.bottomLeft() * LayoutScalars.bottomLeft)
      if (verticalLayoutMode == TOP or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_TOPLEFT, parentHandle, FRAMEPOINT_TOPLEFT, margin.topLeft()  * LayoutScalars.topLeft)
      if (verticalLayoutMode == CENTER)
        childHandle.setPoint(FRAMEPOINT_LEFT, parentHandle, FRAMEPOINT_LEFT, vec2(margin.left, 0))
    //}
    else if (horizontalLayoutMode == RIGHT)
    //{
      if (verticalLayoutMode == BOTTOM or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_BOTTOMRIGHT, parentHandle, FRAMEPOINT_BOTTOMRIGHT, margin.bottomRight() * LayoutScalars.bottomRight)
      if (verticalLayoutMode == TOP or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_TOPRIGHT, parentHandle, FRAMEPOINT_TOPRIGHT, margin.topRight()  * LayoutScalars.topRight)
      if (verticalLayoutMode == CENTER)
        childHandle.setPoint(FRAMEPOINT_RIGHT, parentHandle, FRAMEPOINT_RIGHT, vec2(-margin.right, 0))
    //}
    else if (horizontalLayoutMode == CENTER)
    //{
      if (verticalLayoutMode == BOTTOM or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_BOTTOM, parentHandle, FRAMEPOINT_BOTTOM, vec2(0, margin.bottom))
      if (verticalLayoutMode == TOP or verticalLayoutMode == STRETCH)
        childHandle.setPoint(FRAMEPOINT_TOP, parentHandle, FRAMEPOINT_TOP, vec2(0, -margin.top))
    //}
    else if (horizontalLayoutMode == STRETCH)
    //{
      if (verticalLayoutMode == BOTTOM)
        childHandle.setPoint(FRAMEPOINT_BOTTOMLEFT, parentHandle, FRAMEPOINT_BOTTOMLEFT, margin.bottomLeft() * LayoutScalars.bottomLeft)
        childHandle.setPoint(FRAMEPOINT_BOTTOMRIGHT, parentHandle, FRAMEPOINT_BOTTOMRIGHT, margin.bottomRight() * LayoutScalars.bottomRight)
      else if (verticalLayoutMode == TOP)
        childHandle.setPoint(FRAMEPOINT_TOPLEFT, parentHandle, FRAMEPOINT_TOPLEFT, margin.topLeft() * LayoutScalars.topLeft)
        childHandle.setPoint(FRAMEPOINT_TOPRIGHT, parentHandle, FRAMEPOINT_TOPRIGHT, margin.topRight() * LayoutScalars.topRight)
      else if (verticalLayoutMode == CENTER)
        childHandle.setPoint(FRAMEPOINT_LEFT, parentHandle, FRAMEPOINT_LEFT, vec2(margin.left, 0))
        childHandle.setPoint(FRAMEPOINT_RIGHT, parentHandle, FRAMEPOINT_RIGHT, vec2(-margin.right, 0))
    //}
    else
      Log.error("H: " + horizontalLayoutMode.toString() + " v: " + verticalLayoutMode.toString())

// ============================================================================
public interface IFrameLiteFactory
  function createFrame(framehandle frameHandle) returns FrameLite

// ============================================================================
public class DefaultFrameLiteFactory implements IFrameLiteFactory
  constant static IFrameLiteFactory instance = new DefaultFrameLiteFactory()
  
  // --------------------------------------------------------------------------
  override function createFrame(framehandle frameHandle) returns FrameLite
    return new FrameLite(frameHandle)

// ============================================================================
public interface IFrameLiteLayout
  function layout(FrameLite frame)

// ============================================================================
public interface IFrameLiteTemplate
  function getFrameDefinition() returns FrameLiteDefinition
  function setFrameDefinition(FrameLiteDefinition definition)
  function getItemFrameFactory() returns IFrameLiteFactory
  function setItemFrameFactory(IFrameLiteFactory factory)
  function createFrame() returns FrameLite

// ============================================================================
public class FrameLiteDefinition
  private string m_name = null
  private string m_typeName = null
  private framehandle m_owner = null
  private int m_priority = -1
  private string m_inherits = null
  private int m_createContext = -1

  // --------------------------------------------------------------------------
  construct (string name)
    m_name = name

  // --------------------------------------------------------------------------
  construct (string name, framehandle owner, int priority, int createContext)
    m_name = name
    m_owner = owner
    m_priority = priority
    m_createContext = createContext

  // --------------------------------------------------------------------------
  construct (string typeName, string name, framehandle owner, string inherits, int createContext)
    m_typeName = typeName
    m_name = name
    m_owner = owner
    m_inherits = inherits
    m_createContext = createContext

  // --------------------------------------------------------------------------
  function buildFrame() returns framehandle
    if (m_typeName != null)
      return createFrame(m_typeName, m_name, m_owner, m_inherits, m_createContext)
    if (m_owner != null)
      return createFrame(m_name, m_owner, m_priority, m_createContext)
    return createFrame(m_name)

// ============================================================================
public class FrameLiteTemplate implements IFrameLiteTemplate
  private FrameLiteDefinition m_frameDef
  private IFrameLiteFactory m_frameFactory
  private Action1<FrameLite> m_initializer

  // --------------------------------------------------------------------------
  override function getFrameDefinition() returns FrameLiteDefinition
    return m_frameDef
  
  // --------------------------------------------------------------------------
  override function setFrameDefinition(FrameLiteDefinition value)
    m_frameDef = value

  // --------------------------------------------------------------------------
  override function getItemFrameFactory() returns IFrameLiteFactory
    return m_frameFactory
  
  // --------------------------------------------------------------------------
  override function setItemFrameFactory(IFrameLiteFactory value)
    m_frameFactory = value

  // --------------------------------------------------------------------------
  function getInitializer() returns Action1<FrameLite>
    return m_initializer
  
  // --------------------------------------------------------------------------
  function setInitializer(Action1<FrameLite> value)
    m_initializer = value

  // --------------------------------------------------------------------------
  override function createFrame() returns FrameLite
    if (m_frameDef == null or m_frameFactory == null)
      return null
    let frame = m_frameFactory.createFrame(m_frameDef.buildFrame())
    if (m_initializer != null)
      m_initializer.call(frame)
    return frame

// ============================================================================
public enum HorizontalLayoutMode
  LEFT
  CENTER
  RIGHT
  STRETCH
  
// ============================================================================
public function HorizontalLayoutMode.toString() returns string
  switch (this)
    case LEFT
      return "LEFT"
    case RIGHT
      return "RIGHT"
    case CENTER
      return "CENTER"
    case STRETCH
      return "STRETCH"

// ============================================================================
public enum VerticalLayoutMode
  BOTTOM
  CENTER
  TOP
  STRETCH

// ============================================================================
public function VerticalLayoutMode.toString() returns string
  switch (this)
    case BOTTOM
      return "BOTTOM"
    case TOP
      return "TOP"
    case CENTER
      return "CENTER"
    case STRETCH
      return "STRETCH"

// ============================================================================
class Thickness
  thickness value = ZEROTHICK
  construct(thickness initialValue)
    value = initialValue

// ============================================================================
public interface ILightweightProperty
  function hasValue(FrameLite context) returns bool
  function clearValue(FrameLite context)

// ============================================================================
public class LightweightProperty<T> implements ILightweightProperty
  private HashMap<FrameLite, T> m_effectiveValues
  private Action1<FrameLite> m_propertyChanged
  private T m_defaultValue

  // --------------------------------------------------------------------------
  construct(T defaultValue, Action1<FrameLite> propertyChanged)
    m_defaultValue = defaultValue
    m_propertyChanged = propertyChanged
    g_allLightweightProperties.add(this)

  // --------------------------------------------------------------------------
  override function hasValue(FrameLite context) returns bool
    return m_effectiveValues != null and m_effectiveValues.has(context)

  // --------------------------------------------------------------------------
  function getValue(FrameLite context) returns T
    if (m_effectiveValues == null)
      return m_defaultValue
    return m_effectiveValues.get(context)

  // --------------------------------------------------------------------------
  function setValue(FrameLite context, T value)
    if (m_effectiveValues == null)
      m_effectiveValues = new HashMap<FrameLite, T>()
    if (m_effectiveValues.has(context) == false or
        m_effectiveValues.get(context) != value)
      m_effectiveValues.put(context, value)
      raisePropertyChanged(context)
  
  // --------------------------------------------------------------------------
  override function clearValue(FrameLite context)
    if (m_effectiveValues != null)
      m_effectiveValues.remove(context)
      if (m_effectiveValues.size() == 0)
        destroy m_effectiveValues
        m_effectiveValues = null

  // --------------------------------------------------------------------------
  protected function raisePropertyChanged(FrameLite context)
    if (m_propertyChanged != null)
      m_propertyChanged.call(context)