package Math

rect g_WorldBounds
constant real BOUNDARY_OFFSET = 512.0
public constant int UNLIMITED = INT_MAX
public constant real EPSILON = 0.00001

// ============================================================================
public function real.assertApproximatelyEquals(real expected)
  if (RAbsBJ(this - expected) > EPSILON)
    testFail("Expected <" + expected.toString() + ">, Actual <" + this.toString() + ">")

// ============================================================================
public function clamp(int value, int min, int max) returns int
  return IMaxBJ(IMinBJ(value, max), min)

// ============================================================================
public function clamp(real value, real min, real max) returns real
  return RMaxBJ(RMinBJ(value, max), min)

// ============================================================================
public function clamp01(real value) returns real
  return RMaxBJ(RMinBJ(value, 1.0), 0.0)

// ============================================================================
public function clamp(vec2 v, vec2 min, vec2 max) returns vec2
  return vec2(clamp(v.x, min.x, max.x), clamp(v.y, min.y, max.y))

// ============================================================================
public function clampToWorldBounds(vec2 pos, real radius) returns vec2
  let x = clamp(
    pos.x,
    g_WorldBounds.getMinX() + radius + BOUNDARY_OFFSET,
    (g_WorldBounds.getMaxX() - radius) - BOUNDARY_OFFSET)
  let y = clamp(
    pos.y,
    g_WorldBounds.getMinY() + radius + BOUNDARY_OFFSET,
    (g_WorldBounds.getMaxY() - radius) - BOUNDARY_OFFSET)
  return vec2(x, y)

// ============================================================================
/** Min and max are inclusive */
public function wrap(int value, int min, int max) returns int
  if (min >= max)
    return min
  let d = max - min
  var result = value
  if (result < min)
    result = (max + 1) - ModuloInteger(IAbsBJ(min - result), d + 1)
  if (result > max)
    result = min + ModuloInteger(IAbsBJ((max + 1) - result), d + 1)
  return result

// ============================================================================
public function wrapMaxEx(int value, int min, int max) returns int
  return wrap(value, min, max - 1)

// ============================================================================
public function passesChanceCheck01(real chance01) returns bool
  return passesChanceCheck(chance01, GetRandomReal(0, 1))

// ============================================================================
public function passesChanceCheck(real chance, real value) returns bool
  return value < chance

// ============================================================================
public function moveTowards(real current, real target, real maxSpeed) returns real
  let dist = target - current
  if (RAbsBJ(dist) < RAbsBJ(maxSpeed))
    return target
  return current + RAbsBJ(maxSpeed) * RSignBJ(dist)

// ============================================================================
public function lerp(real start, real _end, real t) returns real
  return start + (_end - start) * t

// ============================================================================
public function lerpInt(int start, int _end, real t) returns int
  return start + R2I(I2R(_end - start) * t)

// ============================================================================
public function parameterize(real start, real _end, real value) returns real
  let diff = _end - start
  return diff == 0.0 ? 0.0 : (value - start) / diff

// ============================================================================
public function parameterize01(real start, real _end, real value) returns real
  return clamp01(parameterize(start, _end, value))

// ============================================================================
public function parameterize(int start, int _end, int value) returns real
  return parameterize(I2R(start), I2R(_end), I2R(value))

// ============================================================================
public function parameterize01(int start, int _end, int value) returns real
  return clamp01(parameterize(start, _end, value))

// ============================================================================
public function parameterize(vec2 start, vec2 _end, vec2 value) returns real
  let v = _end - start
  if (v == ZERO2)
    return 0.0
  let v2 = value - start
  if (v2 == ZERO2)
    return 0.0
  let p = v2.project(v)
  return parameterize(0.0, v.length(), p.length() * v.dot(p).sign())

// ============================================================================
public function parameterize01(vec2 start, vec2 _end, vec2 value) returns real
  return clamp01(parameterize(start, _end, value))

// ============================================================================
public function vec2.angleBetween(vec2 other) returns real
  let thisLen = this.length()
  if (thisLen == 0.0)
    return 0.0
  let otherLen = other.length()
  if (otherLen == 0.0)
    return 0.0
  return Acos(this.dot(other) / (thisLen * otherLen))

// ============================================================================
public function vec3.angleBetween(vec3 other) returns real
  let thisLen = this.length()
  if (thisLen == 0.0)
    return 0.0
  let otherLen = other.length()
  if (otherLen == 0.0)
    return 0.0
  return Acos(this.dot(other) / (thisLen * otherLen))

// ============================================================================
public function lerp(vec2 start, vec2 _end, real t) returns vec2
  return vec2(lerp(start.x, _end.x, t), lerp(start.y, _end.y, t))

// ============================================================================
public function lerp(vec3 start, vec3 _end, real t) returns vec3
  return vec3(lerp(start.x, _end.x, t), lerp(start.y, _end.y, t), lerp(start.z, _end.z, t))

// ============================================================================
public function vec3.normalized() returns vec3
  let l = this.length()
  if (l == 0.0)
    return vec3(0,0,0)
  return vec3(this.x / l, this.y / l, this.z / l)

// ============================================================================
public function real.toDegrees() returns real
  return this * bj_RADTODEG

// ============================================================================
public function real.toRadians() returns real
  return this * bj_DEGTORAD

// ============================================================================
public function real.fuzzyEquals(real other) returns bool
  return (this - other).abs() < EPSILON

// ============================================================================
/** Uses an approximation of the hill equation that starts at 0.0 and approaches 1.0
    0 <= x <= 1
    0 <= y <= 1
    https://en.wikipedia.org/wiki/Hill_equation_(biochemistry)
*/
public function hill01(real x, real y) returns real
  return x / (x + y)

// ============================================================================
/** Taken from Unity */
tuple smoothDampResult(real value, real vel)
public function smoothDamp(real current, real target, real currentVelocity, real smoothTime, real maxSpeed, real deltaTime) returns smoothDampResult
  var targetMutable = target
  var vel = currentVelocity
  let smoothTimeClamped = max(0.0001, smoothTime)
  let deltaTimeClamped = max(0.0001, deltaTime)
  let num = 2.0 / smoothTimeClamped
  let num2 = num * deltaTimeClamped
  let num3 = 1.0 / (1 + num2 + 0.48 * num2 * num2 + 0.235 * num2 * num2 * num2)
  var num4 = current - targetMutable
  let num5 = targetMutable
  let num6 = maxSpeed * smoothTimeClamped
  num4 = clamp(num4, -num6, num6)
  targetMutable = current - num4
  let num7 = (vel + num * num4) * deltaTimeClamped
  vel = (vel - num * num7) * num3
  var num8 = targetMutable + (num4 + num7) * num3
  if (num5 - current > 0.0 == num8 > num5)
    num8 = num5
    vel = (num8 - num5) / deltaTimeClamped
  return smoothDampResult(num8, vel)

// ============================================================================
/** Taken from Unity */
tuple smoothDampResultVec2(vec2 value, vec2 vel)
public function smoothDamp(vec2 current, vec2 target, vec2 currentVelocity, real smoothTime, real maxSpeed, real deltaTime) returns smoothDampResultVec2
  let resultX = smoothDamp(current.x, target.x, currentVelocity.x, smoothTime, maxSpeed, deltaTime)
  let resultY = smoothDamp(current.y, target.y, currentVelocity.y, smoothTime, maxSpeed, deltaTime)
  return smoothDampResultVec2(vec2(resultX.value, resultY.value), vec2(resultX.vel, resultY.vel))

// ============================================================================
init
  g_WorldBounds = GetPlayableMapRect()

// ============================================================================
@test public function wrap1()
  assertTrue(wrap(-5, 0, 3) == 3)
  assertTrue(wrap(-4, 0, 3) == 0)
  assertTrue(wrap(-3, 0, 3) == 1)
  assertTrue(wrap(-2, 0, 3) == 2)
  assertTrue(wrap(-1, 0, 3) == 3)
  assertTrue(wrap( 0, 0, 3) == 0)
  assertTrue(wrap( 1, 0, 3) == 1)
  assertTrue(wrap( 2, 0, 3) == 2)
  assertTrue(wrap( 3, 0, 3) == 3)
  assertTrue(wrap( 4, 0, 3) == 0)
  assertTrue(wrap( 5, 0, 3) == 1)
  assertTrue(wrap( 6, 0, 3) == 2)
  assertTrue(wrap( 7, 0, 3) == 3)

// ============================================================================
@test public function wrap2()
  assertTrue(wrap(-5, 2, 5) == 3)
  assertTrue(wrap(-4, 2, 5) == 4)
  assertTrue(wrap(-3, 2, 5) == 5)
  assertTrue(wrap(-2, 2, 5) == 2)
  assertTrue(wrap(-1, 2, 5) == 3)
  assertTrue(wrap( 0, 2, 5) == 4)
  assertTrue(wrap( 1, 2, 5) == 5)
  assertTrue(wrap( 2, 2, 5) == 2)
  assertTrue(wrap( 3, 2, 5) == 3)
  assertTrue(wrap( 4, 2, 5) == 4)
  assertTrue(wrap( 5, 2, 5) == 5)
  assertTrue(wrap( 6, 2, 5) == 2)
  assertTrue(wrap( 7, 2, 5) == 3)

// ============================================================================
@test public function wrap3()
  assertTrue(wrap(-180, 0, 359) == 180)
  assertTrue(wrap( -90, 0, 359) == 270)
  assertTrue(wrap(   0, 0, 359) == 0)
  assertTrue(wrap(  90, 0, 359) == 90)
  assertTrue(wrap( 180, 0, 359) == 180)
  assertTrue(wrap( 270, 0, 359) == 270)

// ============================================================================
@test public function wrapMaxEx()
  assertTrue(wrapMaxEx(-180, 0, 360) == 180)
  assertTrue(wrapMaxEx( -90, 0, 360) == 270)
  assertTrue(wrapMaxEx(   0, 0, 360) == 0)
  assertTrue(wrapMaxEx(  90, 0, 360) == 90)
  assertTrue(wrapMaxEx( 180, 0, 360) == 180)
  assertTrue(wrapMaxEx( 270, 0, 360) == 270)

// ============================================================================
@test public function wrapMaxEx2()
  assertTrue(wrapMaxEx( -45, 0, 360) == 315)
  assertTrue(wrapMaxEx(   0, 0, 360) == 0)
  assertTrue(wrapMaxEx( 360, 0, 360) == 0)
  assertTrue(wrapMaxEx( 405, 0, 360) == 45)

// ============================================================================
@test public function wrap_min_equals_max()
  assertTrue(wrap(-5, 0, 0) == 0)

// ============================================================================
@test public function angleBetween()
  vec2(1, 0).angleBetween(vec2(0, 1)).assertApproximatelyEquals(bj_DEGTORAD * 90.0)
  vec2(0, 1).angleBetween(vec2(-1, 0)).assertApproximatelyEquals(bj_DEGTORAD * 90.0)
  vec2(-1, 0).angleBetween(vec2(0, -1)).assertApproximatelyEquals(bj_DEGTORAD * 90.0)
  vec2(0, -1).angleBetween(vec2(1, 0)).assertApproximatelyEquals(bj_DEGTORAD * 90.0)
  vec2(1, 0).angleBetween(vec2(1, 1)).assertApproximatelyEquals(bj_DEGTORAD * 45.0)
  vec2(1, 0).angleBetween(vec2(1, -1)).assertApproximatelyEquals(bj_DEGTORAD * 45.0)