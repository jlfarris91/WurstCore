package FixedArray
import ErrorIf
import ICollection
import CollectionEnumerator
import ErrorHandling

// ============================================================================
public class FixedArray8<T> implements ICollection<T>
  private T array[8] m_items

  // --------------------------------------------------------------------------
  @inline override function getCount() returns int
    return 8

  // --------------------------------------------------------------------------
  override function get(int index) returns T
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    return m_items[index]

  // --------------------------------------------------------------------------
  override function set(int index, T elem)
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    m_items[index] = elem

  // --------------------------------------------------------------------------
  function iterator() returns CollectionEnumerator<T>
    return new CollectionEnumerator<T>(this)

// ============================================================================
public class FixedArray16<T> implements ICollection<T>
  private T array[16] m_items

  // --------------------------------------------------------------------------
  @inline override function getCount() returns int
    return 16

  // --------------------------------------------------------------------------
  override function get(int index) returns T
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    return m_items[index]

  // --------------------------------------------------------------------------
  override function set(int index, T elem)
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    m_items[index] = elem

  // --------------------------------------------------------------------------
  function iterator() returns CollectionEnumerator<T>
    return new CollectionEnumerator<T>(this)

// ============================================================================
public class FixedArray32<T> implements ICollection<T>
  private T array[32] m_items

  // --------------------------------------------------------------------------
  @inline override function getCount() returns int
    return 32

  // --------------------------------------------------------------------------
  override function get(int index) returns T
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    return m_items[index]

  // --------------------------------------------------------------------------
  override function set(int index, T elem)
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    m_items[index] = elem

  // --------------------------------------------------------------------------
  function iterator() returns CollectionEnumerator<T>
    return new CollectionEnumerator<T>(this)

// ============================================================================
public class FixedArray64<T> implements ICollection<T>
  private T array[64] m_items

  // --------------------------------------------------------------------------
  @inline override function getCount() returns int
    return 64

  // --------------------------------------------------------------------------
  override function get(int index) returns T
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    return m_items[index]

  // --------------------------------------------------------------------------
  override function set(int index, T elem)
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    m_items[index] = elem

  // --------------------------------------------------------------------------
  function iterator() returns CollectionEnumerator<T>
    return new CollectionEnumerator<T>(this)

// ============================================================================
public class FixedArray128<T> implements ICollection<T>
  private T array[128] m_items

  // --------------------------------------------------------------------------
  @inline override function getCount() returns int
    return 128

  // --------------------------------------------------------------------------
  override function get(int index) returns T
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    return m_items[index]

  // --------------------------------------------------------------------------
  override function set(int index, T elem)
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    m_items[index] = elem

  // --------------------------------------------------------------------------
  function iterator() returns CollectionEnumerator<T>
    return new CollectionEnumerator<T>(this)

// ============================================================================
public class FixedArray256<T> implements ICollection<T>
  private T array[256] m_items

  // --------------------------------------------------------------------------
  @inline override function getCount() returns int
    return 256

  // --------------------------------------------------------------------------
  override function get(int index) returns T
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    return m_items[index]

  // --------------------------------------------------------------------------
  override function set(int index, T elem)
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    m_items[index] = elem

  // --------------------------------------------------------------------------
  function iterator() returns CollectionEnumerator<T>
    return new CollectionEnumerator<T>(this)

// ============================================================================
public class FixedArray512<T> implements ICollection<T>
  private T array[512] m_items

  // --------------------------------------------------------------------------
  @inline override function getCount() returns int
    return 512

  // --------------------------------------------------------------------------
  override function get(int index) returns T
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    return m_items[index]

  // --------------------------------------------------------------------------
  override function set(int index, T elem)
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    m_items[index] = elem

  // --------------------------------------------------------------------------
  function iterator() returns CollectionEnumerator<T>
    return new CollectionEnumerator<T>(this)

// ============================================================================
public class FixedArray1024<T> implements ICollection<T>
  private T array[1024] m_items

  // --------------------------------------------------------------------------
  @inline override function getCount() returns int
    return 1024

  // --------------------------------------------------------------------------
  override function get(int index) returns T
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    return m_items[index]

  // --------------------------------------------------------------------------
  override function set(int index, T elem)
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    m_items[index] = elem

  // --------------------------------------------------------------------------
  function iterator() returns CollectionEnumerator<T>
    return new CollectionEnumerator<T>(this)

// ============================================================================
public class FixedArray2048<T> implements ICollection<T>
  private T array[2048] m_items

  // --------------------------------------------------------------------------
  @inline override function getCount() returns int
    return 2048

  // --------------------------------------------------------------------------
  override function get(int index) returns T
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    return m_items[index]

  // --------------------------------------------------------------------------
  override function set(int index, T elem)
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    m_items[index] = elem

  // --------------------------------------------------------------------------
  function iterator() returns CollectionEnumerator<T>
    return new CollectionEnumerator<T>(this)

// ============================================================================
public class FixedArray4096<T> implements ICollection<T>
  private T array[4096] m_items

  // --------------------------------------------------------------------------
  @inline override function getCount() returns int
    return 4096

  // --------------------------------------------------------------------------
  override function get(int index) returns T
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    return m_items[index]

  // --------------------------------------------------------------------------
  override function set(int index, T elem)
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    m_items[index] = elem

  // --------------------------------------------------------------------------
  function iterator() returns CollectionEnumerator<T>
    return new CollectionEnumerator<T>(this)

// ============================================================================
public class FixedArray8192<T> implements ICollection<T>
  private T array[8192] m_items

  // --------------------------------------------------------------------------
  @inline override function getCount() returns int
    return 8192

  // --------------------------------------------------------------------------
  override function get(int index) returns T
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    return m_items[index]

  // --------------------------------------------------------------------------
  override function set(int index, T elem)
    ErrorIf.argumentIsOutOfBounds(index, 0, getCount() - 1, "index")
    m_items[index] = elem

  // --------------------------------------------------------------------------
  function iterator() returns CollectionEnumerator<T>
    return new CollectionEnumerator<T>(this)

// ============================================================================
public class FixedArray

  static constant int MIN_SIZE = 8
  static constant int MAX_SIZE = 8192

  // --------------------------------------------------------------------------
  static function createBestFit<T>(int capacity) returns ICollection<T>
    let bestFitCapacity = getBestFitCapacity(capacity)
    return create<T>(bestFitCapacity)

  // --------------------------------------------------------------------------
  static function create<T>(int exactCapacity) returns ICollection<T>
    switch (exactCapacity)
      case 8
        return new FixedArray8<T>()
      case 16
        return new FixedArray16<T>()
      case 32
        return new FixedArray32<T>()
      case 64
        return new FixedArray64<T>()
      case 128
        return new FixedArray128<T>()
      case 256
        return new FixedArray256<T>()
      case 512
        return new FixedArray512<T>()
      case 1024
        return new FixedArray1024<T>()
      case 2048
        return new FixedArray2048<T>()
      case 4096
        return new FixedArray4096<T>()
      case 8192
        return new FixedArray8192<T>()
      default
        error("Cannot create Vector for exact capacity value " + exactCapacity.toString())
        return null

  // --------------------------------------------------------------------------
  static function getBestFitCapacity(int count) returns int
    ErrorIf.argumentIsOutOfBounds(count, 0, MAX_SIZE, "count")

    if (count <= MIN_SIZE)
      return MIN_SIZE

    var capacity = MIN_SIZE
    while (count > capacity)
      capacity *= 2

    return capacity

  // --------------------------------------------------------------------------
  static function copyTo<T>(ICollection<T> source, ICollection<T> dest, int index)
    ErrorIf.argumentIsNull(source, "source")
    ErrorIf.argumentIsNull(dest, "dest")
    
    let destCount = dest.getCount()
    ErrorIf.argumentIsOutOfBounds(index, 0, destCount - 1, "index")

    let sourceCount = source.getCount()
    if (destCount - index < sourceCount)
      error("Collection 'other' does not have enough space to copy into. (index: " + index.toString() + " length: " + sourceCount.toString() + " other.length: " + destCount.toString() + ")")
    
    for i = 0 to sourceCount - 1
      dest.set(index + i, source.get(i))

// ============================================================================
@test function createBestFit()
  let fixedArray = FixedArray.createBestFit<int>(20)
  fixedArray.getCount().assertEquals(32)
  destroy fixedArray

// ============================================================================
@test function createBestFit_less_than_min()
  let fixedArray = FixedArray.createBestFit<int>(1)
  fixedArray.getCount().assertEquals(FixedArray.MIN_SIZE)
  destroy fixedArray

// ============================================================================
@test function create()
  let fixedArray = FixedArray.create<int>(256)
  fixedArray.getCount().assertEquals(256)
  destroy fixedArray

// ============================================================================
@test function create_min()
  let fixedArray = FixedArray.create<int>(FixedArray.MIN_SIZE)
  fixedArray.getCount().assertEquals(FixedArray.MIN_SIZE)
  destroy fixedArray

// ============================================================================
@test function create_max()
  let fixedArray = FixedArray.create<int>(FixedArray.MAX_SIZE)
  fixedArray.getCount().assertEquals(FixedArray.MAX_SIZE)
  destroy fixedArray

// ============================================================================
@test function getBestFitCapacity()
  FixedArray.getBestFitCapacity(1).assertEquals(FixedArray.MIN_SIZE)
  
  FixedArray.getBestFitCapacity(10).assertEquals(16)
  FixedArray.getBestFitCapacity(16).assertEquals(16)
  
  FixedArray.getBestFitCapacity(20).assertEquals(32)
  FixedArray.getBestFitCapacity(32).assertEquals(32)

  FixedArray.getBestFitCapacity(40).assertEquals(64)
  FixedArray.getBestFitCapacity(64).assertEquals(64)

  FixedArray.getBestFitCapacity(100).assertEquals(128)
  FixedArray.getBestFitCapacity(128).assertEquals(128)

  FixedArray.getBestFitCapacity(200).assertEquals(256)
  FixedArray.getBestFitCapacity(256).assertEquals(256)

  FixedArray.getBestFitCapacity(500).assertEquals(512)
  FixedArray.getBestFitCapacity(512).assertEquals(512)

  FixedArray.getBestFitCapacity(1000).assertEquals(1024)
  FixedArray.getBestFitCapacity(1024).assertEquals(1024)

  FixedArray.getBestFitCapacity(2000).assertEquals(2048)
  FixedArray.getBestFitCapacity(2048).assertEquals(2048)

  FixedArray.getBestFitCapacity(4000).assertEquals(4096)
  FixedArray.getBestFitCapacity(4096).assertEquals(4096)

  FixedArray.getBestFitCapacity(8000).assertEquals(8192)
  FixedArray.getBestFitCapacity(8192).assertEquals(8192)

// ============================================================================
@test function getBestFitCapacity_min()
  FixedArray.getBestFitCapacity(FixedArray.MIN_SIZE).assertEquals(FixedArray.MIN_SIZE)

// ============================================================================
@test function getBestFitCapacity_max()
  FixedArray.getBestFitCapacity(FixedArray.MAX_SIZE).assertEquals(FixedArray.MAX_SIZE)

// ============================================================================
@test function copyTo_front()
  
  let collection1 = FixedArray.create<string>(8)
  let collection2 = FixedArray.create<string>(16)

  for i = 0 to collection1.getCount() - 1
    collection1.set(i, i.toString())

  FixedArray.copyTo(collection1, collection2, 0)

  for i = 0 to collection1.getCount() - 1
    collection2.get(i).assertEquals(i.toString())

// ============================================================================
@test function copyTo_middle()
  
  let collection1 = FixedArray.create<string>(8)
  let collection2 = FixedArray.create<string>(16)

  for i = 0 to collection1.getCount() - 1
    collection1.set(i, i.toString())

  FixedArray.copyTo(collection1, collection2, 4)

  for i = 0 to collection1.getCount() - 1
    collection2.get(4 + i).assertEquals(i.toString())

// ============================================================================
@test function copyTo_end()
  
  let collection1 = FixedArray.create<string>(8)
  let collection2 = FixedArray.create<string>(16)

  for i = 0 to collection1.getCount() - 1
    collection1.set(i, i.toString())

  FixedArray.copyTo(collection1, collection2, 7)

  for i = 0 to collection1.getCount() - 1
    collection2.get(7 + i).assertEquals(i.toString())

// ============================================================================
@test function copyTo_stressTest()

  let collection1 = FixedArray.create<string>(8192)
  let collection2 = FixedArray.create<string>(8192)

  for i = 0 to collection1.getCount() - 1
    collection1.set(i, i.toString())

  FixedArray.copyTo(collection1, collection2, 0)

  for i = 0 to collection1.getCount() - 1
    collection2.get(i).assertEquals(i.toString())