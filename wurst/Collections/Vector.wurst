package Vector
import FixedArray
import ErrorHandling
import Action
import Func

constant int DEFAULT_VECTOR_CAPACITY = 8

// ============================================================================
public class Vector<T>
  private FixedArray<T> m_array
  private int m_count
  private VectorIterator<T> m_staticIterator

  // --------------------------------------------------------------------------
  construct()
    m_array = FixedArray.createArray<T>(DEFAULT_VECTOR_CAPACITY)
    m_count = 0

  // --------------------------------------------------------------------------
  construct(int capacity)
    m_array = FixedArray.createArray<T>(capacity)
    m_count = 0

  // --------------------------------------------------------------------------
  ondestroy
    if (m_array != null)
      destroy m_array
      m_array = null

    if (m_staticIterator != null)
      destroy m_staticIterator
      m_staticIterator = null

  // --------------------------------------------------------------------------
  function getCapacity() returns int
    return m_array.getCapacity()

  // --------------------------------------------------------------------------
  function getCount() returns int
    return m_count

  // --------------------------------------------------------------------------
  function getItem(int index) returns T
    if (m_array == null)
      error("Array is null")
    if (index < 0 or index >= getCount())
      error("Index out of range: " + index.toString())
    return m_array.getItem(index)

  // --------------------------------------------------------------------------
  function setItem(int i, T _item)
    m_array.setItem(i, _item)

  // --------------------------------------------------------------------------
  function contains(T _item) returns bool
    return indexOf(_item) != -1

  // --------------------------------------------------------------------------
  function add(T _item)
    m_array = FixedArray.growArray(m_array, m_count + 1)
    m_array.setItem(m_count, _item)
    m_count++

  // --------------------------------------------------------------------------
  function insert(int index, T _item)
    if (index < 0 or index > getCount())
      error("Index out of range: " + index.toString())    
    if (index == getCount())
      add(_item)
      return
    m_array = FixedArray.growArray(m_array, m_count + 1)
    var mutableIndex = m_count - 1
    while (mutableIndex > index and mutableIndex > 0)
      m_array.setItem(mutableIndex, getItem(mutableIndex - 1))
      mutableIndex--
    m_count++
    setItem(index, _item)

  // --------------------------------------------------------------------------
  function indexOf(T _item) returns int
    for i = 0 to m_count - 1
      if (getItem(i) == _item)
        return i
    return -1

  // --------------------------------------------------------------------------
  function remove(T _item) returns bool
    let index = indexOf(_item)
    if (index == -1)
      return false
    removeAt(index)
    return true

  // --------------------------------------------------------------------------
  function removeAt(int index) returns T
    if (index < 0 or index >= getCount())
      error("Index out of range: " + index.toString())
    var mutableIndex = index
    let _item = getItem(index)
    while (mutableIndex < m_count - 1)
      m_array.setItem(mutableIndex, getItem(mutableIndex + 1))
      mutableIndex++
    m_count--
    return _item

  // --------------------------------------------------------------------------
  function resize(int size)
    m_array = FixedArray.growArray(m_array, size)

  // --------------------------------------------------------------------------
  function clear()
    m_count = 0

  // --------------------------------------------------------------------------
  function clearAndNull()
    for i = 0 to m_count - 1
      m_array.setItem(i, null)
    m_count = 0

  // --------------------------------------------------------------------------
  function getFirst() returns T
    return m_count > 0 ? m_array.getItem(0) : null

  // --------------------------------------------------------------------------
  function getLast() returns T
    return m_count > 0 ? m_array.getItem(m_count - 1) : null

  // --------------------------------------------------------------------------
  function isEmpty() returns bool
    return m_count == 0

  // --------------------------------------------------------------------------
  function clone() returns Vector<T>
    let clonedVector = new Vector<T>(getCapacity())
    for i = 0 to getCount() - 1
      clonedVector.add(getItem(i))
    return clonedVector

  // --------------------------------------------------------------------------
  function staticItr() returns VectorIterator<T>
    if (m_staticIterator == null)
      m_staticIterator = new VectorIterator<T>(this, false)
    m_staticIterator.reset()
    return m_staticIterator

  // --------------------------------------------------------------------------
  function iterator() returns VectorIterator<T>
    return new VectorIterator<T>(this, true)

// ============================================================================
public function Vector<T>.forEach<T>(Action1<T> action)
  action.acquire()
  for _item in this
    action.call(_item)
  action.release()

// ============================================================================
public function Vector<T>.getRandom<T>() returns T
  if (this.isEmpty())
    return null
  return this.getItem(GetRandomInt(0, this.getCount() - 1))

// ============================================================================
public function Vector<T>.getRandomUnique<T>(int count) returns Vector<T>
  let clone = this.clone()
  let output = new Vector<T>()
  for i = 0 to count - 1
    let randomIndex = GetRandomInt(0, clone.getCount() - 1)
    output.add(clone.getItem(randomIndex))
    clone.removeAt(randomIndex)
    if (clone.isEmpty())
      break
  destroy clone
  return output

// ============================================================================
public function Vector<T>.pop<T>() returns T
  let count = this.getCount()
  if (count == 0)
    error("Cannot pop from an empty Vector")
  return this.removeAt(count - 1)

// ============================================================================
public function Vector<T>.push<T>(T _item)
  this.add(_item)

// ============================================================================
public function Vector<T>.peek<T>() returns T
  return this.getLast()

// ============================================================================
// Tries to fill a null slot in the vector or adds to the end otherwise.
public function Vector<T>.emplaceAdd<T>(T _item) returns int
  for i = 0 to this.getCount() - 1
    if (this.getItem(i) == null)
      this.setItem(i, _item)
      return i
  this.add(_item)
  return this.getCount() - 1

// ============================================================================
// Removes an item from the vector by nulling it out. Does not affect the count.
public function Vector<T>.emplaceRemove<T>(T _item) returns bool
  let index = this.indexOf(_item)
  if (index == -1)
    return false
  this.setItem(index, null)
  return true

// ============================================================================
public function Vector<T>.copyTo<T>(Vector<T> other)
  other.resize(this.getCapacity())
  let thisCount = this.getCount()
  let otherCount = other.getCount()
  for i = 0 to max(thisCount - 1, otherCount - 1)
    if (i >= thisCount)
      break
    if (i < otherCount)
      other.setItem(i, this.getItem(i))
    else
      other.add(this.getItem(i))

// ============================================================================
public function Vector<T>.take<T>(int count) returns Vector<T>
  if (count == 0)
    error("Argument 'count' must be greater than 0")
  let newList = new Vector<T>()
  let iterator = this.staticItr()
  for i = 0 to count - 1
    if (iterator.hasNext())
      newList.add(iterator.next())
  return newList

// ============================================================================
/** Joins elements from a string list into one string using a separator */
public function Vector<string>.joinBy(string separator) returns string
  var joined = ""
  var first = true
  let iter = this.iterator()

  for str from iter
    if iter.hasNext() or not first
      joined += str + separator
    else
      joined += str
      first = false

  iter.close()
  return joined

// ============================================================================
public function Vector<T>.swap<T>(int indexA, int indexB)
  if (indexA >= 0 and indexA < this.getCount() and indexB >= 0 and indexB < this.getCount())
    let temp = this.getItem(indexA)
    this.setItem(indexA, this.getItem(indexB))
    this.setItem(indexB, temp)

// ============================================================================
function Vector<T>.quickSortPartition<T>(int low, int high, Func2<T, T, bool> comparator) returns int
  comparator.acquire()
  let pivot = this.getItem(high)
  let count = this.getCount()
  var i = low - 1
  var j = low
  while (j <= high - 1)
    if (j >= 0 and j < count and comparator.call(this.getItem(j), pivot))
      i++
      this.swap(i, j)
    j++
  this.swap(i + 1,high)
  comparator.release()
  return i + 1

// ============================================================================
function Vector<T>.quickSort<T>(int left, int right, Func2<T, T, bool> comparator)
  if (left < right)
    comparator.acquire()
    let partition = this.quickSortPartition(left, right, comparator)
    this.quickSort(left, partition-1, comparator)
    this.quickSort(partition+1, right, comparator)
    comparator.release()

// ============================================================================
public function Vector<T>.sort<T>(Func2<T, T, bool> comparator)
  this.quickSort(0, this.getCount() - 1, comparator)

// ============================================================================
public class VectorIterator<T>
  private Vector<T> m_vector
  private int m_count = 0
  private int m_index = -1
  private bool m_destroyOnClose

  // --------------------------------------------------------------------------
  construct(Vector<T> vector, bool destroyOnClose)
    m_vector = vector
    m_count = m_vector.getCount()
    m_destroyOnClose = destroyOnClose

  // --------------------------------------------------------------------------
  function reset()
    m_count = m_vector.getCount()
    m_index = -1

  // --------------------------------------------------------------------------
  function modify(T value)
    if (m_index != -1)
      m_vector.setItem(m_index, value)

  // --------------------------------------------------------------------------
  function hasNext() returns bool
    return m_index + 1 < m_count

  // --------------------------------------------------------------------------
  function next() returns T
    m_index++
    return m_vector.getItem(m_index)

  // --------------------------------------------------------------------------
  function lookahead() returns T
    T nextItem = null
    if (hasNext())
      nextItem = m_vector.getItem(m_index + 1)
    return nextItem

  // --------------------------------------------------------------------------
  function close()
    if (m_destroyOnClose)
      destroy this

// ============================================================================
@test
function testCreate()
  new Vector<int>(8).getCapacity().assertEquals(8)
  new Vector<int>(9).getCapacity().assertEquals(16)
  new Vector<int>(16).getCapacity().assertEquals(16)
  new Vector<int>(17).getCapacity().assertEquals(32)
  new Vector<int>(32).getCapacity().assertEquals(32)
  new Vector<int>(33).getCapacity().assertEquals(64)
  new Vector<int>(64).getCapacity().assertEquals(64)
  new Vector<int>(65).getCapacity().assertEquals(128)
  new Vector<int>(128).getCapacity().assertEquals(128)
  new Vector<int>(129).getCapacity().assertEquals(256)
  new Vector<int>(256).getCapacity().assertEquals(256)
  new Vector<int>(257).getCapacity().assertEquals(512)
  new Vector<int>(512).getCapacity().assertEquals(512)
  new Vector<int>(513).getCapacity().assertEquals(1024)
  new Vector<int>(1024).getCapacity().assertEquals(1024)
  new Vector<int>(1025).getCapacity().assertEquals(2048)
  new Vector<int>(2048).getCapacity().assertEquals(2048)
  new Vector<int>(2049).getCapacity().assertEquals(4096)
  new Vector<int>(4096).getCapacity().assertEquals(4096)
  new Vector<int>(4097).getCapacity().assertEquals(8192)
  new Vector<int>(8192).getCapacity().assertEquals(8192)

// ============================================================================
@test
function testAdd()
  let vector = new Vector<int>(8)
  vector.add(1)
  vector.getCapacity().assertEquals(8)
  vector.getCount().assertEquals(1)

// ============================================================================
@test
function testAdd_Grows()
  let vector = new Vector<int>(8)
  
  // fill to capacity
  for i = 0 to vector.getCapacity() - 1
    vector.add(i)

  vector.getCapacity().assertEquals(8)
  vector.getCount().assertEquals(8)

  // add one more to make it grow
  vector.add(8)

  vector.getCapacity().assertEquals(16)
  vector.getCount().assertEquals(9)

  let count = vector.getCount()
  for i = 0 to count - 1
    vector.getItem(i).assertEquals(i)

// ============================================================================
@test
function testRemoveFirst()
  let vector = new Vector<int>(8)
  
  // fill to capacity
  for i = 0 to vector.getCapacity() - 1
    vector.add(i)

  vector.getCapacity().assertEquals(8)
  vector.getCount().assertEquals(8)

  // remove a single entry
  vector.remove(0)

  vector.getCapacity().assertEquals(8)
  vector.getCount().assertEquals(7)

  let count = vector.getCount()
  for i = 0 to count - 1
    vector.getItem(i).assertEquals(i + 1)

// ============================================================================
@test
function testRemoveLast()
  let vector = new Vector<int>(8)
  
  // fill to capacity
  for i = 0 to vector.getCapacity() - 1
    vector.add(i)

  vector.getCapacity().assertEquals(8)
  vector.getCount().assertEquals(8)

  // remove a single entry
  vector.remove(7)

  vector.getCapacity().assertEquals(8)
  vector.getCount().assertEquals(7)

  let count = vector.getCount()
  for i = 0 to count - 1
    vector.getItem(i).assertEquals(i)

// ============================================================================
@test
function testRemoveAt_First()
  let vector = new Vector<int>(8)

  vector.add(1)
  vector.add(2)
  vector.add(3)
  vector.add(4)
  vector.add(5)
  vector.add(6)
  vector.add(7)
  vector.add(8)

  vector.getCapacity().assertEquals(8)
  vector.getCount().assertEquals(8)

  // act
  let _item = vector.removeAt(0)

  _item.assertEquals(1)
  vector.getCapacity().assertEquals(8)
  vector.getCount().assertEquals(7)
  vector.getItem(0).assertEquals(2)
  vector.getItem(1).assertEquals(3)
  vector.getItem(2).assertEquals(4)
  vector.getItem(3).assertEquals(5)
  vector.getItem(4).assertEquals(6)
  vector.getItem(5).assertEquals(7)
  vector.getItem(6).assertEquals(8)

// ============================================================================
@test
function testRemoveAt_Middle()
  let vector = new Vector<int>(8)
  
  // fill to capacity
  vector.add(1)
  vector.add(2)
  vector.add(3)
  vector.add(4)
  vector.add(5)
  vector.add(6)
  vector.add(7)
  vector.add(8)

  // act
  let _item = vector.removeAt(3)

  // assert
  _item.assertEquals(4)
  vector.getCapacity().assertEquals(8)
  vector.getCount().assertEquals(7)
  vector.getItem(0).assertEquals(1)
  vector.getItem(1).assertEquals(2)
  vector.getItem(2).assertEquals(3)
  vector.getItem(3).assertEquals(5)
  vector.getItem(4).assertEquals(6)
  vector.getItem(5).assertEquals(7)
  vector.getItem(6).assertEquals(8)

// ============================================================================
@test
function testRemoveAt_Last()
  let vector = new Vector<int>(8)
  
  // fill to capacity
  vector.add(1)
  vector.add(2)
  vector.add(3)
  vector.add(4)
  vector.add(5)
  vector.add(6)
  vector.add(7)
  vector.add(8)

  // act
  let _item = vector.removeAt(7)

  // assert
  _item.assertEquals(8)
  vector.getCapacity().assertEquals(8)
  vector.getCount().assertEquals(7)
  vector.getItem(0).assertEquals(1)
  vector.getItem(1).assertEquals(2)
  vector.getItem(2).assertEquals(3)
  vector.getItem(3).assertEquals(4)
  vector.getItem(4).assertEquals(5)
  vector.getItem(5).assertEquals(6)
  vector.getItem(6).assertEquals(7)

// ============================================================================
@test
function testRemoveAt_Last_Empty()
  let vector = new Vector<int>(8)
  vector.add(1)

  // remove a single entry
  vector.removeAt(0)

  vector.getCapacity().assertEquals(8)
  vector.getCount().assertEquals(0)

// ============================================================================
@test
function testGrow_Strings()
  let vector = new Vector<string>(8)
  
  // fill to capacity
  for i = 0 to 31
    vector.add(i.toString())

  vector.getCapacity().assertEquals(32)
  vector.getCount().assertEquals(32)

  let count = vector.getCount()
  for i = 0 to count - 1
    vector.getItem(i).assertEquals(i.toString())

class PlayerVector extends Vector<player>

// ============================================================================
@test
function test_iterator()
  let vector = new PlayerVector()
  
  // fill to capacity
  for i = 0 to 23
    vector.add(Player(i))

  var index = 0
  for _item in vector
    let p = Player(index)
    _item.getHandleId().assertEquals(p.getHandleId())
    index++

// ============================================================================
@test
function test_iterator2()
  let vector = new Vector<int>(8)
  
  vector.add(123)

  for _item in vector
    _item.assertEquals(123)

// ============================================================================
@test
function testPop()
  let vector = new Vector<int>(8)
  
  vector.add(123)

  // act
  let _item = vector.pop()

  // assert
  _item.assertEquals(123)
  vector.getCount().assertEquals(0)

// ============================================================================
@test
function testClone()
  let vector = new Vector<int>(8)
  
  for i = 0 to 7
    vector.add(i + 1)

  // act
  let clone = vector.clone()

  // assert
  clone.getCount().assertEquals(8)
  for i = 0 to 7
    clone.getItem(i).assertEquals(i + 1)

// ============================================================================
@test
function testSort()
  let vector = new Vector<int>(8)
  
  vector.add(1)
  vector.add(4)
  vector.add(3)
  vector.add(8)
  vector.add(5)
  vector.add(2)
  vector.add(7)
  vector.add(6)

  // act
  vector.sort() (a, b) ->
    return a < b

  // assert
  vector.getItem(0).assertEquals(1)
  vector.getItem(1).assertEquals(2)
  vector.getItem(2).assertEquals(3)
  vector.getItem(3).assertEquals(4)
  vector.getItem(4).assertEquals(5)
  vector.getItem(5).assertEquals(6)
  vector.getItem(6).assertEquals(7)
  vector.getItem(7).assertEquals(8)