package Vector
import FixedArray
import ErrorHandling
import Action
import Func
import Execute
import ICollection

constant int DEFAULT_VECTOR_CAPACITY = 8

// ============================================================================
public class Vector<T> extends ICollection<T>
  private FixedArray<T> m_array
  private int m_count
  private VectorIterator<T> m_staticIterator

  // --------------------------------------------------------------------------
  construct()
    m_array = FixedArray.createArray<T>(DEFAULT_VECTOR_CAPACITY)
    m_count = 0

  // --------------------------------------------------------------------------
  construct(int capacity)
    m_array = FixedArray.createArray<T>(capacity)
    m_count = 0

  // --------------------------------------------------------------------------
  ondestroy
    if (m_array != null)
      destroy m_array
      m_array = null

    if (m_staticIterator != null)
      destroy m_staticIterator
      m_staticIterator = null

  // --------------------------------------------------------------------------
  function capacity() returns int
    return m_array.size()

  // --------------------------------------------------------------------------
  override function size() returns int
    return m_count

  // --------------------------------------------------------------------------
  function setSize(int size)
    if (size < 0)
      error("Size argument cannot be less than zero.")
    m_array = FixedArray.growArray(m_array, size)
    m_count = size

  // --------------------------------------------------------------------------
  function fill(T object)
    for i = 0 to capacity()-1
      m_array.set(i, object)
    m_count = capacity()

  // --------------------------------------------------------------------------
  override function get(int index) returns T
    if (m_array == null)
      error("Array is null")
    if (index < 0 or index >= size())
      error("Index out of range: " + index.toString())
    return m_array.get(index)

  // --------------------------------------------------------------------------
  override function set(int index, T _item)
    if (m_array == null)
      error("Array is null")
    if (index < 0 or index >= size())
      error("Index out of range: " + index.toString())
    m_array.set(index, _item)

  // --------------------------------------------------------------------------
  function contains(T _item) returns bool
    return indexOf(_item) != -1

  // --------------------------------------------------------------------------
  function add(T _item)
    m_array = FixedArray.growArray(m_array, m_count + 1)
    m_array.set(m_count, _item)
    m_count++

  // --------------------------------------------------------------------------
  function insert(int index, T _item)
    if (index < 0 or index > size())
      error("Index out of range: " + index.toString())    
    if (index == size())
      add(_item)
      return
    m_array = FixedArray.growArray(m_array, m_count + 1)
    var mutableIndex = m_count - 1
    while (mutableIndex > index and mutableIndex > 0)
      m_array.set(mutableIndex, get(mutableIndex - 1))
      mutableIndex--
    m_count++
    set(index, _item)

  // --------------------------------------------------------------------------
  function indexOf(T _item) returns int
    for i = 0 to m_count - 1
      if (get(i) == _item)
        return i
    return -1

  // --------------------------------------------------------------------------
  function remove(T _item) returns bool
    let index = indexOf(_item)
    if (index == -1)
      return false
    removeAt(index)
    return true

  // --------------------------------------------------------------------------
  function removeAt(int index) returns T
    if (index < 0 or index >= size())
      error("Index out of range: " + index.toString())
    var mutableIndex = index
    let _item = get(index)
    while (mutableIndex < m_count - 1)
      m_array.set(mutableIndex, get(mutableIndex + 1))
      mutableIndex++
    m_count--
    return _item
    
  // --------------------------------------------------------------------------
  /** Removes an item at the given index and decrements the size but does not
      shift items in the array that come after the index. Instead, it replaces
      the item at the index with the last item in the array.
   */
  function removeUnordered(T _item) returns bool
    let index = indexOf(_item)
    if (index == -1)
      return false
    removeAtUnordered(index)
    return true

  // --------------------------------------------------------------------------
  /** Removes an item at the given index and decrements the size but does not
      shift items in the array that come after the index. Instead, it replaces
      the item at the index with the last item in the array.
   */
  function removeAtUnordered(int index) returns T
    if (index < 0 or index >= size())
      error("Index out of range: " + index.toString())
    let _item = get(index)
    if (m_count > 1)
      m_array.set(index, get(m_count - 1))
      m_array.set(m_count - 1, null)
    m_count--
    return _item    

  // --------------------------------------------------------------------------
  function resize(int size)
    m_array = FixedArray.growArray(m_array, size)

  // --------------------------------------------------------------------------
  function clear()
    m_count = 0

  // --------------------------------------------------------------------------
  function clearAndNull()
    for i = 0 to m_count - 1
      m_array.set(i, null)
    m_count = 0

  // --------------------------------------------------------------------------
  function getFirst() returns T
    return m_count > 0 ? m_array.get(0) : null

  // --------------------------------------------------------------------------
  function getLast() returns T
    return m_count > 0 ? m_array.get(m_count - 1) : null

  // --------------------------------------------------------------------------
  function isEmpty() returns bool
    return m_count == 0

  // --------------------------------------------------------------------------
  function clone() returns Vector<T>
    let clonedVector = new Vector<T>(capacity())
    for i = 0 to size() - 1
      clonedVector.add(get(i))
    return clonedVector

  // --------------------------------------------------------------------------
  function staticItr() returns VectorIterator<T>
    if (m_staticIterator == null)
      m_staticIterator = new VectorIterator<T>(this, false)
    m_staticIterator.reset()
    return m_staticIterator

  // --------------------------------------------------------------------------
  function iterator() returns VectorIterator<T>
    return new VectorIterator<T>(this, true)

// ============================================================================
public function Vector<T>.forEach<T>(Action1<T> action)
  action.acquire()
  for _item in this
    action.call(_item)
  action.release()

// ============================================================================
public function Vector<T>.getRandom<T>() returns T
  if (this.isEmpty())
    return null
  return this.get(GetRandomInt(0, this.size() - 1))

// ============================================================================
public function Vector<T>.getRandomUnique<T>(int count) returns Vector<T>
  let clone = this.clone()
  let output = new Vector<T>()
  for i = 0 to count - 1
    let randomIndex = GetRandomInt(0, clone.size() - 1)
    output.add(clone.get(randomIndex))
    clone.removeAt(randomIndex)
    if (clone.isEmpty())
      break
  destroy clone
  return output

// ============================================================================
public function Vector<T>.pop<T>() returns T
  let count = this.size()
  if (count == 0)
    error("Cannot pop from an empty Vector")
  return this.removeAt(count - 1)

// ============================================================================
public function Vector<T>.push<T>(T _item)
  this.add(_item)

// ============================================================================
public function Vector<T>.peek<T>() returns T
  return this.getLast()

// ============================================================================
// Tries to fill a null slot in the vector or adds to the end otherwise.
public function Vector<T>.emplaceAdd<T>(T _item) returns int
  for i = 0 to this.size() - 1
    if (this.get(i) == null)
      this.set(i, _item)
      return i
  this.add(_item)
  return this.size() - 1

// ============================================================================
// Removes an item from the vector by nulling it out. Does not affect the count.
public function Vector<T>.emplaceRemove<T>(T _item) returns bool
  let index = this.indexOf(_item)
  if (index == -1)
    return false
  this.set(index, null)
  return true

// ============================================================================
public function Vector<T>.copyTo<T>(Vector<T> other)
  other.resize(this.capacity())
  let thisCount = this.size()
  let otherCount = other.size()
  for i = 0 to max(thisCount - 1, otherCount - 1)
    if (i >= thisCount)
      break
    if (i < otherCount)
      other.set(i, this.get(i))
    else
      other.add(this.get(i))

// ============================================================================
public function Vector<T>.take<T>(int count) returns Vector<T>
  if (count == 0)
    error("Argument 'count' must be greater than 0")
  let newList = new Vector<T>()
  let iterator = this.staticItr()
  for i = 0 to count - 1
    if (iterator.hasNext())
      newList.add(iterator.next())
  return newList

// ============================================================================
/** Joins elements from a string list into one string using a separator */
public function Vector<string>.joinBy(string separator) returns string
  var joined = ""
  var first = true
  let iter = this.iterator()

  for str from iter
    if iter.hasNext() or not first
      joined += str + separator
    else
      joined += str
      first = false

  iter.close()
  return joined

// ============================================================================
public function Vector<T>.swap<T>(int indexA, int indexB)
  if (indexA >= 0 and indexA < this.size() and indexB >= 0 and indexB < this.size())
    let temp = this.get(indexA)
    this.set(indexA, this.get(indexB))
    this.set(indexB, temp)

// ============================================================================
function Vector<T>.quickSortPartition<T>(int low, int high, Func2<T, T, bool> comparator) returns int
  comparator.acquire()
  let pivot = this.get(high)
  let count = this.size()
  var i = low - 1
  var j = low
  while (j <= high - 1)
    if (j >= 0 and j < count and comparator.call(this.get(j), pivot))
      i++
      this.swap(i, j)
    j++
  this.swap(i + 1,high)
  comparator.release()
  return i + 1

int g_partition

// ============================================================================
function Vector<T>.quickSort<T>(int left, int right, Func2<T, T, bool> comparator, int maxPartitionSize)
  if (left < right)
    comparator.acquire()

    int partition

    if ((left - right).abs() > maxPartitionSize)
      g_partition = INT_MIN
      execute() () ->
        g_partition = this.quickSortPartition(left, right, comparator)
      if (g_partition == INT_MIN)
        error("Ran out of ops must increase max partition size")
      partition = g_partition
    else
      partition = this.quickSortPartition(left, right, comparator)

    this.quickSort(left, partition-1, comparator, maxPartitionSize)
    this.quickSort(partition+1, right, comparator, maxPartitionSize)
    comparator.release()

// ============================================================================
public function Vector<T>.sort<T>(Func2<T, T, bool> comparator)
  this.quickSort(0, this.size() - 1, comparator, INT_MAX)

// ============================================================================
public function Vector<T>.sort<T>(Func2<T, T, bool> comparator, int maxPartitionSize)
  this.quickSort(0, this.size() - 1, comparator, maxPartitionSize)

// ============================================================================
public class VectorIterator<T>
  private Vector<T> m_vector
  private int m_count = 0
  private int m_index = -1
  private bool m_destroyOnClose

  // --------------------------------------------------------------------------
  construct(Vector<T> vector, bool destroyOnClose)
    m_vector = vector
    m_count = m_vector.size()
    m_destroyOnClose = destroyOnClose

  // --------------------------------------------------------------------------
  function reset()
    m_count = m_vector.size()
    m_index = -1

  // --------------------------------------------------------------------------
  function modify(T value)
    if (m_index != -1)
      m_vector.set(m_index, value)

  // --------------------------------------------------------------------------
  function hasNext() returns bool
    return m_index + 1 < m_count

  // --------------------------------------------------------------------------
  function next() returns T
    m_index++
    return m_vector.get(m_index)

  // --------------------------------------------------------------------------
  function lookahead() returns T
    T nextItem = null
    if (hasNext())
      nextItem = m_vector.get(m_index + 1)
    return nextItem

  // --------------------------------------------------------------------------
  function close()
    if (m_destroyOnClose)
      destroy this

// ============================================================================
@test
function testCreate()
  new Vector<int>(8).capacity().assertEquals(8)
  new Vector<int>(9).capacity().assertEquals(16)
  new Vector<int>(16).capacity().assertEquals(16)
  new Vector<int>(17).capacity().assertEquals(32)
  new Vector<int>(32).capacity().assertEquals(32)
  new Vector<int>(33).capacity().assertEquals(64)
  new Vector<int>(64).capacity().assertEquals(64)
  new Vector<int>(65).capacity().assertEquals(128)
  new Vector<int>(128).capacity().assertEquals(128)
  new Vector<int>(129).capacity().assertEquals(256)
  new Vector<int>(256).capacity().assertEquals(256)
  new Vector<int>(257).capacity().assertEquals(512)
  new Vector<int>(512).capacity().assertEquals(512)
  new Vector<int>(513).capacity().assertEquals(1024)
  new Vector<int>(1024).capacity().assertEquals(1024)
  new Vector<int>(1025).capacity().assertEquals(2048)
  new Vector<int>(2048).capacity().assertEquals(2048)
  new Vector<int>(2049).capacity().assertEquals(4096)
  new Vector<int>(4096).capacity().assertEquals(4096)
  new Vector<int>(4097).capacity().assertEquals(8192)
  new Vector<int>(8192).capacity().assertEquals(8192)

// ============================================================================
@test
function testAdd()
  let vector = new Vector<int>(8)
  vector.add(1)
  vector.capacity().assertEquals(8)
  vector.size().assertEquals(1)

// ============================================================================
@test
function testAdd_Grows()
  let vector = new Vector<int>(8)
  
  // fill to capacity
  for i = 0 to vector.capacity() - 1
    vector.add(i)

  vector.capacity().assertEquals(8)
  vector.size().assertEquals(8)

  // add one more to make it grow
  vector.add(8)

  vector.capacity().assertEquals(16)
  vector.size().assertEquals(9)

  let count = vector.size()
  for i = 0 to count - 1
    vector.get(i).assertEquals(i)

// ============================================================================
@test
function testRemoveFirst()
  let vector = new Vector<int>(8)
  
  // fill to capacity
  for i = 0 to vector.capacity() - 1
    vector.add(i)

  vector.capacity().assertEquals(8)
  vector.size().assertEquals(8)

  // remove a single entry
  vector.remove(0)

  vector.capacity().assertEquals(8)
  vector.size().assertEquals(7)

  let count = vector.size()
  for i = 0 to count - 1
    vector.get(i).assertEquals(i + 1)

// ============================================================================
@test
function testRemoveLast()
  let vector = new Vector<int>(8)
  
  // fill to capacity
  for i = 0 to vector.capacity() - 1
    vector.add(i)

  vector.capacity().assertEquals(8)
  vector.size().assertEquals(8)

  // remove a single entry
  vector.remove(7)

  vector.capacity().assertEquals(8)
  vector.size().assertEquals(7)

  let count = vector.size()
  for i = 0 to count - 1
    vector.get(i).assertEquals(i)

// ============================================================================
@test
function testRemoveAt_First()
  let vector = new Vector<int>(8)

  vector.add(1)
  vector.add(2)
  vector.add(3)
  vector.add(4)
  vector.add(5)
  vector.add(6)
  vector.add(7)
  vector.add(8)

  vector.capacity().assertEquals(8)
  vector.size().assertEquals(8)

  // act
  let _item = vector.removeAt(0)

  _item.assertEquals(1)
  vector.capacity().assertEquals(8)
  vector.size().assertEquals(7)
  vector.get(0).assertEquals(2)
  vector.get(1).assertEquals(3)
  vector.get(2).assertEquals(4)
  vector.get(3).assertEquals(5)
  vector.get(4).assertEquals(6)
  vector.get(5).assertEquals(7)
  vector.get(6).assertEquals(8)

// ============================================================================
@test
function testRemoveAt_Middle()
  let vector = new Vector<int>(8)
  
  // fill to capacity
  vector.add(1)
  vector.add(2)
  vector.add(3)
  vector.add(4)
  vector.add(5)
  vector.add(6)
  vector.add(7)
  vector.add(8)

  // act
  let _item = vector.removeAt(3)

  // assert
  _item.assertEquals(4)
  vector.capacity().assertEquals(8)
  vector.size().assertEquals(7)
  vector.get(0).assertEquals(1)
  vector.get(1).assertEquals(2)
  vector.get(2).assertEquals(3)
  vector.get(3).assertEquals(5)
  vector.get(4).assertEquals(6)
  vector.get(5).assertEquals(7)
  vector.get(6).assertEquals(8)

// ============================================================================
@test
function testRemoveAt_Last()
  let vector = new Vector<int>(8)
  
  // fill to capacity
  vector.add(1)
  vector.add(2)
  vector.add(3)
  vector.add(4)
  vector.add(5)
  vector.add(6)
  vector.add(7)
  vector.add(8)

  // act
  let _item = vector.removeAt(7)

  // assert
  _item.assertEquals(8)
  vector.capacity().assertEquals(8)
  vector.size().assertEquals(7)
  vector.get(0).assertEquals(1)
  vector.get(1).assertEquals(2)
  vector.get(2).assertEquals(3)
  vector.get(3).assertEquals(4)
  vector.get(4).assertEquals(5)
  vector.get(5).assertEquals(6)
  vector.get(6).assertEquals(7)

// ============================================================================
@test
function testRemoveAt_Last_Empty()
  let vector = new Vector<int>(8)
  vector.add(1)

  // remove a single entry
  vector.removeAt(0)

  vector.capacity().assertEquals(8)
  vector.size().assertEquals(0)

// ============================================================================
@test
function testGrow_Strings()
  let vector = new Vector<string>(8)
  
  // fill to capacity
  for i = 0 to 31
    vector.add(i.toString())

  vector.capacity().assertEquals(32)
  vector.size().assertEquals(32)

  let count = vector.size()
  for i = 0 to count - 1
    vector.get(i).assertEquals(i.toString())

class PlayerVector extends Vector<player>

// ============================================================================
@test
function test_iterator()
  let vector = new PlayerVector()
  
  // fill to capacity
  for i = 0 to 23
    vector.add(players[i])

  var index = 0
  for _item in vector
    let p = players[index]
    _item.getHandleId().assertEquals(p.getHandleId())
    index++

// ============================================================================
@test
function test_iterator2()
  let vector = new Vector<int>(8)
  
  vector.add(123)

  for _item in vector
    _item.assertEquals(123)

// ============================================================================
@test
function testPop()
  let vector = new Vector<int>(8)
  
  vector.add(123)

  // act
  let _item = vector.pop()

  // assert
  _item.assertEquals(123)
  vector.size().assertEquals(0)

// ============================================================================
@test
function testClone()
  let vector = new Vector<int>(8)
  
  for i = 0 to 7
    vector.add(i + 1)

  // act
  let clone = vector.clone()

  // assert
  clone.size().assertEquals(8)
  for i = 0 to 7
    clone.get(i).assertEquals(i + 1)

// ============================================================================
@test
function testSort()
  let vector = new Vector<int>(8)
  
  vector.add(1)
  vector.add(4)
  vector.add(3)
  vector.add(8)
  vector.add(5)
  vector.add(2)
  vector.add(7)
  vector.add(6)

  // act
  vector.sort() (a, b) ->
    return a < b

  // assert
  vector.get(0).assertEquals(1)
  vector.get(1).assertEquals(2)
  vector.get(2).assertEquals(3)
  vector.get(3).assertEquals(4)
  vector.get(4).assertEquals(5)
  vector.get(5).assertEquals(6)
  vector.get(6).assertEquals(7)
  vector.get(7).assertEquals(8)