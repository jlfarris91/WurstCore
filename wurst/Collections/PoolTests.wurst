package PoolTests
import Pool

// ============================================================================
@test function reserve_finds_available_slot()
  let pool = new Pool<string>(8)
  let h = pool.reserve("Hello World!")
  pool.isHandleValid(h).assertTrue()
  pool.get(h).assertEquals("Hello World!")
  pool.getCapacity().assertEquals(8)

// ============================================================================
@test function reserve_grows_capacity()
  let pool = new Pool<string>(8)
  pool.getCapacity().assertEquals(8)

  for i = 1 to 15
    let h = pool.reserve(i.toString())
    pool.isHandleValid(h).assertTrue()
    pool.get(h).assertEquals(i.toString())

  pool.getCapacity().assertEquals(16)

// ============================================================================
@test function set()
  let pool = new Pool<string>(8)
  
  let h = pool.reserve("Hello World!")
  pool.get(h).assertEquals("Hello World!")
  pool.set(h, "12345")
  pool.get(h).assertEquals("12345")

// ============================================================================
@test function add_remove_invalidate_handle()
  let pool = new Pool<string>(8)
  
  let h = pool.reserve("Hello World!")
  pool.get(h).assertEquals("Hello World!")
  pool.release(h)
  pool.isHandleValid(h).assertFalse()

// ============================================================================
@test function iterate_none_available()
  let pool = new Pool<string>(8)
  
  pool.reserve("1")
  pool.reserve("2")
  pool.reserve("3")

  var counter = 1
  for ph in pool
    pool.get(ph).assertEquals(counter.toString())
    counter++

// ============================================================================
@test function iterate_first_available()
  let pool = new Pool<string>(8)
  
  let h1 = pool.reserve("1")
  pool.reserve("2")
  pool.reserve("3")

  pool.release(h1)

  var counter = 2
  for ph in pool
    pool.get(ph).assertEquals(counter.toString())
    counter++

// ============================================================================
@test function iterate_mid_available()
  let pool = new Pool<string>(8)
  
  pool.reserve("1")
  let h2 = pool.reserve("2")
  pool.reserve("3")

  pool.release(h2)

  var counter = 1
  for ph in pool
    pool.get(ph).assertEquals(counter.toString())
    counter += 2

// ============================================================================
@test function iterate_last_available()
  let pool = new Pool<string>(8)
  
  pool.reserve("1")
  pool.reserve("2")
  let h3 = pool.reserve("3")

  pool.release(h3)

  var counter = 1
  for ph in pool
    pool.get(ph).assertEquals(counter.toString())
    counter++

// ============================================================================
@test function iterate_contiguous_front_available()
  let pool = new Pool<string>(8)
  
  let h1 = pool.reserve("1")
  let h2 = pool.reserve("2")
  pool.reserve("3")
  pool.reserve("4")
  pool.reserve("5")

  pool.release(h1)
  pool.release(h2)

  var counter = 3
  for ph in pool
    pool.get(ph).assertEquals(counter.toString())
    counter++

// ============================================================================
@test function iterate_contiguous_mid_available()
  let pool = new Pool<string>(8)
  
  pool.reserve("1")
  let h2 = pool.reserve("2")
  let h3 = pool.reserve("3")
  let h4 = pool.reserve("4")
  pool.reserve("5")

  pool.release(h2)
  pool.release(h3)
  pool.release(h4)

  var counter = 1
  for ph in pool
    pool.get(ph).assertEquals(counter.toString())
    counter += 4

// ============================================================================
@test function iterate_contiguous_end_available()
  let pool = new Pool<string>(8)
  
  pool.reserve("1")
  pool.reserve("2")
  pool.reserve("3")
  let h4 = pool.reserve("4")
  let h5 = pool.reserve("5")

  pool.release(h4)
  pool.release(h5)

  var counter = 1
  for ph in pool
    pool.get(ph).assertEquals(counter.toString())
    counter++