package CircularBuffer
import Vector
import ErrorHandling
import Math

// ============================================================================
public class CircularBuffer<T>
  protected Vector<T> m_items
  protected int m_readIndex = 0
  protected int m_writeIndex = 0
  private int m_count = 0

  // --------------------------------------------------------------------------
  construct(int capacity)
    m_items = new Vector<T>(capacity)..fill(null)

  // --------------------------------------------------------------------------
  ondestroy
    clear()
    destroy m_items
    m_items = null

  // --------------------------------------------------------------------------
  function getCapacity() returns int
    return m_items.capacity()

  // --------------------------------------------------------------------------
  function getCount() returns int
    return m_count

  // --------------------------------------------------------------------------
  function isEmpty() returns bool
    return m_count == 0

  // --------------------------------------------------------------------------
  function isFull() returns bool
    return getCount() == getCapacity()

  // --------------------------------------------------------------------------
  function get(int index) returns T
    return m_items.get(wrap(m_readIndex + index, 0, getCapacity() - 1))

  // --------------------------------------------------------------------------
  function enqueue(T _item)
    m_items.set(m_writeIndex, _item)
    incrementWriteIndex()
    m_count = min(m_count + 1, getCapacity())

  // --------------------------------------------------------------------------
  function dequeue() returns T
    if (isEmpty())
      error("Cannot dequeue from empty CircularBuffer")
    let _item = m_items.get(m_readIndex)
    incrementReadIndex()
    m_count--
    return _item

  // --------------------------------------------------------------------------
  function clear()
    for i = 0 to getCapacity() - 1
      m_items.set(i, null)
    m_readIndex = 0
    m_writeIndex = 0
    m_count = 0

  // --------------------------------------------------------------------------
  function iterator() returns VectorIterator<T>
    return m_items.iterator()

  // --------------------------------------------------------------------------
  private function incrementWriteIndex()
    m_writeIndex = wrap(m_writeIndex + 1, 0, getCapacity() - 1)

  // --------------------------------------------------------------------------
  private function incrementReadIndex()
    m_readIndex = wrap(m_readIndex + 1, 0, getCapacity() - 1)

// ============================================================================
public class CBIterator<T>
  private Vector<T> m_vector
  private int m_index = -1
  private int m_readIndex
  private int m_writeIndex
  private bool m_destroyOnClose

  // --------------------------------------------------------------------------
  construct(Vector<T> vector, int readIndex, int writeIndex, bool destroyOnClose)
    m_vector = vector
    m_index = readIndex - 1
    m_readIndex = readIndex
    m_writeIndex = writeIndex
    m_destroyOnClose = destroyOnClose

  // --------------------------------------------------------------------------
  function reset()
    m_index = wrapIndex(m_readIndex - 1)

  // --------------------------------------------------------------------------
  function hasNext() returns bool
    return m_index != m_writeIndex

  // --------------------------------------------------------------------------
  function next() returns T
    m_index = wrapIndex(m_index + 1)
    return m_vector.get(m_index)

  // --------------------------------------------------------------------------
  function lookahead() returns T
    T nextItem = null
    if (hasNext())
      nextItem = m_vector.get(wrapIndex(m_index + 1))
    return nextItem

  // --------------------------------------------------------------------------
  function close()
    if (m_destroyOnClose)
      destroy this
  
  // --------------------------------------------------------------------------
  private function wrapIndex(int index) returns int
    return wrap(index, 0, m_vector.capacity() - 1)

// ============================================================================
@test function test_enqueueOne_countIncreasesByOne()

  // Arrange
  let cb = new CircularBuffer<int>(8)

  // Act
  cb.enqueue(123)

  // Assert
  cb.getCount().assertEquals(1)

// ============================================================================
@test function test_enqueueToFill_coundEqualsCapacity()

  // Arrange
  let cb = new CircularBuffer<int>(8)

  // Act
  for i = 1 to 8
    cb.enqueue(i)

  // Assert
  cb.getCount().assertEquals(8)
  cb.isFull().assertTrue()

// ============================================================================
@test function test_dequeueOne_decreasesCountByOne()

  // Arrange
  let cb = new CircularBuffer<int>(8)
  
  for i = 1 to 8
    cb.enqueue(i)

  // Act
  cb.dequeue().assertEquals(1)

  // Assert
  cb.getCount().assertEquals(7)
  cb.isEmpty().assertFalse()
  cb.isFull().assertFalse()

// ============================================================================
@test function test_dequeueUntilEmpty()

  // Arrange
  let cb = new CircularBuffer<int>(8)
  
  for i = 1 to 8
    cb.enqueue(i)

  // Act
  cb.dequeue().assertEquals(1)
  cb.dequeue().assertEquals(2)
  cb.dequeue().assertEquals(3)
  cb.dequeue().assertEquals(4)
  cb.dequeue().assertEquals(5)
  cb.dequeue().assertEquals(6)
  cb.dequeue().assertEquals(7)
  cb.dequeue().assertEquals(8)

  // Assert
  cb.getCount().assertEquals(0)
  cb.isEmpty().assertTrue()

// ============================================================================
@test function test_enqueueDequeueStressTest()

  // Arrange
  let cb = new CircularBuffer<int>(1024)

  // Act
  for i = 1 to 100
    cb.enqueue(i)

  for i = 1 to 100
    cb.dequeue().assertEquals(i)

  for i = 1 to 1024
    cb.enqueue(i * 2)

  cb.isFull().assertTrue()

  for i = 1 to 1024
    cb.dequeue().assertEquals(i * 2)

  // Assert
  cb.getCount().assertEquals(0)
  cb.isEmpty().assertTrue()

// ============================================================================
@test function test_clear()

  // Arrange
  let cb = new CircularBuffer<int>(8)
  
  for i = 1 to 8
    cb.enqueue(i)

  // Act
  cb.clear()

  // Assert
  cb.getCount().assertEquals(0)
  cb.isEmpty().assertTrue()

// ============================================================================
@test function add_more_than_capacity()

  // Arrange
  let cb = new CircularBuffer<int>(8)

  // Act
  for i = 0 to 15
    cb.enqueue(i)
    // let icb = ModuloInteger(i, 8)
    // Log.info("i: " + i.toString() + " cb[" + icb.toString() + "]: " + cb.get(icb).toString())

  // Assert
  var idx = 0
  for v in cb
    // Log.info(v.toString())
    v.assertEquals(8 + idx)
    idx++

  cb.isFull().assertTrue()