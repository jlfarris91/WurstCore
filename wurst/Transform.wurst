package Transform
import Quaternion
import ErrorHandling
import Vector

tuple transform(vec3 pos, quat rot, real scale)

constant transform IDENTITYT = transform(ZERO3, IDENTITYQ, 1.0)

// ============================================================================
function transform(vec2 pos) returns transform
  return transform(pos.toVec3(), IDENTITYQ, 1.0)

// ============================================================================
function transform(vec3 pos) returns transform
  return transform(pos, IDENTITYQ, 1.0)

// ============================================================================
function transform(vec2 pos, quat rotation) returns transform
  return transform(pos.toVec3(), rotation, 1.0)

// ============================================================================
function transform(vec3 pos, quat rotation) returns transform
  return transform(pos, rotation, 1.0)

// ============================================================================
function transform.op_mult(transform localTransform) returns transform
  return this.concat(localTransform)

// ============================================================================
function transform.concat(transform localTransform) returns transform
  let r = this.rot * localTransform.rot
  var v = localTransform.pos * this.scale
  v = v.rotate(this.rot)
  let p = v + this.pos
  let s = this.scale * localTransform.scale
  return transform(p, r, s)

// ============================================================================
function transform.separate(transform worldTransform) returns transform
  let scaleSafe = this.scale == 0.0 ? 1.0 : this.scale
  let s = worldTransform.scale / scaleSafe
  let r = this.rot.conj() * worldTransform.rot.norm()
  var v = worldTransform.pos - this.pos
  v = v.rotate(this.rot.inv()) / scaleSafe
  return transform(v, r, s)

// // ============================================================================
// function transform.concat(transform localTransform) returns transform
//   let r = this.rot * localTransform.rot
//   var v = (localTransform.pivot + localTransform.pos - this.pivot) * this.scale
//   v = v.rotate(this.rot)
//   let p = v + this.pivot + this.pos - localTransform.pivot
//   let s = this.scale * localTransform.scale
//   return transform(p, localTransform.pivot, r, s)

// // ============================================================================
// function transform.separate(transform worldTransform) returns transform
//   let scaleSafe = this.scale == 0.0 ? 1.0 : this.scale
//   let s = worldTransform.scale / scaleSafe
//   let r = this.rot.conj() * worldTransform.rot.norm()
//   var v = worldTransform.pos + worldTransform.pivot - this.pos - this.pivot
//   v = v.rotate(this.rot.inv()) / scaleSafe
//   let p = v + this.pivot - worldTransform.pivot
//   return transform(p, worldTransform.pivot, r, s)

// ============================================================================
function transform.getRight() returns vec3
  return this.transformDir(RIGHT3)

// ============================================================================
function transform.setRight(vec3 value) returns transform
  var transform = this
  transform.rot = quatLookRotation(value)
  return transform

// ============================================================================
function transform.getUp() returns vec3
  return this.transformDir(UP3)

// ============================================================================
function transform.setUp(vec3 value) returns transform
  var transform = this
  transform.rot = quatFromToRotation(UP3, value)
  return transform

// ============================================================================
function transform.getForward() returns vec3
  return this.transformDir(FORWARD3)

// ============================================================================
function transform.setForward(vec3 value) returns transform
  var transform = this
  transform.rot = quatFromToRotation(RIGHT3, value)
  return transform

// ============================================================================
function transform.withPos(vec3 pos) returns transform
  return transform(pos, this.rot, this.scale)

// ============================================================================
function transform.withRot(quat rot) returns transform
  return transform(this.pos, rot, this.scale)

// ============================================================================
function transform.withScale(real scale) returns transform
  return transform(this.pos, this.rot, scale)

// ============================================================================
/** Affected by position, scale and rotaiton */
function transform.transformPoint(vec2 point) returns vec2
  return this.transformPoint(point.toVec3()).toVec2()

// ============================================================================
/** Affected by position, scale and rotaiton */
function transform.transformPoint(vec3 point) returns vec3
  return this.rot * this.scale * point + this.pos

// ============================================================================
/** Not affected by position but is affected by scale */
function transform.transformVector(vec2 vec) returns vec2
  return this.transformVector(vec.toVec3()).toVec2()

// ============================================================================
/** Not affected by position but is affected by scale */
function transform.transformVector(vec3 vec) returns vec3
  return this.rot * this.scale * vec

// ============================================================================
/** Only affected by rotation */
function transform.transformDir(vec2 dir) returns vec2
  return this.transformDir(dir.toVec3()).toVec2()

// ============================================================================
/** Only affected by rotation */
function transform.transformDir(vec3 dir) returns vec3
  return this.rot * dir

// ============================================================================
function transform.apply(effect fx)
  fx.setPos(this.pos)
  fx.setScale(this.scale)
  fx.setOrientation(this.rot)

// ============================================================================
function effect.applyTransform(transform t)
  this.setPos(t.pos)
  this.setScale(t.scale)
  this.setOrientation(t.rot)

// ============================================================================
function transform.apply(unit u)
  let eulers = this.rot.toEuler()
  u.setPosFly(this.pos)
  u.setScale(this.scale)
  u.setFacing(eulers.z.asAngleRadians())

// ============================================================================
function unit.applyTransform(transform t)
  let eulers = t.rot.toEuler()
  this.setPosFly(t.pos)
  this.setScale(t.scale)
  this.setFacing(eulers.z.asAngleRadians())

// ============================================================================
function transform.apply(item i)
  i.setPos(this.pos.toVec2())

// ============================================================================
public function item.applyTransform(Transform transform)
  this.setPos(transform.getWorldPosition().toVec2())

// ============================================================================
public function unit.getTransform() returns Transform
  return new Transform(this.getPos3Fly(), eulerToQuat(this.getFacingAngle().radians, 0.0, 0.0), 1.0)

// ============================================================================
public function createUnit(player owner, int unitTypeId, Transform worldTransform) returns unit
  return createUnit(
    owner,
    unitTypeId,
    worldTransform.getWorldPosition(),
    worldTransform.getWorldYaw())

// ============================================================================
public function createDestructable(int destructableTypeId, int variation, Transform transform) returns destructable
  return createDestructable(
    destructableTypeId,
    transform.getWorldPosition(),
    transform.getWorldYaw(),
    transform.getWorldScale(),
    variation)

// ============================================================================
public class Transform
  private Transform m_parent = null
  private Vector<Transform> m_children
  private transform m_localTransform = IDENTITYT
  private transform m_worldTransform = IDENTITYT
  private bool m_dirtyWorld = true

  // ----------------------------------------------------------------------------
  construct()

  // ----------------------------------------------------------------------------
  construct(vec2 pos)
    m_localTransform = transform(pos.toVec3(), IDENTITYQ, 1.0)

  // ----------------------------------------------------------------------------
  construct(vec2 pos, quat rot)
    m_localTransform = transform(pos.toVec3(), rot, 1.0)

  // ----------------------------------------------------------------------------
  construct(vec2 pos, quat rot, real scale)
    m_localTransform = transform(pos.toVec3(), rot, scale)

  // ----------------------------------------------------------------------------
  construct(vec3 pos)
    m_localTransform = transform(pos, IDENTITYQ, 1.0)

  // ----------------------------------------------------------------------------
  construct(vec3 pos, quat rot)
    m_localTransform = transform(pos, rot, 1.0)

  // ----------------------------------------------------------------------------
  construct(vec3 pos, quat rot, real scale)
    m_localTransform = transform(pos, rot, scale)

  // ----------------------------------------------------------------------------
  construct(Transform other)
    m_localTransform = other.m_localTransform

  // --------------------------------------------------------------------------
  ondestroy
    if (m_children != null)
      destroy m_children
      m_children = null

  // ----------------------------------------------------------------------------
  function copyLocalFrom(Transform transform)
    setLocalTransform(transform.m_localTransform)

  // ----------------------------------------------------------------------------
  function copyWorldFrom(Transform transform)
    setWorldTransform(transform.m_worldTransform)

  // ----------------------------------------------------------------------------
  function clone() returns Transform
    return new Transform(this)

  // --------------------------------------------------------------------------
  function getParent() returns Transform
    return m_parent

  // --------------------------------------------------------------------------
  function setParent(Transform parent)
    if (m_parent == parent)
      return

    if (parent == this)
      error("Cannot set parent to self")

    if (m_parent != null and m_parent.m_children != null)
      m_parent.m_children.remove(this)

    m_parent = parent

    if (m_parent != null)
      if (m_parent.m_children == null)
        m_parent.m_children = new Vector<Transform>()
      m_parent.m_children.add(this)

    dirtyHierarchy()

  // --------------------------------------------------------------------------
  function getChildCount() returns int
    return m_children != null ? m_children.size() : 0

  // --------------------------------------------------------------------------
  function getChild(int index) returns Transform
    return m_children != null ? m_children.get(index) : null

  // ----------------------------------------------------------------------------
  function setLocalTransform(vec2 pos)
    setLocalTransform(pos.toVec3())

  // ----------------------------------------------------------------------------
  function setLocalTransform(vec2 pos, quat rot)
    setLocalTransform(pos.toVec3(), rot)

  // ----------------------------------------------------------------------------
  function setLocalTransform(vec2 pos, quat rot, real scale)
    setLocalTransform(pos.toVec3(), rot, scale)

  // ----------------------------------------------------------------------------
  function setLocalTransform(vec3 pos)
    setLocalTransform(pos, IDENTITYQ, 1.0)

  // ----------------------------------------------------------------------------
  function setLocalTransform(vec3 pos, quat rot)
    setLocalTransform(pos, rot, 1.0)

  // ----------------------------------------------------------------------------
  function setLocalTransform(vec3 pos, quat rot, real scale)
    setLocalTransform(transform(pos, rot, scale))

  // --------------------------------------------------------------------------
  private function setLocalTransform(transform value)
    if (m_localTransform != value)
      m_localTransform = value
      dirtyHierarchy()

  // --------------------------------------------------------------------------
  function getLocalPosition() returns vec3
    return m_localTransform.pos

  // --------------------------------------------------------------------------
  function setLocalPosition(vec2 value)
    setLocalPosition(value.toVec3())

  // --------------------------------------------------------------------------
  function setLocalPosition(vec3 value)
    setLocalTransform(m_localTransform.withPos(value))

  // --------------------------------------------------------------------------
  function getLocalRotation() returns quat
    return m_localTransform.rot

  // --------------------------------------------------------------------------
  function setLocalRotation(quat value)
    setLocalTransform(m_localTransform.withRot(value))

  // ----------------------------------------------------------------------------
  function getLocalYaw() returns angle
    return m_localTransform.rot.getEulerYaw().asAngleRadians()

  // ----------------------------------------------------------------------------
  function setLocalYaw(angle angle)
    setLocalRotation(eulerToQuat(angle.radians(), 0, 0))

  // --------------------------------------------------------------------------
  function getLocalScale() returns real
    return m_localTransform.scale

  // --------------------------------------------------------------------------
  function setLocalScale(real value)
    setLocalTransform(m_localTransform.withScale(value))

  // --------------------------------------------------------------------------
  function getLocalRight() returns vec3
    return m_localTransform.getRight()

  // --------------------------------------------------------------------------
  function setLocalRight(vec3 value)
    let localTransform = m_localTransform
    localTransform.setRight(value)
    setLocalTransform(localTransform)

  // --------------------------------------------------------------------------
  function getLocalUp() returns vec3
    return m_localTransform.getUp()

  // --------------------------------------------------------------------------
  function setLocalUp(vec3 value)
    let localTransform = m_localTransform
    localTransform.setUp(value)
    setLocalTransform(localTransform)

  // --------------------------------------------------------------------------
  function getLocalForward() returns vec3
    return m_localTransform.getForward()

  // --------------------------------------------------------------------------
  function setLocalForward(vec3 value)
    let localTransform = m_localTransform
    localTransform.setForward(value)
    setLocalTransform(localTransform)

  // --------------------------------------------------------------------------
  private function getWorldTransform() returns transform
    if (m_dirtyWorld)
      m_worldTransform = m_parent != null ? m_parent.getWorldTransform() * m_localTransform : m_localTransform
      m_dirtyWorld = false
    return m_worldTransform

  // ----------------------------------------------------------------------------
  function setWorldTransform(vec2 pos)
    setWorldTransform(pos.toVec3())

  // ----------------------------------------------------------------------------
  function setWorldTransform(vec2 pos, quat rot)
    setWorldTransform(pos.toVec3(), rot)

  // ----------------------------------------------------------------------------
  function setWorldTransform(vec2 pos, quat rot, real scale)
    setWorldTransform(pos.toVec3(), rot, scale)

  // ----------------------------------------------------------------------------
  function setWorldTransform(vec3 pos)
    setWorldTransform(pos, IDENTITYQ, 1.0)

  // ----------------------------------------------------------------------------
  function setWorldTransform(vec3 pos, quat rot)
    setWorldTransform(pos, rot, 1.0)

  // ----------------------------------------------------------------------------
  function setWorldTransform(vec3 pos, quat rot, real scale)
    setWorldTransform(transform(pos, rot, scale))

  // --------------------------------------------------------------------------
  private function setWorldTransform(transform value)
    var localTransform = value
    if (m_parent != null)
      localTransform = m_parent.getWorldTransform().separate(value)
    m_localTransform = localTransform
    dirtyHierarchy()

  // --------------------------------------------------------------------------
  function getWorldPosition() returns vec3
    return getWorldTransform().pos

  // --------------------------------------------------------------------------
  function setWorldPosition(vec2 value)
    setWorldPosition(value.toVec3())

  // --------------------------------------------------------------------------
  function setWorldPosition(vec3 value)
    var worldTransform = getWorldTransform()
    worldTransform.pos = value
    setWorldTransform(worldTransform)

  // --------------------------------------------------------------------------
  function getWorldRotation() returns quat
    return getWorldTransform().rot

  // --------------------------------------------------------------------------
  function setWorldRotation(quat value)
    var worldTransform = getWorldTransform()
    worldTransform.rot = value
    setWorldTransform(worldTransform)

  // ----------------------------------------------------------------------------
  function getWorldYaw() returns angle
    let worldTransform = getWorldTransform()
    return worldTransform.rot.getEulerYaw().asAngleRadians()

  // ----------------------------------------------------------------------------
  function setWorldYaw(angle angle)
    setWorldRotation(eulerToQuat(angle.radians(), 0, 0))

  // --------------------------------------------------------------------------
  function getWorldScale() returns real
    return getWorldTransform().scale

  // --------------------------------------------------------------------------
  function setWorldScale(real value)
    var worldTransform = getWorldTransform()
    worldTransform.scale = value
    setWorldTransform(worldTransform)

  // --------------------------------------------------------------------------
  function getWorldRight() returns vec3
    return getWorldTransform().getRight()

  // --------------------------------------------------------------------------
  function setWorldRight(vec3 value)
    setWorldTransform(getWorldTransform().setRight(value))

  // --------------------------------------------------------------------------
  function getWorldUp() returns vec3
    return getWorldTransform().getUp()

  // --------------------------------------------------------------------------
  function setWorldUp(vec3 value)
    setWorldTransform(getWorldTransform().setUp(value))

  // --------------------------------------------------------------------------
  function getWorldForward() returns vec3
    return getWorldTransform().getForward()

  // --------------------------------------------------------------------------
  function setWorldForward(vec3 value)
    setWorldTransform(getWorldTransform().setForward(value))

  // --------------------------------------------------------------------------
  /** Affected by position, scale and rotaiton */
  function transformPoint(vec2 point) returns vec2
    return transformPoint(point.toVec3()).toVec2()

  // --------------------------------------------------------------------------
  /** Affected by position, scale and rotaiton */
  function transformPoint(vec3 point) returns vec3
    return getWorldTransform().transformPoint(point)

  // --------------------------------------------------------------------------
  /** Not affected by position but is affected by scale */
  function transformVector(vec2 vec) returns vec2
    return transformVector(vec.toVec3()).toVec2()

  // --------------------------------------------------------------------------
  /** Not affected by position but is affected by scale */
  function transformVector(vec3 vec) returns vec3
    return getWorldTransform().transformVector(vec)

  // --------------------------------------------------------------------------
  /** Only affected by rotation */
  function transformDir(vec2 dir) returns vec2
    return transformDir(dir.toVec3()).toVec2()

  // --------------------------------------------------------------------------
  /** Only affected by rotation */
  function transformDir(vec3 dir) returns vec3
    return getWorldTransform().transformDir(dir)

  // --------------------------------------------------------------------------
  function apply(effect fx)
    getWorldTransform().apply(fx)

  // --------------------------------------------------------------------------
  function apply(unit u)
    getWorldTransform().apply(u)

  // --------------------------------------------------------------------------
  function apply(item i)
    getWorldTransform().apply(i)

  // --------------------------------------------------------------------------
  private function dirtyHierarchy()
    m_dirtyWorld = true
    if (m_children != null)
      for child in m_children
        child.dirtyHierarchy()