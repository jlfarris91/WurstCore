package Transform
import Quaternion
import ErrorHandling
import Vector

public tuple transform(vec3 pos, vec3 pivot, quat rot, real scale)

public constant transform IDENTITYT = transform(ZERO3, ZERO3, IDENTITYQ, 1.0)

// ============================================================================
public function transform.op_mult(transform localTransform) returns transform
  return this.concat(localTransform)

// ============================================================================
public function transform.concat(transform localTransform) returns transform
  let r = this.rot * localTransform.rot
  var v = (localTransform.pivot + localTransform.pos - this.pivot) * this.scale
  v = v.rotate(this.rot)
  let p = v + this.pivot + this.pos - localTransform.pivot
  let s = this.scale * localTransform.scale
  return transform(p, localTransform.pivot, r, s)

// ============================================================================
public function transform.separate(transform worldTransform) returns transform
  let scaleSafe = this.scale == 0.0 ? 1.0 : this.scale
  let s = worldTransform.scale / scaleSafe
  let r = this.rot.conj() * worldTransform.rot.norm()
  var v = worldTransform.pos + worldTransform.pivot - this.pos - this.pivot
  v = v.rotate(this.rot.inv()) / scaleSafe
  let p = v + this.pivot - worldTransform.pivot
  return transform(p, worldTransform.pivot, r, s)

// ============================================================================
public function transform.getRight() returns vec3
  return this.rot * RIGHT3

// ============================================================================
public function transform.setRight(vec3 value) returns transform
  var transform = this
  transform.rot = quatLookRotation(value)
  return transform

// ============================================================================
public function transform.getUp() returns vec3
  return this.rot * UP3

// ============================================================================
public function transform.setUp(vec3 value) returns transform
  var transform = this
  transform.rot = quatFromToRotation(UP3, value)
  return transform

// ============================================================================
public function transform.getForward() returns vec3
  return this.rot * FORWARD3

// ============================================================================
public function transform.setForward(vec3 value) returns transform
  var transform = this
  transform.rot = quatFromToRotation(RIGHT3, value)
  return transform

// ============================================================================
public function transform.apply(effect fx)
  fx.setPos(this.pos)
  fx.setScale(this.scale)
  fx.setOrientation(this.rot)

// ============================================================================
public function effect.applyTransform(transform t)
  this.setPos(t.pos)
  this.setScale(t.scale)
  this.setOrientation(t.rot)

// ============================================================================
public function transform.apply(unit u)
  let eulers = this.rot.toEuler()
  u.setPosFly(this.pos)
  u.setScale(this.scale)
  u.setFacing(eulers.z.asAngleRadians())

// ============================================================================
public function unit.applyTransform(transform t)
  let eulers = t.rot.toEuler()
  this.setPosFly(t.pos)
  this.setScale(t.scale)
  this.setFacing(eulers.z.asAngleRadians())

// ============================================================================
public function transform.apply(item i)
  i.setPos(this.pos.toVec2())

// ============================================================================
public function item.applyTransform(transform t)
  this.setPos(t.pos.toVec2())

// ============================================================================
public function unit.getTransform() returns transform
  return transform(this.getPos3Fly(), ZERO3, eulerToQuat(this.getFacingAngle().radians, 0.0, 0.0), 1.0)

// ============================================================================
public class Transform
  private Transform m_parent = null
  private Vector<Transform> m_children
  private transform m_localTransform = IDENTITYT
  private transform m_worldTransform = IDENTITYT
  private bool m_dirtyWorld = true

  // --------------------------------------------------------------------------
  ondestroy
    if (m_children != null)
      destroy m_children
      m_children = null

  // --------------------------------------------------------------------------
  function getParent() returns Transform
    return m_parent

  // --------------------------------------------------------------------------
  function setParent(Transform parent)
    if (m_parent == parent)
      return

    if (parent == this)
      error("Cannot set parent to self")

    if (m_parent != null and m_parent.m_children != null)
      m_parent.m_children.remove(this)

    m_parent = parent

    if (m_parent != null)
      if (m_parent.m_children == null)
        m_parent.m_children = new Vector<Transform>()
      m_parent.m_children.add(this)

    dirtyHierarchy()

  // --------------------------------------------------------------------------
  function getChildCount() returns int
    return m_children != null ? m_children.size() : 0

  // --------------------------------------------------------------------------
  function getChild(int index) returns Transform
    return m_children != null ? m_children.get(index) : null

  // --------------------------------------------------------------------------
  function getLocalTransform() returns transform
    return m_localTransform

  // --------------------------------------------------------------------------
  function setLocalTransform(transform value)
    if (m_localTransform != value)
      m_localTransform = value
      dirtyHierarchy()

  // --------------------------------------------------------------------------
  function getLocalPosition() returns vec3
    return m_localTransform.pos

  // --------------------------------------------------------------------------
  function setLocalPosition(vec3 value)
    m_localTransform.pos = value

  // --------------------------------------------------------------------------
  function getLocalRotation() returns quat
    return m_localTransform.rot

  // --------------------------------------------------------------------------
  function setLocalRotation(quat value)
    if (m_localTransform.rot != value)
      m_localTransform.rot = value
      dirtyHierarchy()

  // --------------------------------------------------------------------------
  function getLocalScale() returns real
    return m_localTransform.scale

  // --------------------------------------------------------------------------
  function setLocalScale(real value)
    if (m_localTransform.scale != value)
      m_localTransform.scale = value
      dirtyHierarchy()

  // --------------------------------------------------------------------------
  function getLocalRight() returns vec3
    return m_localTransform.getRight()

  // --------------------------------------------------------------------------
  function setLocalRight(vec3 value)
    if (m_localTransform.getRight() != value)
      m_localTransform = m_localTransform.setRight(value)
      dirtyHierarchy()

  // --------------------------------------------------------------------------
  function getLocalUp() returns vec3
    return m_localTransform.getUp()

  // --------------------------------------------------------------------------
  function setLocalUp(vec3 value)
    if (m_localTransform.getUp() != value)
      m_localTransform = m_localTransform.setUp(value)
      dirtyHierarchy()

  // --------------------------------------------------------------------------
  function getLocalForward() returns vec3
    return m_localTransform.getForward()

  // --------------------------------------------------------------------------
  function setLocalForward(vec3 value)
    if (m_localTransform.getForward() != value)
      m_localTransform = m_localTransform.setForward(value)
      dirtyHierarchy()

  // --------------------------------------------------------------------------
  function getWorldTransform() returns transform
    if (m_dirtyWorld)
      m_worldTransform = m_parent != null ? m_parent.getWorldTransform() * m_localTransform : m_localTransform
      m_dirtyWorld = false
    return m_worldTransform

  // --------------------------------------------------------------------------
  function setWorldTransform(transform value)
    var localTransform = value
    if (m_parent != null)
      localTransform = m_parent.getWorldTransform().separate(value)
    m_localTransform = localTransform

  // --------------------------------------------------------------------------
  function getWorldPosition() returns vec3
    return getWorldTransform().pos

  // --------------------------------------------------------------------------
  function setWorldPosition(vec3 value)
    var worldTransform = getWorldTransform()
    worldTransform.pos = value
    setWorldTransform(worldTransform)

  // --------------------------------------------------------------------------
  function getWorldRotation() returns quat
    return getWorldTransform().rot

  // --------------------------------------------------------------------------
  function setWorldRotation(quat value)
    var worldTransform = getWorldTransform()
    worldTransform.rot = value
    setWorldTransform(worldTransform)

  // --------------------------------------------------------------------------
  function getWorldScale() returns real
    return getWorldTransform().scale

  // --------------------------------------------------------------------------
  function setWorldScale(real value)
    var worldTransform = getWorldTransform()
    worldTransform.scale = value
    setWorldTransform(worldTransform)

  // --------------------------------------------------------------------------
  function getWorldRight() returns vec3
    return getWorldTransform().getRight()

  // --------------------------------------------------------------------------
  function setWorldRight(vec3 value)
    setWorldTransform(getWorldTransform().setRight(value))

  // --------------------------------------------------------------------------
  function getWorldUp() returns vec3
    return getWorldTransform().getUp()

  // --------------------------------------------------------------------------
  function setWorldUp(vec3 value)
    setWorldTransform(getWorldTransform().setUp(value))

  // --------------------------------------------------------------------------
  function getWorldForward() returns vec3
    return getWorldTransform().getForward()

  // --------------------------------------------------------------------------
  function setWorldForward(vec3 value)
    setWorldTransform(getWorldTransform().setForward(value))

  // --------------------------------------------------------------------------
  function apply(effect fx)
    getWorldTransform().apply(fx)

  // --------------------------------------------------------------------------
  function apply(unit u)
    getWorldTransform().apply(u)

  // --------------------------------------------------------------------------
  function apply(item i)
    getWorldTransform().apply(i)

  // --------------------------------------------------------------------------
  private function dirtyHierarchy()
    m_dirtyWorld = true
    if (m_children != null)
      for child in m_children
        child.dirtyHierarchy()