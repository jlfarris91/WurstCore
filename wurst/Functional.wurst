package Functional
import Func
import Action

// ============================================================================
public class Functional<T>
  private Func<T> m_getter
  private Action1<T> m_setter
  private T m_value

  // --------------------------------------------------------------------------
  construct(T value)
    m_value = value

  // --------------------------------------------------------------------------
  construct(Func<T> getter)
    m_getter = getter
    m_setter = null

  // --------------------------------------------------------------------------
  construct(Func<T> getter, Action1<T> setter)
    m_getter = getter
    m_setter = setter

  // --------------------------------------------------------------------------
  ondestroy
    if (m_getter != null)
      destroy m_getter
      m_getter = null

    if (m_setter != null)
      destroy m_setter
      m_setter = null

  // --------------------------------------------------------------------------
  function getValue() returns T
    if (m_getter != null)
      m_value = m_getter.call()
    return m_value

  // --------------------------------------------------------------------------
  function setValue(T value)
    m_value = value
    if (m_setter != null)
      m_setter.call(value)

  // --------------------------------------------------------------------------
  static function fromValue<T>(T value) returns Functional<T>
    return new Functional<T>(value)

  // --------------------------------------------------------------------------
  static function fromFunc<T>(Func<T> func) returns Functional<T>
    return new Functional<T>(func, null)

// ============================================================================
public class FunctionalT<T>
  private Func1<real, T> m_getter
  private Action2<real, T> m_setter
  private T m_value

  // --------------------------------------------------------------------------
  construct(T value)
    m_value = value

  // --------------------------------------------------------------------------
  construct(Func1<real, T> getter)
    m_getter = getter
    m_setter = null

  // --------------------------------------------------------------------------
  construct(Func1<real, T> getter, Action2<real, T> setter)
    m_getter = getter
    m_setter = setter

  // --------------------------------------------------------------------------
  ondestroy
    if (m_getter != null)
      destroy m_getter
      m_getter = null

    if (m_setter != null)
      destroy m_setter
      m_setter = null

  // --------------------------------------------------------------------------
  function getValue(real time) returns T
    if (m_getter != null)
      m_value = m_getter.call(time)
    return m_value

  // --------------------------------------------------------------------------
  function setValue(real time, T value)
    m_value = value
    if (m_setter != null)
      m_setter.call(time, value)

  // --------------------------------------------------------------------------
  static function fromValue<T>(T value) returns FunctionalT<T>
    return new FunctionalT<T>(value)

  // --------------------------------------------------------------------------
  static function fromFunc<T>(Func1<real, T> func) returns FunctionalT<T>
    return new FunctionalT<T>(func, null)