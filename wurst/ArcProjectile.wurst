package ArcProjectile
import RealtimeUpdate
import GroupUtils
import Math
import Circle
import ClosureTimers
import Events
import Observable

// ============================================================================
public class ArcProjectile implements IRealtimeListener
  static bool SHOW_DEBUG = false

  private unit m_owner
  private vec2 m_startPos
  private vec2 m_endPos
  private real m_startSize
  private real m_endSize
  private real m_distance
  private circle m_boundingCircle
  private effect m_fx
  private group m_affectedUnits
  private real m_speed
  private real m_time

  private Event1<ArcProjectile> m_onUpdated

  use Observable

  // --------------------------------------------------------------------------
  construct(unit owner, effect fx, vec2 startPos, vec2 endPos, real startSize, real endSize, real speed)
    m_owner = owner
    m_fx = fx
    m_startPos = startPos
    m_endPos = endPos
    m_startSize = startSize
    m_endSize = endSize
    m_affectedUnits = getGroup()
    m_speed = speed
    m_distance = startPos.distanceTo(endPos)

  // --------------------------------------------------------------------------
  ondestroy
    this.unregisterForRealtimeUpdate()
    m_affectedUnits.release()
    m_fx.destr()

    if (m_onUpdated != null)
      destroy m_onUpdated
      m_onUpdated = null

  // ----------------------------------------------------------------------------
  function onUpdated() returns IEvent1<ArcProjectile>
    if (m_onUpdated == null)
      m_onUpdated = new Event1<ArcProjectile>()
    return m_onUpdated

  // ----------------------------------------------------------------------------
  function getOwner() returns unit
    return m_owner

  // --------------------------------------------------------------------------
  function getPos() returns vec2
    return lerp(m_startPos, m_endPos, getProgress01())

  // --------------------------------------------------------------------------
  function getProgress01() returns real
    return parameterize01(0, m_distance, getDistance())

  // --------------------------------------------------------------------------
  function getDistance() returns real
    return m_time * m_speed

  // ----------------------------------------------------------------------------
  function getBoundingCircle() returns circle
    return m_boundingCircle

  // ----------------------------------------------------------------------------
  function registerAffectedUnit(unit target)
    m_affectedUnits.addUnit(target)
  
  // ----------------------------------------------------------------------------
  function hasUnitBeenAffected(unit target) returns bool
    return m_affectedUnits.contains(target)

  // ----------------------------------------------------------------------------
  function start()

    m_time = 0.0
    m_boundingCircle = circle(ZERO2, 0)
    this.registerForRealtimeUpdate(RealtimeUpdatePriority.Realtime)

    realtimeUpdate(0)

  // --------------------------------------------------------------------------
  override function realtimeUpdate(real dt)

    m_time += dt

    let t = getProgress01()
    m_boundingCircle = circle(lerp(m_startPos, m_endPos, t), lerp(m_startSize, m_endSize, t))

    m_fx.setPos(getPos())

    if (SHOW_DEBUG)
      let fx = addEffect("circle.mdl", m_boundingCircle.center)..setScale(m_boundingCircle.radius / 64.0)
      doAfter(3.0, () -> fx.destr())

    if (m_onUpdated != null)
      m_onUpdated.call(this)

    if (t >= 1.0)
      destroy this