package Composition
import Meta
import Events
import LinkedList
import HashMap
import ClosureTimers
import ErrorHandling

// ============================================================================
public constant int typeId_IComponent = Meta.reserveInterface("IComponent.IComponent")
public interface IComponent
  function getOwner() returns IComposite
  function setEnabled(bool enabled)
  function getEnabled() returns bool

// ============================================================================
public constant int typeId_Component = Meta.reserveAbstractClass("Component.Component")
public abstract class Component implements IComponent
  private IComposite m_owner
  private bool m_enabled

  // --------------------------------------------------------------------------
  construct(IComposite owner)
    m_owner = owner

  // --------------------------------------------------------------------------
  ondestroy
    setEnabled(false)

  // --------------------------------------------------------------------------
  override function getOwner() returns IComposite
    return m_owner

  // --------------------------------------------------------------------------
  override function setEnabled(bool enabled)
    if (m_enabled != enabled)
      if (enabled)
        onEnabled()
      else
        onDisabled()
      m_enabled = enabled

  // --------------------------------------------------------------------------
  override function getEnabled() returns bool
    return m_enabled

  // --------------------------------------------------------------------------
  function enable()
    setEnabled(true)

  // --------------------------------------------------------------------------
  function disable()
    setEnabled(false)

  // --------------------------------------------------------------------------
  protected function onEnabled()
    skip

  // --------------------------------------------------------------------------
  protected function onDisabled()
    skip

  // --------------------------------------------------------------------------
  protected function removeThis()
    m_owner.removeComponent(this)

// ============================================================================
public constant int typeId_IComposite = Meta.reserveInterface("IComposite.IComposite")
public interface IComposite
  function onComponentAdded() returns IEvent2<IComposite, IComponent>
  function onComponentRemoved() returns IEvent2<IComposite, IComponent>
  function getComponent(int componentTypeId) returns IComponent
  function addComponent(IComponent component) returns IComponent
  function addComponent(IComponent component, bool startEnabled) returns IComponent
  function removeComponent(IComponent component) returns bool

// ============================================================================
public function IComposite.hasComponent(int componentTypeId) returns bool
  return this.hasComponent(componentTypeId)

// ============================================================================
public class Composable implements IComposite
  protected LinkedList<IComponent> _components = null
  protected HashMap<int, IComponent> _typeToComponentMap = null
  protected Event2<IComposite, IComponent> m_onComponentAdded = null
  protected Event2<IComposite, IComponent> m_onComponentRemoved = null

  // --------------------------------------------------------------------------
  construct()
    _components = new LinkedList<IComponent>()
    _typeToComponentMap = new HashMap<int, IComponent>()

  // --------------------------------------------------------------------------
  ondestroy

    if (m_onComponentAdded != null)
      destroy m_onComponentAdded
      m_onComponentAdded = null

    if (m_onComponentRemoved != null)
      destroy m_onComponentRemoved
      m_onComponentRemoved = null

    for component in _components
      component.setEnabled(false)

    for component in _components
      let compTypeId = component.typeId
      destroy component
      _typeToComponentMap.remove(compTypeId)
      
    destroy _components
    _components = null

    destroy _typeToComponentMap
    _typeToComponentMap = null

  // --------------------------------------------------------------------------
  override function onComponentAdded() returns IEvent2<IComposite, IComponent>
    if (m_onComponentAdded == null)
      m_onComponentAdded = new Event2<IComposite, IComponent>()
    return m_onComponentAdded

  // --------------------------------------------------------------------------
  override function onComponentRemoved() returns IEvent2<IComposite, IComponent>
    if (m_onComponentRemoved == null)
      m_onComponentRemoved = new Event2<IComposite, IComponent>()
    return m_onComponentRemoved

  // --------------------------------------------------------------------------
  override function addComponent(IComponent component) returns IComponent
    return addComponent(component, true)

  // --------------------------------------------------------------------------
  override function addComponent(IComponent component, bool startEnabled) returns IComponent
    if (component == null)
      argumentNullError("component")

    _components.add(component)
    _typeToComponentMap.put(component.typeId, component)
    component.setEnabled(startEnabled)

    if (m_onComponentAdded != null)
      m_onComponentAdded.call(this, component)

    return component

  // --------------------------------------------------------------------------
  override function removeComponent(IComponent component) returns bool
    if (component == null)
      argumentNullError("component")

    if (not _components.remove(component))
      return false

    component.setEnabled(false)

    if (m_onComponentRemoved != null)
      m_onComponentRemoved.call(this, component)

    _typeToComponentMap.remove(component.typeId)

    // Destroy next frame
    nullTimer(() -> destroy component)

    return true

  // --------------------------------------------------------------------------
  override function getComponent(int componentTypeId) returns IComponent
    return _typeToComponentMap.get(componentTypeId)

  // --------------------------------------------------------------------------
  function getComponents() returns LinkedList<IComponent>
    return _components

// ============================================================================
init
  Meta.register("Composition", (registrar) -> registerMetadata(registrar))

///////////////////////////////////////////////////////////////////////////////
function registerMetadata(MetaRegistrar registrar)
  registrar.registerInterface(typeId_IComponent, "IComponent.IComponent")
  registrar.registerAbstractClass(typeId_Component, "Component.Component")..registerInterface(typeId_IComponent)
  registrar.registerInterface(typeId_IComposite, "IComposite.IComposite")
  registrar.registerClass(Composable.typeId)..registerInterface(typeId_IComposite)
///////////////////////////////////////////////////////////////////////////////