package AnonymousEvent
import public Action

// ============================================================================
public class AnonymousEvent extends MulticastAction

// ============================================================================
class Counter
  int value

class String
  string value

@test
function invoke_CallsAddedHandler()
  // arrange
  let ev = new AnonymousEvent()
  let counter = new Counter()

  // act
  let cb = ev.add() () ->
    counter.value++

  ev.call()

  // assert
  assertTrue(cb != null)
  assertTrue(counter.value == 1)

@test
function invoke_DoesNotCallRemovedHandler()
  // arrange
  let ev = new AnonymousEvent()
  var counter = new Counter()

  let cb = ev.add() () ->
    counter.value++

  ev.remove(cb)
  destroy cb

  // act
  ev.call()

  // assert
  assertTrue(counter.value == 0)

@test
function invoke_DoesNotCallReremovedHandler()
  // arrange
  let ev = new AnonymousEvent()
  var counter = new Counter()

  let cb = ev.add() () ->
    counter.value++

  // act
  ev.call()
  
  ev.remove(cb)
  destroy cb

  ev.call()

  // assert
  assertTrue(counter.value == 1)

@test
function invoke_CallsReaddedHandler()
  // arrange
  let ev = new AnonymousEvent()
  var counter = new Counter()

  var cb = ev.add() () ->
    counter.value++
  
  ev.remove(cb)
  destroy cb

  ev.call()

  // act
  cb = ev.add() () ->
    counter.value += 10

  ev.call()

  // assert
  assertTrue(cb != null)
  assertTrue(counter.value == 10)

@test
function invoke_CallsMultipleHandlersInOrder()
  // arrange
  let ev = new AnonymousEvent()
  var s = new String()

  let cb1 = ev.add() () ->
    s.value += "Hello"
  
  let cb2 = ev.add() () ->
    s.value += " World!"

  // act
  ev.call()

  // assert
  assertTrue(cb1 != null)
  assertTrue(cb2 != null)
  assertTrue(cb1 != cb2)
  assertTrue(s.value == "Hello World!")