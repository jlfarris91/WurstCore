package Events
import LinkedList
import ErrorIf
import public Action

// ============================================================================
public class Event implements Action
  private LinkedList<Action> m_handlers

  // --------------------------------------------------------------------------
  construct()
    m_handlers = new LinkedList<Action>()

  // --------------------------------------------------------------------------
  construct(LinkedList<Action> handlers)
    m_handlers = handlers

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_handlers
    m_handlers = null

  // --------------------------------------------------------------------------
  function register(Action action) returns Action
    ErrorIf.argumentIsNull(action, "action")
    m_handlers.add(action)
    return action

  // --------------------------------------------------------------------------
  function unregister(Action action) returns bool
    ErrorIf.argumentIsNull(action, "action")
    return m_handlers.remove(action)

  // --------------------------------------------------------------------------
  override function call()
    for handler in m_handlers
      handler.call()

// ============================================================================
public class Event1<TArg1> implements Action1<TArg1>
  private LinkedList<Action1<TArg1>> m_handlers

  // --------------------------------------------------------------------------
  construct()
    m_handlers = new LinkedList<Action1<TArg1>>()

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_handlers
    m_handlers = null

  // --------------------------------------------------------------------------
  function register(Action1<TArg1> action) returns Action1<TArg1>
    ErrorIf.argumentIsNull(action, "action")
    m_handlers.add(action)
    return action

  // --------------------------------------------------------------------------
  function unregister(Action1<TArg1> action) returns bool
    ErrorIf.argumentIsNull(action, "action")
    return m_handlers.remove(action)

  // --------------------------------------------------------------------------
  override function call(TArg1 arg1)
    for handler in m_handlers
      handler.call(arg1)

// ============================================================================
public class Event2<TArg1, TArg2> implements Action2<TArg1, TArg2>
  private LinkedList<Action2<TArg1, TArg2>> m_handlers

  // --------------------------------------------------------------------------
  construct()
    m_handlers = new LinkedList<Action2<TArg1, TArg2>>()

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_handlers
    m_handlers = null

  // --------------------------------------------------------------------------
  function register(Action2<TArg1, TArg2> action) returns Action2<TArg1, TArg2>
    ErrorIf.argumentIsNull(action, "action")
    m_handlers.add(action)
    return action

  // --------------------------------------------------------------------------
  function unregister(Action2<TArg1, TArg2> action) returns bool
    ErrorIf.argumentIsNull(action, "action")
    return m_handlers.remove(action)

  // --------------------------------------------------------------------------
  override function call(TArg1 arg1, TArg2 arg2)
    for handler in m_handlers
      handler.call(arg1, arg2)

// ============================================================================
public class Event3<TArg1, TArg2, TArg3> implements Action3<TArg1, TArg2, TArg3>
  private LinkedList<Action3<TArg1, TArg2, TArg3>> m_handlers

  // --------------------------------------------------------------------------
  construct()
    m_handlers = new LinkedList<Action3<TArg1, TArg2, TArg3>>()

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_handlers
    m_handlers = null

  // --------------------------------------------------------------------------
  function register(Action3<TArg1, TArg2, TArg3> action) returns Action3<TArg1, TArg2, TArg3>
    ErrorIf.argumentIsNull(action, "action")
    m_handlers.add(action)
    return action

  // --------------------------------------------------------------------------
  function unregister(Action3<TArg1, TArg2, TArg3> action) returns bool
    ErrorIf.argumentIsNull(action, "action")
    return m_handlers.remove(action)

  // --------------------------------------------------------------------------
  override function call(TArg1 arg1, TArg2 arg2, TArg3 arg3)
    for handler in m_handlers
      handler.call(arg1, arg2, arg3)