package Runnable
import ErrorHandling
import Events

// ============================================================================
public interface IRunnable
  function getState() returns RunnableState
  function getError() returns string
  function start()
  function pause()
  function resume()
  function fail(string error)
  function complete()
  function reset()

// ============================================================================
public function IRunnable.hasStarted() returns bool
  return this.getState() != RunnableState.WAITING

// ============================================================================
public function IRunnable.isRunning() returns bool
  return this.getState() == RunnableState.RUNNING

// ============================================================================
public function IRunnable.isPaused() returns bool
  return this.getState() == RunnableState.PAUSED

// ============================================================================
public function IRunnable.isCompleted() returns bool
  return this.getState() == RunnableState.COMPLETED

// ============================================================================
public function IRunnable.succeeded() returns bool
  return this.isCompleted() and this.getError() == null

// ============================================================================
public function IRunnable.failed() returns bool
  return this.isCompleted() and this.getError() != null

// ============================================================================
public function IRunnable.cancel()
  this.fail("Canceled")

// ============================================================================
public enum RunnableState
  WAITING
  RUNNING
  PAUSED
  COMPLETED

// ============================================================================
public abstract class Runnable implements IRunnable
  private RunnableState m_state
  private string m_error
  private Event1<Runnable> m_stateChangedEvent
  
  // --------------------------------------------------------------------------
  construct()
    m_state = RunnableState.WAITING
    resetInternal()

  // --------------------------------------------------------------------------
  ondestroy
    if (not this.isCompleted())
      this.cancel()
    if (m_stateChangedEvent != null)
      destroy m_stateChangedEvent
      m_stateChangedEvent = null

  // --------------------------------------------------------------------------
  override function getState() returns RunnableState
    return m_state

  // --------------------------------------------------------------------------
  override function getError() returns string
    return m_error

  // --------------------------------------------------------------------------
  function getStateChangedEvent() returns Event1<Runnable>
    if (m_stateChangedEvent == null)
      m_stateChangedEvent = new Event1<Runnable>()
    return m_stateChangedEvent

  // --------------------------------------------------------------------------
  override function start()
    if (m_state == RunnableState.RUNNING)
      Log.warn("Attempted to start a runnable that was already running")
      return

    resetInternal()

    m_state = RunnableState.RUNNING
    onStarted()
    raiseStateChangedEvent()

  // --------------------------------------------------------------------------
  override function pause()
    if (m_state != RunnableState.RUNNING)
      Log.warn("Attempted to pause a runnable that was not running")
      return

    m_state = RunnableState.PAUSED
    onPaused()
    raiseStateChangedEvent()

  // --------------------------------------------------------------------------
  override function resume()
    if (m_state != RunnableState.PAUSED)
      Log.warn("Attempted to resume a runnable that was not paused")
      return

    m_state = RunnableState.RUNNING
    onResumed()
    raiseStateChangedEvent()

  // --------------------------------------------------------------------------
  override function fail(string error)
    m_error = error
    complete()

  // --------------------------------------------------------------------------
  override function complete()
    if (m_state != RunnableState.COMPLETED)
      m_state = RunnableState.COMPLETED
      onCompleted()
      raiseStateChangedEvent()

  // --------------------------------------------------------------------------
  override function reset()
    resetInternal()

    if (m_state != RunnableState.WAITING)
      m_state = RunnableState.WAITING
      raiseStateChangedEvent()

  // --------------------------------------------------------------------------
  private function resetInternal()
    m_error = null

  // --------------------------------------------------------------------------
  protected function onStarted()
    skip
  
  // --------------------------------------------------------------------------
  protected function onPaused()
    skip
  
  // --------------------------------------------------------------------------
  protected function onResumed()
    skip

  // --------------------------------------------------------------------------
  protected function onCompleted()
    skip

  // --------------------------------------------------------------------------
  function getStatusString() returns string
    switch (m_state)
      case RunnableState.WAITING
        return "Waiting"
      case RunnableState.RUNNING
        return "Running"
      case RunnableState.PAUSED
        return "Paused"
      case RunnableState.COMPLETED
        return m_error != null ? "Failed" : "Succeeded"

  // --------------------------------------------------------------------------
  private function raiseStateChangedEvent()
    if (m_stateChangedEvent != null)
      m_stateChangedEvent.call(this)