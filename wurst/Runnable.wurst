package Runnable
import Events
import IProgress
import Reflection

@configurable public bool g_enableRunnableLogging = false

// ============================================================================
public enum RunnableState
  WAITING
  RUNNING
  PAUSED
  COMPLETED

// ============================================================================
public interface IRunnable
  function getState() returns RunnableState
  function getError() returns string
  function start()
  function pause()
  function resume()
  function fail(string error)
  function complete()
  function reset()
  function cancel()
  function getStatusString() returns string
  function getStateChangedEvent() returns Event1<IRunnable>

// ============================================================================
public abstract class Runnable implements IRunnable, IProgress
  private RunnableState m_state
  private string m_error
  private Event1<IRunnable> m_stateChangedEvent
  private Event1<IProgress> m_progressChangedEvent
  
  // --------------------------------------------------------------------------
  construct()
    m_state = RunnableState.WAITING
    resetInternal()

  // --------------------------------------------------------------------------
  ondestroy
    if (m_state != COMPLETED)
      complete()

    if (m_stateChangedEvent != null)
      destroy m_stateChangedEvent
      m_stateChangedEvent = null

    if (m_progressChangedEvent != null)
      destroy m_progressChangedEvent
      m_progressChangedEvent = null

  // --------------------------------------------------------------------------
  override function getState() returns RunnableState
    return m_state

  // --------------------------------------------------------------------------
  override function getError() returns string
    return m_error

  // --------------------------------------------------------------------------
  override function start()
    if (m_state == RunnableState.RUNNING)
      log("start", "Attempted to start a runnable that was already running")
      return

    m_state = RunnableState.RUNNING

    resetInternal()
    onStarted()
    raiseStateChangedEvent()

  // --------------------------------------------------------------------------
  override function pause()
    if (m_state != RunnableState.RUNNING)
      log("pause", "Attempted to pause a runnable that was not running")
      return

    m_state = RunnableState.PAUSED
    onPaused()
    raiseStateChangedEvent()

  // --------------------------------------------------------------------------
  override function resume()
    if (m_state != RunnableState.PAUSED)
      log("resume", "Attempted to resume a runnable that was not paused")
      return

    m_state = RunnableState.RUNNING
    onResumed()
    raiseStateChangedEvent()

  // --------------------------------------------------------------------------
  override function fail(string error)
    m_error = error
    complete()

  // --------------------------------------------------------------------------
  override function complete()
    if (m_state == RunnableState.COMPLETED)
      return

    m_state = RunnableState.COMPLETED
    onCompleted()
    raiseStateChangedEvent()

  // --------------------------------------------------------------------------
  override function reset()
    resetInternal()

    if (m_state != RunnableState.WAITING)
      m_state = RunnableState.WAITING
      raiseStateChangedEvent()

  // --------------------------------------------------------------------------
  function hasStarted() returns bool
    return getState() != RunnableState.WAITING

  // --------------------------------------------------------------------------
  function isRunning() returns bool
    return getState() == RunnableState.RUNNING

  // --------------------------------------------------------------------------
  function isPaused() returns bool
    return getState() == RunnableState.PAUSED

  // --------------------------------------------------------------------------
  function isCompleted() returns bool
    return getState() == RunnableState.COMPLETED

  // --------------------------------------------------------------------------
  function succeeded() returns bool
    return isCompleted() and this.getError() == null

  // --------------------------------------------------------------------------
  function failed() returns bool
    return isCompleted() and this.getError() != null

  // --------------------------------------------------------------------------
  override function cancel()
    fail("Canceled")

  // --------------------------------------------------------------------------
  function restart()
    cancel()
    start()

  // --------------------------------------------------------------------------
  override function getStateChangedEvent() returns Event1<IRunnable>
    if (m_stateChangedEvent == null)
      m_stateChangedEvent = new Event1<IRunnable>()
    return m_stateChangedEvent

  // --------------------------------------------------------------------------
  override function getStatusString() returns string
    switch (m_state)
      case RunnableState.WAITING
        return "Waiting"
      case RunnableState.RUNNING
        return "Running"
      case RunnableState.PAUSED
        return "Paused"
      case RunnableState.COMPLETED
        return m_error != null ? "Failed" : "Succeeded"

  // --------------------------------------------------------------------------
  override function getProgress() returns real
    return 0.0

  // --------------------------------------------------------------------------
  override function getMessage() returns string
    return ""

  // --------------------------------------------------------------------------
  override function onProgressChanged() returns Event1<IProgress>
    if (m_progressChangedEvent == null)
      m_progressChangedEvent = new Event1<IProgress>()
    return m_progressChangedEvent

  // --------------------------------------------------------------------------
  function raiseProgressChangedEvent()
    if (m_progressChangedEvent != null)
      m_progressChangedEvent.call((this castTo int) castTo IProgress)

  // --------------------------------------------------------------------------
  protected function onStarted()
    skip
  
  // --------------------------------------------------------------------------
  protected function onPaused()
    skip
  
  // --------------------------------------------------------------------------
  protected function onResumed()
    skip

  // --------------------------------------------------------------------------
  protected function onCompleted()
    skip

  // --------------------------------------------------------------------------
  protected function raiseStateChangedEvent()
    if (m_stateChangedEvent != null)
      m_stateChangedEvent.call((this castTo int) castTo IRunnable)

  // --------------------------------------------------------------------------
  private function resetInternal()
    m_error = null

  // --------------------------------------------------------------------------
  private function log(string funcName, string message)
    if (g_enableRunnableLogging)
      Log.debug(typeIdToTypeName(((this castTo int) castTo IRunnable).typeId), funcName, (this castTo int).toString(), message)